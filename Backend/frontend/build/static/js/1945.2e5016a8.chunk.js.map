{"version":3,"file":"static/js/1945.2e5016a8.chunk.js","mappings":"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","sources":["IP_Workbench/Doctor/Ip_DoctorPrescribtion.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n// import { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\n// import { DataGrid } from \"@mui/x-data-grid\";\r\nimport ToggleButton from \"@mui/material/ToggleButton\";\r\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\r\n// import \"../IPNurseflow/IpNurseVitals.css\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport ReactGrid from '../../OtherComponent/ReactGrid/ReactGrid';\r\nimport { format } from \"date-fns\";\r\nimport axios from \"axios\";\r\nimport Tooltip from \"@mui/material/Tooltip\";\r\nimport { Button } from \"@mui/material\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport BlockIcon from \"@mui/icons-material/Block\";\r\n\r\n\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\nfunction CancelDrugDialog({ open, onClose, onConfirm, cancelsenddata, setcancelsenddata }) {\r\n\r\n  console.log(open, 'ppiup');\r\n\r\n  const handleConfirm = () => {\r\n    // Call the onConfirm callback with the cancellation reason\r\n    onConfirm(cancelsenddata);\r\n    // Close the dialog\r\n    onClose();\r\n\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setcancelsenddata(null)\r\n    onClose();\r\n  }\r\n\r\n  return (\r\n    <Dialog open={open} onClose={onClose}>\r\n      <DialogTitle>Drug Stop Reason</DialogTitle>\r\n      <DialogContent>\r\n        <TextField\r\n          label=\"Drug Stop Reason\"\r\n          multiline\r\n          rows={4}\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          value={cancelsenddata?.Reason}\r\n          onChange={(e) => setcancelsenddata((prev) => ({\r\n            ...prev,\r\n            Reason: e.target.value\r\n          }))}\r\n        />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose} color=\"primary\">\r\n          Close\r\n        </Button>\r\n        <Button onClick={handleConfirm} color=\"primary\">\r\n          Save\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\n\r\n\r\nconst Prescription = () => {\r\n  const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n  const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n  console.log(IP_DoctorWorkbenchNavigation, 'IP_DoctorWorkbenchNavigation');\r\n  const [GenericName, setgenericName] = useState([]);\r\n  const [getdataa, setgetdataa] = useState(false);\r\n  const [ItemName, setItemName] = useState([]);\r\n  const [isEdit, setisEdit] = useState(false);\r\n  const [cancelsenddata, setcancelsenddata] = useState(null)\r\n  const [OpenDialog, setOpenDialog] = useState(false)\r\n  const [editid, seteditid] = useState('');\r\n  const [priscriptionid, setpriscriptionid] = useState()\r\n  const IpNurseQueSelectedRow = useSelector(\r\n    (state) => state.InPatients?.IpNurseQueSelectedRow\r\n  );\r\n  const [lastprescribed, setlastprescribed] = useState([])\r\n  const [page, setPage] = useState(0);\r\n  const [page1, setPage1] = useState(0);\r\n  const pageSize = 10;\r\n  const [summa, setsumma] = useState([]);\r\n  const [summa1, setsumma1] = useState(null);\r\n  const showdown = summa.length;\r\n  const showdown1 = summa1?.medicinedata.length || 0;\r\n  const totalPages = Math.ceil(summa.length / 10);\r\n  const totalPages1 = Math.ceil(summa1?.medicinedata.length / 10);\r\n  const handlePageChange = (params) => {\r\n    if (type === \"Intake\") {\r\n      setPage(params.page);\r\n    } else {\r\n      setPage1(params.page);\r\n    }\r\n  };\r\n  const UrlLink = useSelector((state) => state.userRecord?.UrlLink);\r\n\r\n  const blockInvalidChar = (e) =>\r\n    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) && e.preventDefault();\r\n  const [type, setType] = useState(\"Intake\");\r\n  const [AddPriscribtion, setAddPriscribtion] = useState({\r\n    Department: \"\",\r\n    DoctorName: \"\",\r\n    GenericName: \"\",\r\n    MedicineCode: \"\",\r\n    MedicineName: \"\",\r\n    Dosage: \"\",\r\n    Route: \"\",\r\n    FrequencyMethod: \"Regular\",\r\n    FrequencyType: \"\",\r\n    Frequency: \"\",\r\n    FrequencyTime: \"\",\r\n    Duration: \"\",\r\n    DurationType: \"days\",\r\n    AdminisDose: \"\",\r\n    Quantity: \"\",\r\n    Date: \"\",\r\n    Time: \"\",\r\n    Instruction: \"\",\r\n    Specialization: \"\",\r\n    Onbehalf: \"No\",\r\n    Prescribedby: \"\"\r\n\r\n  });\r\n\r\n  console.log(AddPriscribtion)\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        `${UrlLink}DrugAdminstrations/getgenericname`\r\n      )\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        // Process the response data as needed\r\n        setgenericName(Array.isArray(response.data) ? response.data : []);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching generic names:\", error);\r\n        // Handle the error, e.g., show an error message to the user\r\n      });\r\n  }, [userRecord?.location]);\r\n  useEffect(() => {\r\n    const selectedGenericName = AddPriscribtion.GenericName;\r\n\r\n    if (selectedGenericName) {\r\n      axios\r\n        .get(\r\n          `${UrlLink}DrugAdminstrations/getitemname_bygenericname?genericName=${selectedGenericName}&location=${userRecord?.location}`\r\n        )\r\n        .then((response) => {\r\n          console.log(response.data);\r\n          setItemName(response.data);\r\n          if (!response.data.length > 0) {\r\n            setAddPriscribtion((prev) => ({\r\n              ...prev,\r\n              MedicineName: '',\r\n              MedicineCode: '',\r\n              Dosage: '',\r\n              Route: '',\r\n            }));\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching item names:\", error);\r\n        });\r\n    }\r\n    // setItemName([])\r\n    // setAddPriscribtion((prev) => ({\r\n    //   ...prev,\r\n    //   MedicineName: '',\r\n    //   MedicineCode: '',\r\n    //   Dosage:'',\r\n    //   Route:'',\r\n    // }));\r\n  }, [AddPriscribtion.GenericName, userRecord?.location]);\r\n\r\n  const [selectedTimes, setSelectedTimes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (AddPriscribtion.Frequency) {\r\n      const frequencytypeval = selectedTimes.find(\r\n        (p) => p.Frequency === AddPriscribtion.Frequency\r\n      );\r\n      setAddPriscribtion((prev) => ({\r\n        ...prev,\r\n        FrequencyTime: frequencytypeval?.FrequencyTime,\r\n      }));\r\n    }\r\n  }, [AddPriscribtion.Frequency, selectedTimes]);\r\n  const [getdatastate, setgetdatastate] = useState(false);\r\n\r\n\r\n  const handleCancelAppointment = () => {\r\n    const requiredfields = [...Object.keys(cancelsenddata)]\r\n    const existing = requiredfields.filter((field) => !cancelsenddata[field])\r\n\r\n    if (existing.length > 0) {\r\n      alert(`Please fill the Required Fields for ${existing.join(',')}`)\r\n    } else {\r\n      const confirmation = window.confirm('Are you sure you want to Stop the Drug ?.');\r\n      console.log(confirmation);\r\n\r\n      if (confirmation) {\r\n        axios.post(`${UrlLink}ipregistration/cancel_drug_administration`, cancelsenddata)\r\n          .then((response) => {\r\n            console.log(response.data);\r\n            setgetdataa(!getdataa);\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          })\r\n        setOpenDialog(false)\r\n        setcancelsenddata(null)\r\n      } else {\r\n        setOpenDialog(false)\r\n        setcancelsenddata(null)\r\n      }\r\n    }\r\n  };\r\n\r\n  const handlestopDrug = (params) => {\r\n\r\n    const senddata = {\r\n      Booking_Id: IpNurseQueSelectedRow?.Booking_Id,\r\n      Prescibtion_Id: params?.Prescibtion_Id,\r\n      Reason: '',\r\n      Stopped_date: format(new Date(), 'yyyy-MM-dd'),\r\n      Stopped_time: format(new Date(), \"HH:mm:ss\"),\r\n      CapturedBy: userRecord?.username\r\n    }\r\n\r\n    setcancelsenddata(senddata)\r\n    setOpenDialog(true);\r\n    console.log('---------', senddata)\r\n  };\r\n\r\n\r\n  const warnmessage = (warnmsg) => {\r\n    toast.warn(`${warnmsg}`, {\r\n      position: \"top-center\",\r\n      autoClose: 1000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      theme: \"dark\",\r\n      style: { marginTop: \"50px\" },\r\n    });\r\n  };\r\n  const handleInputChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n\r\n    if (type === \"checkbox\") {\r\n      setAddPriscribtion((prev) => ({\r\n        ...prev,\r\n        [name]: checked ? \"Yes\" : \"\", // Set value to \"yes\" if checked, otherwise empty string\r\n      }));\r\n    } else {\r\n      console.log(name, value);\r\n\r\n      if (name === \"MedicineName\") {\r\n        const detail = ItemName?.find((p) => p.ItemCode === value);\r\n        console.log(detail, '000000000000');\r\n        if (detail) {\r\n          setAddPriscribtion((prev) => ({\r\n            ...prev,\r\n            [name]: detail?.ItemName,\r\n            MedicineCode: detail?.ItemCode,\r\n            Dosage: detail?.Dose,\r\n            Route: detail?.Pack_type,\r\n          }));\r\n        } else {\r\n          setAddPriscribtion((prev) => ({\r\n            ...prev,\r\n            [name]: detail?.ItemName,\r\n            MedicineCode: '',\r\n            Dosage: '',\r\n            Route: '',\r\n          }));\r\n        }\r\n      } else if (name === 'Department') {\r\n        setAddPriscribtion((prev) => ({\r\n          ...prev,\r\n          [name]: value,\r\n          DoctorName: value === 'Primary' ? IpNurseQueSelectedRow?.PrimaryDoctor : '',\r\n        }));\r\n      } else if (name === 'Onbehalf') {\r\n        setAddPriscribtion((prev) => ({\r\n          ...prev,\r\n          [name]: value === 'Yes' ? 'Yes' : 'No', // Set value to \"yes\" if checked, otherwise empty string\r\n        }));\r\n      } else {\r\n        setAddPriscribtion((prev) => ({\r\n          ...prev,\r\n          [name]: value,\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (\r\n      AddPriscribtion?.Frequency &&\r\n      AddPriscribtion?.Duration &&\r\n      AddPriscribtion?.DurationType\r\n    ) {\r\n      // Split the Frequency string into an array\r\n      const frequency = AddPriscribtion?.Frequency.split(\"-\");\r\n      // Calculate the sum of frequencies\r\n      const sum = frequency.reduce((acc, val) => acc + parseInt(val), 0);\r\n\r\n      let durationdata = 0;\r\n      // Adjust durationdata based on the DurationType\r\n      if (AddPriscribtion?.DurationType === \"Weeks\") {\r\n        durationdata = sum * 7;\r\n      } else if (AddPriscribtion?.DurationType === \"Months\") {\r\n        durationdata = sum * 30;\r\n      } else {\r\n        durationdata = sum * 1;\r\n      }\r\n      console.log(\"durationdata\", durationdata);\r\n\r\n      let quantityData = 0;\r\n\r\n      if (AddPriscribtion?.Route === \"Syrup\") {\r\n        const dattt = durationdata * AddPriscribtion?.Duration;\r\n        console.log(\"dattt\", dattt);\r\n        const rrrr = dattt * AddPriscribtion?.AdminisDose;\r\n        let qnt = 0;\r\n        const dosageSplit = AddPriscribtion?.Dosage.split(\" \");\r\n        const dosageValue = parseFloat(dosageSplit[0]);\r\n        const dosageUnit = dosageSplit[1];\r\n        if (dosageUnit === \"ml\") {\r\n          if (rrrr > dosageValue) {\r\n            qnt = rrrr / dosageValue;\r\n          } else {\r\n            qnt = 1;\r\n          }\r\n        } else if (dosageUnit === \"l\") {\r\n          qnt = dosageValue * 1000; // Convert liters to milliliters\r\n          if (rrrr > dosageValue * 1000) {\r\n            qnt = rrrr / (dosageValue * 1000);\r\n          } else {\r\n            qnt = 1;\r\n          }\r\n        }\r\n\r\n        console.log(\"qnt\", qnt);\r\n        console.log(\"rrrr\", rrrr);\r\n        quantityData = Math.ceil(qnt);\r\n      } else {\r\n        // Calculate Quantity based on durationdata and Duration\r\n        quantityData = durationdata * AddPriscribtion.Duration;\r\n      }\r\n\r\n      console.log(\"Route\", AddPriscribtion.Route);\r\n\r\n      // Update the state with the new Quantity value\r\n      setAddPriscribtion((prev) => ({\r\n        ...prev,\r\n        Quantity: quantityData,\r\n      }));\r\n    }\r\n  }, [\r\n    AddPriscribtion?.Frequency,\r\n    AddPriscribtion?.Duration,\r\n    AddPriscribtion?.DurationType,\r\n    AddPriscribtion?.AdminisDose,\r\n    AddPriscribtion?.Route,\r\n    AddPriscribtion?.Dosage,\r\n    AddPriscribtion?.FrequencyMethod,\r\n    AddPriscribtion?.FrequencyType\r\n  ]);\r\n\r\n  const handlecleardata = () => {\r\n    setAddPriscribtion((prev) => ({\r\n      ...prev,\r\n      Department: \"\",\r\n      DoctorName: \"\",\r\n      GenericName: \"\",\r\n      MedicineCode: \"\",\r\n      MedicineName: \"\",\r\n      Dosage: \"\",\r\n      Route: \"\",\r\n      FrequencyMethod: \"Regular\",\r\n      FrequencyType: \"\",\r\n      Frequency: \"\",\r\n      FrequencyTime: \"\",\r\n      Duration: \"\",\r\n      DurationType: \"days\",\r\n      AdminisDose: \"\",\r\n      Quantity: \"\",\r\n      Instruction: \"\",\r\n      Prescribedby: \"\",\r\n      Specialization: \"\",\r\n      Onbehalf: \"No\",\r\n    }));\r\n  };\r\n  useEffect(() => {\r\n    axios\r\n      .get(`${UrlLink}Masters/insert_frequency_masters`)\r\n      .then((response) => {\r\n        const data = response.data.map((p, index) => ({\r\n          ...p,\r\n          id: p.Frequency_Id,\r\n        }));\r\n        setSelectedTimes(data);\r\n        console.log(data);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    axios.get(`${UrlLink}DrugAdminstrations/get_prescription_master_code`)\r\n      .then((response) => {\r\n        console.log(response)\r\n        const data = response.data.nextInvoiceCode\r\n        setpriscriptionid(data)\r\n      })\r\n      .catch((error) => {\r\n        console.log(error)\r\n      })\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        `${UrlLink}DrugAdminstrations/get_for_ip_durgs_doctor_show?Booking_id=${IP_DoctorWorkbenchNavigation?.RegistrationId}`\r\n      )\r\n      .then((response) => {\r\n        const data = response.data;\r\n\r\n        console.log(\"data\", data);\r\n        // Function to convert time to AM/PM format\r\n        // Function to convert time to AM/PM format\r\n        const convertToAMPM = (time) => {\r\n          const numTime = parseInt(time);\r\n          return numTime >= 1 && numTime <= 11\r\n            ? numTime + \" AM\"\r\n            : numTime === 12\r\n              ? \"12 PM\"\r\n              : numTime - 12 + \" PM\";\r\n        };\r\n\r\n        // Extract unique times from FrequencyTime arrays and convert them to AM/PM format\r\n        const freqdata = [\r\n          ...new Set(\r\n            data.flatMap((p) =>\r\n              p.FrequencyIssued.flatMap((r) => r.FrequencyIssued)\r\n            )\r\n          ),\r\n        ]\r\n          .map((time) => convertToAMPM(time))\r\n          .sort((a, b) => {\r\n            // Extract AM/PM and numerical value from time string\r\n            const [aNum, aPeriod] = a.split(\" \");\r\n            const [bNum, bPeriod] = b.split(\" \");\r\n\r\n            // Compare periods (AM comes before PM)\r\n            if (aPeriod !== bPeriod) {\r\n              return aPeriod.localeCompare(bPeriod);\r\n            }\r\n\r\n            // If periods are the same, sort numerically\r\n            return parseInt(aNum) - parseInt(bNum);\r\n          });\r\n\r\n        console.log(\"freqdata\", freqdata);\r\n\r\n        setsumma1({\r\n          frequencyTime: freqdata,\r\n          medicinedata: data.map((p, indx) => ({ ...p, id: indx + 1 })),\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, [IpNurseQueSelectedRow?.Booking_Id, type]);\r\n  useEffect(() => {\r\n    const now = new Date();\r\n    const formattedTime = format(now, \"HH:mm:ss\");\r\n    const newdate = format(new Date(), \"yyyy-MM-dd\");\r\n    setAddPriscribtion((prev) => ({\r\n      ...prev,\r\n      Time: formattedTime,\r\n      Date: newdate,\r\n    }));\r\n  }, []);\r\n\r\n  const handleChange = (event) => {\r\n    setType(event.target.value);\r\n  };\r\n  const formatLabel = (label) => {\r\n    // Check if the label contains both uppercase and lowercase letters, and doesn't contain numbers\r\n    if (/[a-z]/.test(label) && /[A-Z]/.test(label) && !/\\d/.test(label)) {\r\n      return label\r\n        .replace(/([a-z])([A-Z])/g, \"$1 $2\") // Add space between lowercase and uppercase letters\r\n        .replace(/^./, (str) => str.toUpperCase()); // Capitalize first letter\r\n    } else {\r\n      return label;\r\n    }\r\n  };\r\n\r\n  const handleChangeedit = (params) => {\r\n    console.log('params/.............................', params)\r\n    const data = summa.find((p) => p.id === params.id)\r\n    setAddPriscribtion({\r\n      ...data\r\n    })\r\n    setisEdit(true)\r\n    seteditid(params.id)\r\n  };\r\n\r\n  const handleChangeadd = (params) => {\r\n    console.log('params/.............................', params)\r\n    const data = lastprescribed.find((p) => p.id === params.id)\r\n    setAddPriscribtion({\r\n      ...data,\r\n      DurationType: 'days'\r\n\r\n    })\r\n    // setisEdit()\r\n    seteditid(params.id)\r\n  };\r\n\r\n\r\n  const handleupdate = () => {\r\n    let requiredfields = [];\r\n    if (AddPriscribtion.FrequencyMethod === \"Regular\") {\r\n      requiredfields = [...Object.keys(AddPriscribtion)].filter(\r\n        (key) => key !== \"Instruction\"\r\n      );\r\n    } else {\r\n      requiredfields = [...Object.keys(AddPriscribtion)].filter(\r\n        (key) =>\r\n          ![\r\n            \"Instruction\",\r\n            \"FrequencyType\",\r\n            \"Frequency\",\r\n            \"FrequencyTime\",\r\n            \"Duration\",\r\n            \"DurationType\",\r\n          ].includes(key)\r\n      );\r\n    }\r\n\r\n    const exist = requiredfields.filter((field) => !AddPriscribtion[field]);\r\n\r\n    if (exist.length > 0) {\r\n      warnmessage(`The following fields are required: ${exist.join(\", \")}`);\r\n    } else {\r\n      const index = summa.findIndex((row) => row.id === editid);\r\n      if (index !== -1) {\r\n        const updatedRow = {\r\n          ...summa[index],\r\n          ...AddPriscribtion,\r\n        };\r\n        const data = [...summa];\r\n        data[index] = updatedRow;\r\n        setsumma(data);\r\n        handlecleardata();\r\n        setisEdit(false)\r\n      } else {\r\n        console.error(\"Row with id\", editid, \"not found.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const lastprescrib = [\r\n    {\r\n      field: \"id\",\r\n      headerName: \"S_No\",\r\n      width: 40,\r\n    },\r\n    ...(lastprescribed && lastprescribed.length > 0 ? Object.keys(lastprescribed[0]).filter((p) => p !== 'id').map((labelname, index) => {\r\n      const formattedLabel = formatLabel(labelname);\r\n      const labelWidth = getTextWidth(formattedLabel);\r\n\r\n      return {\r\n        field: labelname,\r\n        headerName: formattedLabel,\r\n        width: [\"Instruction\", \"Date\", \"Time\"].includes(labelname) ? labelWidth + 100 : labelWidth + 30,\r\n        valueGetter: (params) => {\r\n          const value = params.row[labelname];\r\n          return value ? value : \"-\";\r\n        },\r\n      };\r\n    }) : []),\r\n    {\r\n      field: \"Action\",\r\n      headerName: \"Add\",\r\n      width: 120,\r\n      renderCell: (params) => (\r\n        <>\r\n          <Button className=\"cell_btn\" onClick={() => handleChangeadd(params.row)}>\r\n            <AddIcon className=\"check_box_clrr_add\" />\r\n          </Button>\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      field: \"Actions\", // corrected the field name to match the header name\r\n      headerName: \"Stop\",\r\n      width: 120,\r\n      renderCell: (params) => (\r\n        <>{params.row.Status === 'Stopped' ? 'Stopped' :\r\n          <Button className=\"cell_btn\"\r\n            onClick={() => handlestopDrug(params.row)}>\r\n            <BlockIcon className=\"check_box_clrr_5\" /> {/* corrected the icon to StopIcon */}\r\n          </Button>}\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  function getTextWidth(text) {\r\n    // Create a dummy element to measure text width\r\n    const dummyElement = document.createElement(\"span\");\r\n    dummyElement.textContent = text;\r\n    dummyElement.style.visibility = \"hidden\";\r\n    dummyElement.style.whiteSpace = \"nowrap\";\r\n    document.body.appendChild(dummyElement);\r\n\r\n    // Get the width of the text\r\n    const width = dummyElement.offsetWidth;\r\n\r\n    // Remove the dummy element\r\n    document.body.removeChild(dummyElement);\r\n\r\n    return width;\r\n  }\r\n  const dynamicColumns = [\r\n    {\r\n      key: \"id\",\r\n      name: \"S_No\",\r\n\r\n    },\r\n    ...Object.keys(AddPriscribtion).map((labelname, index) => {\r\n      const formattedLabel = formatLabel(labelname);\r\n      const labelWidth = getTextWidth(formattedLabel);\r\n\r\n      return {\r\n        key: labelname,\r\n        name: formattedLabel,\r\n\r\n      };\r\n    }),\r\n    {\r\n      key: \"Action\",\r\n      name: \"Edit\",\r\n      renderCell: (params) => (\r\n        <>\r\n          <Button className=\"cell_btn\" onClick={() => handleChangeedit(params.row)}>\r\n            <EditIcon />\r\n          </Button>\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n  const dynamicColumns1 = () => {\r\n    // Define static fields\r\n    const staticFields = [\r\n      { key: \"id\", name: \"S_No\" },\r\n      { key: \"PrescribedDate\", name: \"Prescribed Date\" },\r\n      { key: \"IssuedDate\", name: \"Issued Date\" },\r\n      { key: \"Department\", name: \"Department\" },\r\n      { key: \"DoctorName\", name: \"Doctor Name\" },\r\n      { key: \"MedicineName\", name: \"Medicine Name\" },\r\n      { key: \"FrequencyMethod\", name: \"Frequency Method\" }\r\n    ];\r\n\r\n    // Check if summa1 and summa1?.frequencyTime are valid\r\n    let dynamicFields = [];\r\n    if (summa1 && Array.isArray(summa1?.frequencyTime)) {\r\n      dynamicFields = summa1.frequencyTime.map(labelname => {\r\n        const formattedLabel = formatLabel(labelname);\r\n        return {\r\n          key: labelname,\r\n          name: formattedLabel,\r\n          renderCell: (params) => {\r\n            if (![\r\n              \"PrescribedDate\",\r\n              \"IssuedDate\",\r\n              \"Department\",\r\n              \"DoctorName\",\r\n              \"MedicineName\",\r\n              \"FrequencyMethod\",\r\n            ].includes(labelname.split(\" \")[0])) {\r\n              const newwtime = labelname.split(\" \");\r\n              let ttt = 0;\r\n              if (newwtime[1] === \"PM\") {\r\n                ttt = +newwtime[0] + 12;\r\n              } else {\r\n                ttt = +newwtime[0];\r\n              }\r\n              const med = params.row;\r\n              if (med.FrequencyIssued) {\r\n                const statusMap = {\r\n                  \"Pending\": \"yellow\",\r\n                  \"Issued\": \"green\",\r\n                  \"Before\": \"blue\",\r\n                  \"Delay\": \"orange\",\r\n                  \"NotIssued\": \"grey\",\r\n                  \"Stopped\": \"red\"\r\n                };\r\n\r\n                const statuses = {\r\n                  \"Pending\": med.FrequencyIssued.some(f => f.Status === \"Pending\" && +f.FrequencyIssued === +ttt),\r\n                  \"Issued\": med.FrequencyIssued.some(f => f.Status === \"Issued\" && +f.FrequencyIssued === +ttt),\r\n                  \"Before\": med.FrequencyIssued.some(f => f.Status === \"Before\" && +f.FrequencyIssued === +ttt),\r\n                  \"Delay\": med.FrequencyIssued.some(f => f.Status === \"Delay\" && +f.FrequencyIssued === +ttt),\r\n                  \"NotIssued\": med.FrequencyIssued.some(f => f.Status === \"NotIssued\" && +f.FrequencyIssued === +ttt),\r\n                };\r\n\r\n                const showdata = med.FrequencyIssued.filter(rr => +rr.FrequencyIssued === +ttt)\r\n                  .map(p => ({\r\n                    IssuedBy: p.CapturedBy,\r\n                    IssuedDate: p.Completed_Date,\r\n                    IssuedTime: p.Completed_Time,\r\n                    Remarks: p.Completed_Remarks,\r\n                  }));\r\n                const dataone = showdata[0];\r\n\r\n                for (const [status, className] of Object.entries(statusMap)) {\r\n                  if (statuses[status]) {\r\n                    return (\r\n                      <Tooltip\r\n                        title={\r\n                          <div>\r\n                            {Object.keys(dataone).map((field, indx) => (\r\n                              <h4\r\n                                key={indx}\r\n                                style={{\r\n                                  padding: \"3px\",\r\n                                  display: \"block\",\r\n                                  fontSize: \"11px\",\r\n                                }}\r\n                              >\r\n                                {field === 'IssuedBy' ? 'Stopped By'\r\n                                  : field === 'IssuedDate' ? 'Stopped Date'\r\n                                    : field === 'IssuedTime' ? 'Stopped Time'\r\n                                      : formatLabel(field)} <span>:</span>{\" \"}\r\n                                {dataone[field]}\r\n                              </h4>\r\n                            ))}\r\n                          </div>\r\n                        }\r\n                      >\r\n                        <span style={{color:className}}>{status}</span>\r\n                      </Tooltip>\r\n                    );\r\n                  }\r\n                }\r\n                return \"-\";\r\n              } else {\r\n                return \"-\";\r\n              }\r\n            } else {\r\n              return params.value;\r\n            }\r\n          },\r\n        };\r\n      });\r\n    }\r\n\r\n    // // Define action field\r\n    // const actionField = {\r\n    //   // key: \"Action\",\r\n    //   // name: \"Action\",\r\n    //   // renderCell: (params) => (\r\n    //   //   <Button className=\"cell_btn\" onClick={() => handlestopDrug(params.row)}>\r\n    //   //     <CancelIcon className=\"check_box_clrr_cancell\" />\r\n    //   //   </Button>\r\n    //   // ),\r\n    // };\r\n\r\n    return [...staticFields, ...dynamicFields];\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios.get(`${UrlLink}ipregistration/get_last_prescribed_madicine_by_doc`)\r\n      .then((response) => {\r\n        console.log(response)\r\n        const data = response.data.map((p, index) => ({\r\n          ...p,\r\n          id: index + 1\r\n        }))\r\n        console.log(data)\r\n        setlastprescribed(data)\r\n        // setPrescriptionData(data)\r\n      })\r\n      .catch((error) => {\r\n        console.log(error)\r\n      })\r\n  }, [])\r\n\r\n  const handlesubmitdata = () => {\r\n    let requiredfields = [];\r\n    if (AddPriscribtion.FrequencyMethod === \"Regular\") {\r\n      requiredfields = [...Object.keys(AddPriscribtion)].filter(\r\n        (key) => key !== \"Instruction\" && key !== \"Prescribedby\" && key !== 'Onbehalf'\r\n      );\r\n    } else {\r\n      requiredfields = [...Object.keys(AddPriscribtion)].filter(\r\n        (key) =>\r\n          ![\r\n            \"Instruction\",\r\n            \"FrequencyType\",\r\n            \"Frequency\",\r\n            \"FrequencyTime\",\r\n            \"Duration\",\r\n            \"DurationType\",\r\n          ].includes(key)\r\n      );\r\n    }\r\n\r\n    const exist = requiredfields.filter((field) => !AddPriscribtion[field]);\r\n\r\n    if (exist.length > 0) {\r\n      warnmessage(`The following fields are required: ${exist.join(\", \")}`);\r\n    } else {\r\n      const indxx = summa.length + 1;\r\n      const senddata = {\r\n        ...AddPriscribtion,\r\n        Location: userRecord?.location,\r\n        CapturedBy: userRecord?.username,\r\n        Booking_Id: IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n        priscriptionid: priscriptionid,\r\n        id: indxx, // Generate a unique id for the new row\r\n      };\r\n      setsumma((prevSumma) => [...prevSumma, senddata]);\r\n      setgetdatastate(!getdatastate);\r\n      handlecleardata();\r\n    }\r\n  };\r\n\r\n  console.log('summa...............................', summa)\r\n  const submitalldata = () => {\r\n    if (summa.length > 0) {\r\n      axios\r\n        .post(\r\n          `${UrlLink}DrugAdminstrations/insert_Drug_Administration_datas`,\r\n          summa\r\n        )\r\n        .then((response) => {\r\n          console.log(response);\r\n          setsumma([]);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    console.log(ItemName, '=====');\r\n    let fiddata = ItemName.find((p) => AddPriscribtion.MedicineCode === p.ItemCode && AddPriscribtion.MedicineName === p.ItemName)\r\n    console.log(fiddata, '------');\r\n    if (fiddata) {\r\n      axios.get(`http://localhost:8000/DrugAdminstrations/getDose_By_Itemname?selectedItemname=${fiddata.ItemCode}&location=${userRecord?.location}`)\r\n        .then((res) => {\r\n          console.log(res);\r\n          let data = res.data\r\n          setAddPriscribtion((prev) => ({\r\n            ...prev,\r\n            Dosage: data.dose,\r\n            Route: data.Pack_type\r\n\r\n          }))\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        })\r\n    } else {\r\n      setAddPriscribtion((prev) => ({\r\n        ...prev,\r\n        Dosage: '',\r\n        Route: ''\r\n\r\n      }))\r\n    }\r\n\r\n  }, [ItemName, AddPriscribtion.MedicineCode, AddPriscribtion.MedicineName])\r\n  return (\r\n    <>\r\n      <div className=\"Main_container_app\">\r\n        <div style={{ width: \"100%\", display: \"grid\", placeItems: \"center\" }}>\r\n          <ToggleButtonGroup\r\n            value={type}\r\n            exclusive\r\n            onChange={handleChange}\r\n            aria-label=\"Platform\"\r\n          >\r\n            <ToggleButton\r\n              value=\"Intake\"\r\n              style={{\r\n                height: \"30px\",\r\n                width: \"180px\",\r\n                backgroundColor:\r\n                  type === \"Intake\"\r\n                    ? \"var(--selectbackgroundcolor)\"\r\n                    : \"inherit\",\r\n              }}\r\n              className=\"togglebutton_container\"\r\n            >\r\n              Add Drugs\r\n            </ToggleButton>\r\n            <ToggleButton\r\n              value=\"Output\"\r\n              style={{\r\n                backgroundColor:\r\n                  type === \"Output\"\r\n                    ? \"var(--selectbackgroundcolor)\"\r\n                    : \"inherit\",\r\n                width: \"180px\",\r\n                height: \"30px\",\r\n              }}\r\n              className=\"togglebutton_container\"\r\n            >\r\n              View Drugs\r\n            </ToggleButton>\r\n          </ToggleButtonGroup>\r\n        </div>\r\n        <br />\r\n        {type === \"Intake\" && (\r\n          <>\r\n            <div className=\"RegisFormcon\">\r\n              {/* {lastprescribed.length > 0 && <div className=\"IP_grid\">\r\n                  <ThemeProvider theme={theme}>\r\n                    <div className=\"IP_grid_1\">\r\n                      <DataGrid\r\n                        rows={lastprescribed.slice(\r\n                          page * pageSize,\r\n                          (page + 1) * pageSize\r\n                        )} // Display only the current page's data\r\n                        columns={lastprescrib} // Use dynamic columns here\r\n                        pageSize={10}\r\n                        initialState={{\r\n                          pagination: {\r\n                            paginationModel: {\r\n                              pageSize: 10,\r\n                            },\r\n                          },\r\n                        }}\r\n                        pageSizeOptions={[10]}\r\n                        onPageChange={handlePageChange}\r\n                        hideFooterPagination\r\n                        hideFooterSelectedRowCount\r\n                        className=\"Ip_data_grid\"\r\n                      />\r\n                      {!showdown > 0 && !lastprescribed.length > 10 && (\r\n                        <div className=\"IP_grid_foot\">\r\n                          <button\r\n                            onClick={() =>\r\n                              setPage((prevPage) => Math.max(prevPage - 1, 0))\r\n                            }\r\n                            disabled={page === 0}\r\n                          >\r\n                            Previous\r\n                          </button>\r\n                          Page {page + 1} of {totalPages}\r\n                          <button\r\n                            onClick={() =>\r\n                              setPage((prevPage) =>\r\n                                Math.min(prevPage + 1, totalPages - 1)\r\n                              )\r\n                            }\r\n                            disabled={page === totalPages - 1}\r\n                          >\r\n                            Next\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </ThemeProvider>\r\n                  {showdown !== 0 && lastprescribed.length !== 0 && (\r\n                    <div className=\"IP_norecords\">\r\n                      <span>No Records Found</span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n} */}\r\n              <div className=\"RegisForm_1\">\r\n                <label>\r\n                  Department <span>:</span>\r\n                </label>\r\n\r\n                <select\r\n                  name=\"Department\"\r\n                  value={AddPriscribtion.Department}\r\n                  onChange={handleInputChange}\r\n                >\r\n                  <option value=\"\">Select</option>\r\n                  <option value=\"Primary\">Primary</option>\r\n                  <option value=\"Duty\">Duty</option>\r\n                  <option value=\"Special\">Special</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"RegisForm_1\">\r\n                <label>\r\n                  Specialization Name <span>:</span>\r\n                </label>\r\n\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"Specialization\"\r\n                  list=\"SpecializationList\"\r\n                  // readOnly={AddPriscribtion.Specialization==='Primary'}\r\n                  value={AddPriscribtion.Specialization}\r\n                  onChange={handleInputChange}\r\n                />\r\n                <datalist id=\"SpecializationList\">\r\n                  {[\"Gynecology\", \"Neurology\", \"Cardiology\"].map((row, index) => (\r\n                    <option key={index} value={row} />\r\n                  ))}\r\n                </datalist>\r\n              </div>\r\n              <div className=\"RegisForm_1\">\r\n                <label>\r\n                  Doctor Name <span>:</span>\r\n                </label>\r\n\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"DoctorName\"\r\n                  list=\"IpDoctorNameList\"\r\n                  readOnly={AddPriscribtion.Department === 'Primary'}\r\n                  value={AddPriscribtion.DoctorName}\r\n                  onChange={handleInputChange}\r\n                />\r\n                <datalist id=\"IpDoctorNameList\">\r\n                  {[\"Ram\", \"Ragu\", \"Raja\"].map((row, index) => (\r\n                    <option key={index} value={row} />\r\n                  ))}\r\n                </datalist>\r\n              </div>\r\n\r\n              <div className=\"RegisForm_1\">\r\n                <label>\r\n                  Generic Name <span>:</span>\r\n                </label>\r\n\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"GenericName\"\r\n                  list=\"IpGenericNameList\"\r\n                  value={AddPriscribtion.GenericName}\r\n                  onChange={handleInputChange}\r\n                />\r\n                <datalist id=\"IpGenericNameList\">\r\n                  {Array.isArray(GenericName) && GenericName.map((row, index) => (\r\n                    <option key={index} value={row.GenericName} />\r\n                  ))}\r\n                </datalist>\r\n              </div>\r\n              <div className=\"RegisForm_1\">\r\n                <label>\r\n                  Medicine Name <span>:</span>\r\n                </label>\r\n\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"MedicineName\"\r\n                  list=\"IpMedicineNameList\"\r\n                  value={AddPriscribtion.MedicineName}\r\n                  onChange={handleInputChange}\r\n                />\r\n                <datalist id=\"IpMedicineNameList\">\r\n                  {ItemName.map((row, index) => (\r\n                    <option key={index} value={row.ItemCode}>\r\n                      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                        {row.ItemName}\r\n                        {\",\"}\r\n                        <br />\r\n                        AvailableQuantity : {row.AvailableQuantity}\r\n                      </div>\r\n                      {/* {`${row.ItemName} , AvailableQuantity - ${row.AvailableQuantity}`} */}\r\n                    </option>\r\n                  ))}\r\n                </datalist>\r\n              </div>\r\n              <div className=\"RegisForm_1\">\r\n                <label>\r\n                  Dose <span>:</span>\r\n                </label>\r\n\r\n                <input\r\n                  name=\"Dosage\"\r\n                  type=\"text\"\r\n                  readOnly\r\n                  value={AddPriscribtion.Dosage}\r\n                  onChange={handleInputChange}\r\n                />\r\n\r\n              </div>\r\n              <div className=\"RegisForm_1\">\r\n                <label>\r\n                  Route <span>:</span>\r\n                </label>\r\n\r\n                <input\r\n                  name=\"Route\"\r\n                  type=\"text\"\r\n                  readOnly\r\n                  value={AddPriscribtion.Route}\r\n                  onChange={handleInputChange}\r\n                />\r\n\r\n\r\n              </div>\r\n              <div className=\"RegisForm_1\">\r\n                <label>\r\n                  Freq Method <span>:</span>\r\n                </label>\r\n\r\n                <select\r\n                  name=\"FrequencyMethod\"\r\n                  value={AddPriscribtion.FrequencyMethod}\r\n                  onChange={handleInputChange}\r\n                >\r\n                  <option value=\"Regular\">Regular</option>\r\n                  <option value=\"SOS\">SOS</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"RegisForm_1\">\r\n                <label>\r\n                  Frequency Type <span>:</span>\r\n                </label>\r\n\r\n                <select\r\n                  name=\"FrequencyType\"\r\n                  value={AddPriscribtion.FrequencyType}\r\n                  disabled={AddPriscribtion.FrequencyMethod === \"SOS\"}\r\n                  onChange={handleInputChange}\r\n                >\r\n                  <option value=\"\">Select</option>\r\n                  <option value=\"BeforeFood\">BeforeFood</option>\r\n                  <option value=\"AfterFood\">AfterFood</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"RegisForm_1\">\r\n                <label>\r\n                  Frequency <span>:</span>\r\n                </label>\r\n\r\n                <select\r\n                  name=\"Frequency\"\r\n                  value={AddPriscribtion.Frequency}\r\n                  disabled={AddPriscribtion.FrequencyMethod === \"SOS\"}\r\n                  onChange={handleInputChange}\r\n                >\r\n                  <option value=\"\">Select</option>\r\n                  {selectedTimes\r\n                    .filter(\r\n                      (p) => p.FrequencyType === AddPriscribtion.FrequencyType\r\n                    )\r\n                    .map((fields, index) => (\r\n                      <option value={fields.Frequency} key={index}>\r\n                        {fields.Frequency}\r\n                      </option>\r\n                    ))}\r\n                </select>\r\n              </div>\r\n              <div className=\"RegisForm_1\">\r\n                <label>\r\n                  Frequency Time <span>:</span>\r\n                </label>\r\n\r\n                <input\r\n                  name=\"FrequencyTime\"\r\n                  type=\"text\"\r\n                  readOnly\r\n                  disabled={AddPriscribtion.FrequencyMethod === \"SOS\"}\r\n                  value={AddPriscribtion.FrequencyTime}\r\n                  onChange={handleInputChange}\r\n                />\r\n              </div>\r\n              <div className=\"RegisForm_1\">\r\n                <label>\r\n                  Duration <span>:</span>\r\n                </label>\r\n\r\n                <input\r\n                  name=\"Duration\"\r\n                  type=\"number\"\r\n                  onKeyDown={blockInvalidChar}\r\n                  style={{ width: \"20px\" }}\r\n                  disabled={AddPriscribtion.FrequencyMethod === \"SOS\"}\r\n                  value={AddPriscribtion.Duration}\r\n                  onChange={handleInputChange}\r\n                />\r\n                <select\r\n                  name=\"DurationType\"\r\n                  style={{ width: \"110px\" }}\r\n                  value={AddPriscribtion.DurationType}\r\n                  onChange={handleInputChange}\r\n                  disabled={AddPriscribtion.FrequencyMethod === \"SOS\"}\r\n                >\r\n                  <option value=\"days\">days</option>\r\n                  <option value=\"Weeks\">weeks</option>\r\n                  <option value=\"Months\">Months</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"RegisForm_1\">\r\n                <label>\r\n                  Adminis Dose <span>:</span>\r\n                </label>\r\n\r\n                <input\r\n                  name=\"AdminisDose\"\r\n                  type=\"number\"\r\n                  onKeyDown={blockInvalidChar}\r\n                  value={AddPriscribtion.AdminisDose}\r\n                  onChange={handleInputChange}\r\n                />\r\n              </div>\r\n              <div className=\"RegisForm_1\">\r\n                <label>\r\n                  Quantity <span>:</span>\r\n                </label>\r\n\r\n                <input\r\n                  name=\"Quantity\"\r\n                  type=\"number\"\r\n                  onKeyDown={blockInvalidChar}\r\n                  value={AddPriscribtion.Quantity}\r\n                  readOnly={AddPriscribtion.FrequencyMethod === \"Regular\"}\r\n                  onChange={handleInputChange}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"RegisForm_1\">\r\n                <label>\r\n                  Date <span>:</span>\r\n                </label>\r\n\r\n                <input\r\n                  name=\"Date\"\r\n                  type=\"date\"\r\n                  value={AddPriscribtion.Date}\r\n                  onChange={handleInputChange}\r\n                />\r\n              </div>\r\n              <div className=\"RegisForm_1\">\r\n                <label>\r\n                  Time <span>:</span>\r\n                </label>\r\n\r\n                <input\r\n                  name=\"Time\"\r\n                  type=\"time\"\r\n                  value={AddPriscribtion.Time}\r\n                  onChange={handleInputChange}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"RegisForm_1\">\r\n                <label>\r\n                  On Behalf Of<span>:</span>\r\n                </label>\r\n                <input\r\n                  name=\"Onbehalf\"\r\n                  type=\"checkbox\"\r\n                  checked={AddPriscribtion.Onbehalf === 'Yes'} // Check if value is \"yes\"\r\n                  onChange={handleInputChange}\r\n                />\r\n              </div>\r\n\r\n              {AddPriscribtion.Onbehalf === 'Yes' && (\r\n                <div className=\"RegisForm_1\">\r\n                  <label>\r\n                    Prescribed By <span>:</span>\r\n                  </label>\r\n\r\n                  <input\r\n                    name=\"Prescribedby\"\r\n                    type=\"text\"\r\n                    //  readOnly\r\n                    disabled={AddPriscribtion.Prescribedby === \"SOS\"}\r\n                    value={AddPriscribtion.Prescribedby}\r\n                    onChange={handleInputChange}\r\n                  />\r\n                </div>\r\n              )}\r\n              <div className=\"RegisForm_1\">\r\n                <label>\r\n                  Instructions <span>:</span>\r\n                </label>\r\n\r\n                <textarea\r\n                  name=\"Instruction\"\r\n                  value={AddPriscribtion.Instruction}\r\n                  onChange={handleInputChange}\r\n                />\r\n              </div>\r\n            </div>\r\n            <br />\r\n\r\n            <div\r\n              style={{ display: \"grid\", placeItems: \"center\", width: \"100%\" }}\r\n            >\r\n              <button className=\"btn-add\" onClick={isEdit ? handleupdate : handlesubmitdata}>\r\n                {isEdit ? 'Update' : 'Add'}\r\n              </button>\r\n            </div>\r\n            {summa.length > 0 &&\r\n              <>\r\n                <ReactGrid columns={dynamicColumns} RowData={summa} />\r\n                <button className=\"btn-add\" onClick={submitalldata}>\r\n                  Submit\r\n                </button>\r\n              </>\r\n            }\r\n\r\n          </>\r\n        )}\r\n\r\n        {type === \"Output\" && (\r\n\r\n\r\n          <ReactGrid columns={dynamicColumns1()} RowData={summa1?.medicinedata} />\r\n\r\n        )}\r\n      </div>\r\n\r\n      <ToastContainer />\r\n      <CancelDrugDialog\r\n        open={OpenDialog}\r\n        onClose={() => setOpenDialog(false)}\r\n        onConfirm={handleCancelAppointment}\r\n        setcancelsenddata={setcancelsenddata}\r\n        cancelsenddata={cancelsenddata}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Prescription;\r\n\r\n\r\n\r\n\r\n"],"names":["CancelDrugDialog","_ref","open","onClose","onConfirm","cancelsenddata","setcancelsenddata","console","log","_jsxs","Dialog","children","_jsx","DialogTitle","DialogContent","TextField","label","multiline","rows","variant","fullWidth","value","Reason","onChange","e","prev","target","DialogActions","Button","onClick","handleClose","color","handleConfirm","Prescription","userRecord","useSelector","state","_state$userRecord","UserData","IP_DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","GenericName","setgenericName","useState","getdataa","setgetdataa","ItemName","setItemName","isEdit","setisEdit","OpenDialog","setOpenDialog","editid","seteditid","priscriptionid","setpriscriptionid","IpNurseQueSelectedRow","_state$InPatients","InPatients","lastprescribed","setlastprescribed","page","setPage","page1","setPage1","summa","setsumma","summa1","setsumma1","UrlLink","length","medicinedata","Math","ceil","_state$userRecord2","blockInvalidChar","includes","key","preventDefault","type","setType","AddPriscribtion","setAddPriscribtion","Department","DoctorName","MedicineCode","MedicineName","Dosage","Route","FrequencyMethod","FrequencyType","Frequency","FrequencyTime","Duration","DurationType","AdminisDose","Quantity","Date","Time","Instruction","Specialization","Onbehalf","Prescribedby","useEffect","axios","get","concat","then","response","data","Array","isArray","catch","error","location","selectedGenericName","selectedTimes","setSelectedTimes","frequencytypeval","find","p","getdatastate","setgetdatastate","warnmessage","warnmsg","toast","warn","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","style","marginTop","handleInputChange","name","checked","detail","ItemCode","Dose","Pack_type","PrimaryDoctor","sum","split","reduce","acc","val","parseInt","durationdata","quantityData","dattt","rrrr","qnt","dosageSplit","dosageValue","parseFloat","dosageUnit","handlecleardata","map","index","id","Frequency_Id","nextInvoiceCode","RegistrationId","freqdata","Set","flatMap","FrequencyIssued","r","time","numTime","convertToAMPM","sort","a","b","aNum","aPeriod","bNum","bPeriod","localeCompare","frequencyTime","indx","Booking_Id","now","formattedTime","format","newdate","formatLabel","test","replace","str","toUpperCase","Object","keys","filter","labelname","formattedLabel","labelWidth","getTextWidth","field","headerName","width","valueGetter","params","row","text","dummyElement","document","createElement","textContent","visibility","whiteSpace","body","appendChild","offsetWidth","removeChild","dynamicColumns","renderCell","_Fragment","className","handleChangeedit","EditIcon","fiddata","res","dose","err","display","placeItems","ToggleButtonGroup","exclusive","event","ToggleButton","height","backgroundColor","list","readOnly","flexDirection","AvailableQuantity","disabled","fields","onKeyDown","handleupdate","requiredfields","exist","join","findIndex","updatedRow","handlesubmitdata","indxx","senddata","Location","CapturedBy","username","prevSumma","ReactGrid","columns","RowData","submitalldata","post","dynamicColumns1","dynamicFields","newwtime","ttt","med","statusMap","statuses","some","f","Status","dataone","rr","IssuedBy","IssuedDate","Completed_Date","IssuedTime","Completed_Time","Remarks","Completed_Remarks","status","entries","Tooltip","title","padding","fontSize","ToastContainer","handleCancelAppointment","existing","alert","confirmation","window","confirm"],"sourceRoot":""}