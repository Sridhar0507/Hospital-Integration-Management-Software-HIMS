{"version":3,"file":"static/js/4188.9d2690e9.chunk.js","mappings":"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","sources":["IP_Workbench/Doctor/IP_Doc_DAMA.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ReactGrid from '../../OtherComponent/ReactGrid/ReactGrid';\r\nimport axios from 'axios';\r\nimport ToastAlert from '../../OtherComponent/ToastContainer/ToastAlert';\r\nimport { IconButton } from '@mui/material';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\n\r\n\r\nconst IP_Doc_DAMA = () => {\r\n    const dispatch = useDispatch();\r\n    const UrlLink = useSelector(state => state.userRecord?.UrlLink);\r\n    const toast = useSelector(state => state.userRecord?.toast);\r\n    const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n    console.log(IP_DoctorWorkbenchNavigation,'IP_DoctorWorkbenchNavigation');\r\n\r\n    const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n\r\n    const Reasons = \r\n    [\r\n        \"Brought Dead\",\r\n        \"Higher Center For Further Investigation & Treatment\",\r\n        \"Non Availability Of Consultant\",\r\n        \"Non Availability Of ICU Bed\",\r\n        \"Toxic Patients Or Relatives\",\r\n        \"Drunk Patients\",\r\n        \"Relatives Not Available(Unknown Patients)\",\r\n        \"Transferred to COVID Center\",\r\n        \"Absconded\",\r\n        \"Dama Npn Affordable\",\r\n        \"Dama Relatives Not Wish\",\r\n        \"Dama Insurance Or Cashless\"\r\n        \r\n    ];\r\n\r\n    const [Dama, setDama] = useState({\r\n        Reasons: \"\",\r\n        Date: \"\",\r\n        Time: \"\",\r\n        Remarks: \"\",\r\n    });\r\n\r\n    const [gridData, setGridData] = useState([])\r\n    \r\n    const [IsGetData, setIsGetData] = useState(false)\r\n    console.log(gridData);\r\n\r\n    const [IsViewMode, setIsViewMode] = useState(false)\r\n  \r\n    const DamaColumns = [\r\n        {\r\n            key: 'id',\r\n            name: 'S.No',\r\n            frozen: true\r\n        },\r\n        { key: 'PrimaryDoctorName', name: 'Doctor Name',frozen: true },\r\n      \r\n        {\r\n            key: 'Date',\r\n            name: 'Date',\r\n            frozen: true\r\n        },\r\n        {\r\n            key: 'Time',\r\n            name: 'Time',\r\n            frozen: true\r\n        },\r\n       \r\n        {\r\n            key: 'Type',\r\n            name: 'Type',\r\n        },\r\n        \r\n        {\r\n            key: 'Remarks',\r\n            name: 'Remarks',\r\n        },\r\n       \r\n       \r\n        {\r\n            key: 'view',\r\n            frozen: true,\r\n            name: 'View',\r\n            renderCell: (params) => (\r\n              <IconButton onClick={() => handleView(params.row)}>\r\n                <VisibilityIcon />\r\n              </IconButton>\r\n            ),\r\n          },\r\n        \r\n    ]\r\n\r\n    const handleView = (data) => {\r\n        setDama({\r\n            Reasons: data.Reasons || '',\r\n            Date: data.Date || '',\r\n            Time: data.Time || '',\r\n            Remarks: data.Remarks || '',\r\n        });\r\n        setIsViewMode(true);\r\n\r\n    };\r\n\r\n    const handleClear = () => {\r\n        setDama({\r\n            Reasons: \"\",\r\n            Date: \"\",\r\n            Time: \"\",\r\n            Remarks: \"\",\r\n        });\r\n        setIsViewMode(false);\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(`${UrlLink}Ip_Workbench/IP_Dama_Details_Link`,{params:{RegistrationId:IP_DoctorWorkbenchNavigation?.RegistrationId,Type: 'Nurse'}})\r\n            .then((res) => {\r\n                const ress = res.data\r\n                console.log(ress)\r\n                setGridData(ress)\r\n    \r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            })\r\n    }, [UrlLink,IP_DoctorWorkbenchNavigation,IsGetData])\r\n    \r\n    const handleDamaChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setDama(prev => ({\r\n          ...prev,\r\n          [name]: value\r\n        }));\r\n    };\r\n\r\n\r\n    const handleSubmit = () => {\r\n        \r\n        const senddata={\r\n            ...Dama,\r\n            RegistrationId:IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n            Createdby:userRecord?.username,\r\n            Type:'Doctor'\r\n            \r\n        }\r\n\r\n        console.log(senddata,'senddata');\r\n        \r\n        axios.post(`${UrlLink}Ip_Workbench/IP_Dama_Details_Link`, senddata)\r\n        .then((res) => {\r\n            const [type, message] = [Object.keys(res.data)[0], Object.values(res.data)[0]];\r\n            dispatch({ type: 'toast', value: { message, type } });\r\n            setIsGetData(prev => !prev);\r\n            handleClear();\r\n            })\r\n            .catch((err) => console.log(err));\r\n        \r\n    }\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"Main_container_app\">\r\n        <div className=\"form-section5\">\r\n          <div className=\"common_center_tag\">\r\n          </div>\r\n          <br />\r\n\r\n          <div className=\"RegisFormcon_1\">\r\n            {[\r\n              { label: \"Reasons\", id: \"Reasons\", type: \"select\" },\r\n              { label: \"Date\", id: \"Date\", type: \"date\" },\r\n              { label: \"Time\", id: \"Time\", type: \"time\" },             \r\n              { label: \"Remarks\", id: \"Remarks\", type: \"textarea\" },\r\n            ].map((input) => (\r\n              <div className=\"RegisForm_1\" key={input.id}>\r\n                <label htmlFor={input.id}>\r\n                  {input.label} <span>:</span>\r\n                </label>\r\n                {input.type === \"textarea\" ? (\r\n                  <textarea\r\n                    id={input.id}\r\n                    name={input.id}\r\n                    onChange={handleDamaChange}\r\n                    value={Dama[input.id]}\r\n                    required\r\n                    readOnly={IsViewMode}\r\n\r\n                  />\r\n                ) : input.type === \"select\" ? (\r\n                    <select\r\n                        id={input.id}\r\n                        name={input.id}\r\n                        onChange={handleDamaChange}\r\n                        value={Dama[input.id]}\r\n                        required\r\n                        readOnly={IsViewMode}\r\n                    >\r\n                        <option value=\"\">Select Reasons</option>\r\n                        {Reasons.map((reason, index) => (\r\n                        <option key={index} value={reason}>\r\n                            {reason}\r\n                        </option>\r\n                        ))}\r\n                    </select>\r\n                ):(\r\n                  <input\r\n                    type={input.type}\r\n                    id={input.id}\r\n                    name={input.id}\r\n                    onChange={handleDamaChange}\r\n                    value={Dama[input.id]}\r\n                    required\r\n                    readOnly={IsViewMode}\r\n\r\n                  />\r\n                )}\r\n              </div>\r\n            ))}\r\n\r\n           \r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"Main_container_Btn\">\r\n                \r\n            {IsViewMode && (\r\n                <button onClick={handleClear}>Clear</button>\r\n            )}\r\n            {!IsViewMode && (\r\n                <button onClick={handleSubmit}>Submit</button>\r\n            )}\r\n        </div>\r\n\r\n        {gridData.length >= 0 &&\r\n            <ReactGrid columns={DamaColumns} RowData={gridData} />\r\n        }\r\n\r\n        <ToastAlert Message={toast.message} Type={toast.type} />\r\n\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default IP_Doc_DAMA;"],"names":["IP_Doc_DAMA","dispatch","useDispatch","UrlLink","useSelector","state","_state$userRecord","userRecord","toast","_state$userRecord2","IP_DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","console","log","_state$userRecord3","UserData","Reasons","Dama","setDama","useState","Date","Time","Remarks","gridData","setGridData","IsGetData","setIsGetData","IsViewMode","setIsViewMode","DamaColumns","key","name","frozen","renderCell","params","_jsx","IconButton","onClick","handleView","row","children","VisibilityIcon","data","handleClear","useEffect","axios","get","concat","RegistrationId","Type","then","res","ress","catch","err","handleDamaChange","e","value","target","prev","_Fragment","_jsxs","className","label","id","type","map","input","htmlFor","onChange","required","readOnly","reason","index","handleSubmit","senddata","Createdby","username","post","message","Object","keys","values","length","ReactGrid","columns","RowData","ToastAlert","Message"],"sourceRoot":""}