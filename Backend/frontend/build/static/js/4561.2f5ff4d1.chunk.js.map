{"version":3,"file":"static/js/4561.2f5ff4d1.chunk.js","mappings":"qNAUA,MA+TA,EA/T2BA,KACvB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,KAAYC,IAAK,IAAAC,EAAA,OAAoB,QAApBA,EAAID,EAAME,kBAAU,IAAAD,OAAA,EAAhBA,EAAkBH,OAAO,IACxDK,GAAQJ,EAAAA,EAAAA,KAAYC,IAAK,IAAAI,EAAA,OAAoB,QAApBA,EAAIJ,EAAME,kBAAU,IAAAE,OAAA,EAAhBA,EAAkBD,KAAK,IACpDE,GAA+BN,EAAAA,EAAAA,KAAYC,IAAK,IAAAM,EAAA,OAAqB,QAArBA,EAAIN,EAAMO,mBAAW,IAAAD,OAAA,EAAjBA,EAAmBD,4BAA4B,IACzGG,QAAQC,IAAIJ,EAA6B,gCAEzC,MAAMH,GAAaH,EAAAA,EAAAA,KAAaC,IAAK,IAAAU,EAAA,OAAqB,QAArBA,EAAKV,EAAME,kBAAU,IAAAQ,OAAA,EAAhBA,EAAkBC,QAAQ,KAgB7DC,EAAiBC,IAAsBC,EAAAA,EAAAA,UAAS,CACnDC,OAAQ,GACRC,iBAAkB,GAClBC,aAAc,GACdC,aAAc,GACdC,oBAAqB,GACrBC,IAAK,GACLC,QAAS,MAKNC,EAAUC,IAAeT,EAAAA,EAAAA,UAAS,KAClCU,EAAWC,IAAgBX,EAAAA,EAAAA,WAAS,IAEpCY,EAAYC,IAAiBb,EAAAA,EAAAA,WAAS,GAIvCc,EAAyB,CAC3B,CACIC,IAAK,KACLC,KAAM,OACNC,QAAQ,GAEZ,CAAEF,IAAK,oBAAqBC,KAAM,cAAcC,QAAQ,GAExD,CACIF,IAAK,WACLC,KAAM,OACNC,QAAQ,GAEZ,CACIF,IAAK,WACLC,KAAM,OACNC,QAAQ,GAKZ,CACIF,IAAK,OACLE,QAAQ,EACRD,KAAM,OACNE,WAAaC,IACXC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAASA,IAAMC,EAAWJ,EAAOK,KAAKC,UAChDL,EAAAA,EAAAA,KAACM,EAAAA,EAAc,OAIvB,CAAEX,IAAK,SAAUC,KAAM,UACvB,CAAED,IAAK,mBAAoBC,KAAM,qBACjC,CAAED,IAAK,eAAgBC,KAAM,iBAC7B,CAAED,IAAK,eAAgBC,KAAM,iBAC7B,CAAED,IAAK,sBAAuBC,KAAM,yBACpC,CAAED,IAAK,MAAOC,KAAM,OACpB,CAAED,IAAK,UAAWC,KAAM,YAMrBO,EAAcI,IACjB5B,EAAmB,CACfG,iBAAkByB,EAAKzB,kBAAoB,GAC3CC,aAAcwB,EAAKxB,cAAgB,GACnCC,aAAcuB,EAAKvB,cAAgB,GACnCC,oBAAqBsB,EAAKtB,qBAAuB,GACjDJ,OAAQ0B,EAAK1B,QAAU,GACvBK,IAAKqB,EAAKrB,KAAO,GACjBC,QAASoB,EAAKpB,SAAW,KAG7BM,GAAc,EAAK,EAKnBe,EAAcA,KAClB7B,EAAmB,CACfG,iBAAkB,GAClBC,aAAc,GACdC,aAAc,GACdC,oBAAqB,GACrBJ,OAAQ,GACRK,IAAK,GACLC,QAAS,KAGbM,GAAc,EAAM,GAKpBgB,EAAAA,EAAAA,YAAU,KACNC,EAAAA,EAAMC,IAAI,GAADC,OAAIhD,EAAO,gDAA+C,CAACmC,OAAO,CAACc,eAA2C,OAA5B1C,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8B0C,eAAeC,KAAM,WACzIC,MAAMC,IACH,MAAMC,EAAOD,EAAIT,KACjBjC,QAAQC,IAAI0C,GACZ5B,EAAY4B,EAAK,IAGpBC,OAAOC,IACJ7C,QAAQC,IAAI4C,EAAI,GAClB,GACL,CAACvD,EAAQO,EAA6BmB,IAKzC,MAAM8B,EAAkBC,IACtB,MAAM,KAAEzB,EAAI,MAAE0B,GAAUD,EAAEE,OACpBC,EAAiBF,EAAMG,OAC7B9C,GAAoB+C,IAAY,IACzBA,EACH,CAAC9B,GAAO4B,KACT,EA8BP,OACIG,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAvB,SAAA,EACQL,EAAAA,EAAAA,KAAA,OAAK6B,UAAU,iBAAgBxB,SAEvByB,OAAOC,KAAKrD,GAAiBsD,KAAI,CAACC,EAAGC,KACjClC,EAAAA,EAAAA,KAAA,OAAK6B,UAAU,cAAaxB,SAEjB,qBAAN4B,GACGN,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAvB,SAAA,EACIsB,EAAAA,EAAAA,MAAA,SAAOQ,QAAO,GAAAvB,OAAKqB,EAAC,KAAArB,OAAIsB,GAAQ7B,SAAA,CAAC,qBAAiBL,EAAAA,EAAAA,KAAA,QAAAK,SAAM,UACxDsB,EAAAA,EAAAA,MAAA,UACIS,GAAE,GAAAxB,OAAKqB,EAAC,KAAArB,OAAIsB,GACZtC,KAAMqC,EACNX,MAAO5C,EAAgBuD,GACvBI,SAAUjB,EACVkB,SAAU9C,EAAWa,SAAA,EAErBL,EAAAA,EAAAA,KAAA,UAAQsB,MAAM,GAAEjB,SAAC,YACjBL,EAAAA,EAAAA,KAAA,UAAQsB,MAAM,WAAUjB,SAAC,cACzBL,EAAAA,EAAAA,KAAA,UAAQsB,MAAM,UAASjB,SAAC,kBAG1B,iBAAN4B,GACAN,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAvB,SAAA,EACIsB,EAAAA,EAAAA,MAAA,SAAOQ,QAAO,GAAAvB,OAAKqB,EAAC,KAAArB,OAAIsB,GAAQ7B,SAAA,CAAC,iBAAaL,EAAAA,EAAAA,KAAA,QAAAK,SAAM,UACpDsB,EAAAA,EAAAA,MAAA,UACIS,GAAE,GAAAxB,OAAKqB,EAAC,KAAArB,OAAIsB,GACZtC,KAAMqC,EACNX,MAAO5C,EAAgBuD,GACvBI,SAAUjB,EACVkB,SAAU9C,EAAWa,SAAA,EAErBL,EAAAA,EAAAA,KAAA,UAAQsB,MAAM,GAAEjB,SAAC,YACjBL,EAAAA,EAAAA,KAAA,UAAQsB,MAAM,QAAOjB,SAAC,WACtBL,EAAAA,EAAAA,KAAA,UAAQsB,MAAM,SAAQjB,SAAC,YACvBL,EAAAA,EAAAA,KAAA,UAAQsB,MAAM,eAAcjB,SAAC,kBAC7BL,EAAAA,EAAAA,KAAA,UAAQsB,MAAM,YAAWjB,SAAC,oBAG5B,iBAAN4B,GACAN,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAvB,SAAA,EACIsB,EAAAA,EAAAA,MAAA,SAAOQ,QAAO,GAAAvB,OAAKqB,EAAC,KAAArB,OAAIsB,GAAQ7B,SAAA,CAAC,iBAAaL,EAAAA,EAAAA,KAAA,QAAAK,SAAM,UACpDsB,EAAAA,EAAAA,MAAA,UACIS,GAAE,GAAAxB,OAAKqB,EAAC,KAAArB,OAAIsB,GACZtC,KAAMqC,EACNX,MAAO5C,EAAgBuD,GACvBI,SAAUjB,EACVkB,SAAU9C,EAAWa,SAAA,EAErBL,EAAAA,EAAAA,KAAA,UAAQsB,MAAM,GAAEjB,SAAC,YACjBL,EAAAA,EAAAA,KAAA,UAAQsB,MAAM,UAASjB,SAAC,aACxBL,EAAAA,EAAAA,KAAA,UAAQsB,MAAM,gBAAejB,SAAC,mBAC9BL,EAAAA,EAAAA,KAAA,UAAQsB,MAAM,WAAUjB,SAAC,mBAG3B,WAAN4B,GACAN,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAvB,SAAA,EACIsB,EAAAA,EAAAA,MAAA,SAAOQ,QAAO,GAAAvB,OAAKqB,EAAC,KAAArB,OAAIsB,GAAQ7B,SAAA,CAAC,UAAML,EAAAA,EAAAA,KAAA,QAAAK,SAAM,UAC7CsB,EAAAA,EAAAA,MAAA,UACIS,GAAE,GAAAxB,OAAKqB,EAAC,KAAArB,OAAIsB,GACZtC,KAAMqC,EACNX,MAAO5C,EAAgBuD,GACvBI,SAAUjB,EACVkB,SAAU9C,EAAWa,SAAA,EAErBL,EAAAA,EAAAA,KAAA,UAAQsB,MAAM,GAAEjB,SAAC,YACjBL,EAAAA,EAAAA,KAAA,UAAQsB,MAAM,WAAUjB,SAAC,cACzBL,EAAAA,EAAAA,KAAA,UAAQsB,MAAM,cAAajB,SAAC,iBAC5BL,EAAAA,EAAAA,KAAA,UAAQsB,MAAM,UAASjB,SAAC,kBAGL,aAA3B3B,EAAgBG,QAA+B,QAANoD,GACzCN,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAvB,SAAA,EACIsB,EAAAA,EAAAA,MAAA,SAAOQ,QAAO,GAAAvB,OAAKqB,EAAC,KAAArB,OAAIsB,GAAQ7B,SAAA,CAAC,QAAIL,EAAAA,EAAAA,KAAA,QAAAK,SAAM,UAC3CsB,EAAAA,EAAAA,MAAA,OAAKE,UAAU,2BAA0BxB,SAAA,EACrCL,EAAAA,EAAAA,KAAA,SACIuC,KAAK,QACLH,GAAG,UACHxC,KAAK,MACL0B,MAAM,MACNkB,QAAiC,QAAxB9D,EAAgBQ,IACzBmD,SAAUjB,EACVkB,SAAU9C,KAEdQ,EAAAA,EAAAA,KAAA,SAAOmC,QAAQ,UAAS9B,SAAC,SAEzBL,EAAAA,EAAAA,KAAA,SACIuC,KAAK,QACLH,GAAG,SACHxC,KAAK,MACL0B,MAAM,KACNkB,QAAiC,OAAxB9D,EAAgBQ,IACzBmD,SAAUjB,EACVkB,SAAU9C,KAEdQ,EAAAA,EAAAA,KAAA,SAAOmC,QAAQ,SAAQ9B,SAAC,aAG1B,YAAN4B,GACAN,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAvB,SAAA,EACIsB,EAAAA,EAAAA,MAAA,SAAOQ,QAAO,GAAAvB,OAAKqB,EAAC,KAAArB,OAAIsB,GAAQ7B,SAAA,CAAC,YAAQL,EAAAA,EAAAA,KAAA,QAAAK,SAAM,UAC/CL,EAAAA,EAAAA,KAAA,YACIoC,GAAE,GAAAxB,OAAKqB,EAAC,KAAArB,OAAIsB,GACZtC,KAAMqC,EACNX,MAAO5C,EAAgBuD,GACvBI,SAAUjB,EACVkB,SAAU9C,EACViD,YAAY,+BAGd,wBAANR,GACAN,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAvB,SAAA,EACIsB,EAAAA,EAAAA,MAAA,SAAOQ,QAAO,GAAAvB,OAAKqB,EAAC,KAAArB,OAAIsB,GAAQ7B,SAAA,CAAC,yBAAqBL,EAAAA,EAAAA,KAAA,QAAAK,SAAM,UAC5DL,EAAAA,EAAAA,KAAA,SACIoC,GAAE,GAAAxB,OAAKqB,EAAC,KAAArB,OAAIsB,GACZtC,KAAMqC,EACNK,SAAU9C,EACV8B,MAAO5C,EAAgBuD,GACvBI,SAAUjB,OAGlB,MApH0Ba,QA4H9CN,EAAAA,EAAAA,MAAA,OAAKE,UAAU,qBAAoBxB,SAAA,CAE9Bb,IACGQ,EAAAA,EAAAA,KAAA,UAAQE,QAASM,EAAYH,SAAC,WAEhCb,IACEQ,EAAAA,EAAAA,KAAA,UAAQE,QAjKPwC,KAEjBpE,QAAQC,IAAgC,OAA5BJ,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8B0C,gBAE1C,MAAM8B,EAAS,IACRjE,EACHmC,eAA2C,OAA5B1C,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8B0C,eAC7C+B,UAAoB,OAAV5E,QAAU,IAAVA,OAAU,EAAVA,EAAY6E,UAK1BvE,QAAQC,IAAIoE,EAAS,YAErBjC,EAAAA,EAAMoC,KAAK,GAADlC,OAAIhD,EAAO,gDAAgD+E,GACpE5B,MAAMC,IACH,MAAOuB,EAAMQ,GAAW,CAACjB,OAAOC,KAAKf,EAAIT,MAAM,GAAIuB,OAAOkB,OAAOhC,EAAIT,MAAM,IAC3E7C,EAAS,CAAE6E,KAAM,QAASjB,MAAO,CAAEyB,UAASR,UAC5ChD,GAAa0D,IAASA,IACtBzC,GAAa,IAEhBU,OAAOC,GAAQ7C,QAAQC,IAAI4C,IAAK,EA4Iad,SAAC,cAItCjB,EAAS8D,QAAU,IAChBlD,EAAAA,EAAAA,KAACmD,EAAAA,EAAS,CAACC,QAAS1D,EAAwB2D,QAASjE,KAG7DY,EAAAA,EAAAA,KAACsD,EAAAA,EAAU,CAACC,QAAStF,EAAM8E,QAASjC,KAAM7C,EAAMsE,SAEjD,C","sources":["IP_Workbench/Nurse/IPM/IP_UrinaryCathetor.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ReactGrid from '../../../OtherComponent/ReactGrid/ReactGrid';\r\nimport axios from 'axios';\r\nimport ToastAlert from '../../../OtherComponent/ToastContainer/ToastAlert';\r\nimport { IconButton } from '@mui/material';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\n\r\n\r\n\r\nconst IP_UrinaryCathetor = () => {\r\n    const dispatch = useDispatch();\r\n    const UrlLink = useSelector(state => state.userRecord?.UrlLink);\r\n    const toast = useSelector(state => state.userRecord?.toast);\r\n    const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n    console.log(IP_DoctorWorkbenchNavigation,'IP_DoctorWorkbenchNavigation');\r\n\r\n    const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n\r\n    \r\n    const formatLabel = (label) => {\r\n\r\n        if (/[a-z]/.test(label) && /[A-Z]/.test(label) && !/\\d/.test(label)) {\r\n            return label\r\n                .replace(/([a-z])([A-Z])/g, \"$1 $2\")\r\n                .replace(/^./, (str) => str.toUpperCase());\r\n        } else {\r\n            return label;\r\n        }\r\n    };\r\n\r\n   \r\n\r\n    const [UrinaryCathetor, setUrinaryCathetor] = useState({\r\n        Status: \"\",  \r\n        CathetorFunction: \"\",\r\n        UrineQuality: \"\",\r\n        CatheterSite: \"\",  \r\n        UrinaryCatheterSize: \"\", \r\n        Uti: \"\",  \r\n        Remarks: \"\",\r\n\r\n    });\r\n\r\n\r\n    const [gridData, setGridData] = useState([])\r\n    const [IsGetData, setIsGetData] = useState(false)\r\n\r\n    const [IsViewMode, setIsViewMode] = useState(false)\r\n  \r\n    \r\n      \r\n    const UrinaryCathetorColumns = [\r\n        {\r\n            key: 'id',\r\n            name: 'S.No',\r\n            frozen: true\r\n        },\r\n        { key: 'PrimaryDoctorName', name: 'Doctor Name',frozen: true },\r\n      \r\n        {\r\n            key: 'CurrDate',\r\n            name: 'Date',\r\n            frozen: true\r\n        },\r\n        {\r\n            key: 'CurrTime',\r\n            name: 'Time',\r\n            frozen: true\r\n        },\r\n       \r\n       \r\n       \r\n        {\r\n            key: 'view',\r\n            frozen: true,\r\n            name: 'View',\r\n            renderCell: (params) => (\r\n              <IconButton onClick={() => handleView(params.row)}>\r\n                <VisibilityIcon />\r\n              </IconButton>\r\n            ),\r\n          },\r\n        { key: 'Status', name: 'Status' },\r\n        { key: 'CathetorFunction', name: 'Cathetor Function' },\r\n        { key: 'UrineQuality', name: 'Urine Quality'},\r\n        { key: 'CatheterSite', name: 'Catheter Site'},\r\n        { key: 'UrinaryCatheterSize', name: 'Urinary Catheter Size'},\r\n        { key: 'Uti', name: 'Uti'},\r\n        { key: 'Remarks', name: 'Remarks'},\r\n\r\n        \r\n    ]\r\n\r\n     // Handle setting the form data when viewing\r\n     const handleView = (data) => {\r\n        setUrinaryCathetor({\r\n            CathetorFunction: data.CathetorFunction || '',\r\n            UrineQuality: data.UrineQuality || '',\r\n            CatheterSite: data.CatheterSite || '',\r\n            UrinaryCatheterSize: data.UrinaryCatheterSize || '',\r\n            Status: data.Status || '',\r\n            Uti: data.Uti || '',\r\n            Remarks: data.Remarks || '',\r\n            \r\n        });\r\n        setIsViewMode(true);\r\n    };\r\n    \r\n  \r\n  // Handle clearing the form and resetting the view mode\r\n  const handleClear = () => {\r\n    setUrinaryCathetor({\r\n        CathetorFunction: '',\r\n        UrineQuality: '',\r\n        CatheterSite: '',\r\n        UrinaryCatheterSize: '',\r\n        Status: '',\r\n        Uti: '',\r\n        Remarks: '',\r\n       \r\n    });\r\n    setIsViewMode(false);\r\n};\r\n\r\n  \r\n\r\n    useEffect(() => {\r\n        axios.get(`${UrlLink}Ip_Workbench/IP_UrinaryCathetor_Details_Link`,{params:{RegistrationId:IP_DoctorWorkbenchNavigation?.RegistrationId,Type: 'Nurse'}})\r\n            .then((res) => {\r\n                const ress = res.data\r\n                console.log(ress)\r\n                setGridData(ress)\r\n    \r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            })\r\n      }, [UrlLink,IP_DoctorWorkbenchNavigation,IsGetData])\r\n    \r\n    \r\n\r\n\r\n      const HandleOnChange = (e) => {\r\n        const { name, value } = e.target;\r\n        const formattedValue = value.trim();\r\n        setUrinaryCathetor((prevFormData) => ({\r\n            ...prevFormData,\r\n            [name]: formattedValue,\r\n        }));\r\n    };\r\n\r\n\r\n    const handleSubmit = () => {\r\n        \r\n        console.log(IP_DoctorWorkbenchNavigation?.RegistrationId);\r\n        \r\n        const senddata={\r\n            ...UrinaryCathetor,\r\n            RegistrationId:IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n            Createdby:userRecord?.username,\r\n            \r\n            \r\n        }\r\n\r\n        console.log(senddata,'senddata');\r\n        \r\n        axios.post(`${UrlLink}Ip_Workbench/IP_UrinaryCathetor_Details_Link`, senddata)\r\n        .then((res) => {\r\n            const [type, message] = [Object.keys(res.data)[0], Object.values(res.data)[0]];\r\n            dispatch({ type: 'toast', value: { message, type } });\r\n            setIsGetData(prev => !prev);\r\n            handleClear();\r\n            })\r\n        .catch((err) => console.log(err));\r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n                <div className=\"RegisFormcon_1\">\r\n                    {\r\n                        Object.keys(UrinaryCathetor).map((p, index) => (\r\n                            <div className='RegisForm_1' key={p}>\r\n                                {/* Render fields with proper labels */}\r\n                                {p === 'CathetorFunction' ? (\r\n                                    <>\r\n                                        <label htmlFor={`${p}_${index}`}>Catheter Function<span>:</span></label>\r\n                                        <select\r\n                                            id={`${p}_${index}`}\r\n                                            name={p}\r\n                                            value={UrinaryCathetor[p]}\r\n                                            onChange={HandleOnChange}\r\n                                            readOnly={IsViewMode}\r\n                                        >\r\n                                            <option value=\"\">Select</option>\r\n                                            <option value=\"Draining\">Draining</option>\r\n                                            <option value=\"Blocked\">Blocked</option>\r\n                                        </select>\r\n                                    </>\r\n                                ) : p === 'UrineQuality' ? (\r\n                                    <>\r\n                                        <label htmlFor={`${p}_${index}`}>Urine Quality<span>:</span></label>\r\n                                        <select\r\n                                            id={`${p}_${index}`}\r\n                                            name={p}\r\n                                            value={UrinaryCathetor[p]}\r\n                                            onChange={HandleOnChange}\r\n                                            readOnly={IsViewMode}\r\n                                        >\r\n                                            <option value=\"\">Select</option>\r\n                                            <option value=\"Clear\">Clear</option>\r\n                                            <option value=\"Turbid\">Turbid</option>\r\n                                            <option value=\"Bloodstained\">Bloodstained</option>\r\n                                            <option value=\"Hematuria\">Hematuria</option>\r\n                                        </select>\r\n                                    </>\r\n                                ) : p === 'CatheterSite' ? (\r\n                                    <>\r\n                                        <label htmlFor={`${p}_${index}`}>Catheter Site<span>:</span></label>\r\n                                        <select\r\n                                            id={`${p}_${index}`}\r\n                                            name={p}\r\n                                            value={UrinaryCathetor[p]}\r\n                                            onChange={HandleOnChange}\r\n                                            readOnly={IsViewMode}\r\n                                        >\r\n                                            <option value=\"\">Select</option>\r\n                                            <option value=\"Redness\">Redness</option>\r\n                                            <option value=\"Discoloration\">Discoloration</option>\r\n                                            <option value=\"Swelling\">Swelling</option>\r\n                                        </select>\r\n                                    </>\r\n                                ) : p === 'Status' ? (\r\n                                    <>\r\n                                        <label htmlFor={`${p}_${index}`}>Status<span>:</span></label>\r\n                                        <select\r\n                                            id={`${p}_${index}`}\r\n                                            name={p}\r\n                                            value={UrinaryCathetor[p]}\r\n                                            onChange={HandleOnChange}\r\n                                            readOnly={IsViewMode}\r\n                                        >\r\n                                            <option value=\"\">Select</option>\r\n                                            <option value=\"Inserted\">Inserted</option>\r\n                                            <option value=\"StatusCheck\">StatusCheck</option>\r\n                                            <option value=\"Removed\">Removed</option>\r\n                                        </select>\r\n                                    </>\r\n                                ) : UrinaryCathetor.Status !== 'Inserted' && p === 'Uti' ? (\r\n                                    <>\r\n                                        <label htmlFor={`${p}_${index}`}>UTI <span>:</span></label>\r\n                                        <div className=\"text_adjust_mt_Ot_rado_0\">\r\n                                            <input\r\n                                                type='radio'\r\n                                                id=\"Uti_Yes\"\r\n                                                name=\"Uti\"\r\n                                                value='Yes'\r\n                                                checked={UrinaryCathetor.Uti === 'Yes'}\r\n                                                onChange={HandleOnChange}\r\n                                                readOnly={IsViewMode}\r\n                                            />\r\n                                            <label htmlFor=\"Uti_Yes\">Yes</label>\r\n\r\n                                            <input\r\n                                                type='radio'\r\n                                                id=\"Uti_No\"\r\n                                                name=\"Uti\"\r\n                                                value='No'\r\n                                                checked={UrinaryCathetor.Uti === 'No'}\r\n                                                onChange={HandleOnChange}\r\n                                                readOnly={IsViewMode}\r\n                                            />\r\n                                            <label htmlFor=\"Uti_No\">No</label>\r\n                                        </div>\r\n                                    </>\r\n                                ) : p === 'Remarks' ? (\r\n                                    <>\r\n                                        <label htmlFor={`${p}_${index}`}>Remarks <span>:</span></label>\r\n                                        <textarea\r\n                                            id={`${p}_${index}`}\r\n                                            name={p}\r\n                                            value={UrinaryCathetor[p]}\r\n                                            onChange={HandleOnChange}\r\n                                            readOnly={IsViewMode}\r\n                                            placeholder='Enter your remarks here'\r\n                                        />\r\n                                    </>\r\n                                ) : p === 'UrinaryCatheterSize' ? (\r\n                                    <>\r\n                                        <label htmlFor={`${p}_${index}`}>Urinary Catheter Size<span>:</span></label>\r\n                                        <input\r\n                                            id={`${p}_${index}`}\r\n                                            name={p}\r\n                                            readOnly={IsViewMode}\r\n                                            value={UrinaryCathetor[p]}\r\n                                            onChange={HandleOnChange}\r\n                                        />\r\n                                    </>\r\n                                ) : null}\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n\r\n\r\n\r\n                <div className=\"Main_container_Btn\">\r\n            \r\n                    {IsViewMode && (\r\n                        <button onClick={handleClear}>Clear</button>\r\n                    )}\r\n                    {!IsViewMode && (\r\n                        <button onClick={handleSubmit}>Submit</button>\r\n                    )}\r\n                </div>\r\n\r\n                {gridData.length >= 0 &&\r\n                    <ReactGrid columns={UrinaryCathetorColumns} RowData={gridData} />\r\n                }\r\n            \r\n            <ToastAlert Message={toast.message} Type={toast.type} />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default IP_UrinaryCathetor;"],"names":["IP_UrinaryCathetor","dispatch","useDispatch","UrlLink","useSelector","state","_state$userRecord","userRecord","toast","_state$userRecord2","IP_DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","console","log","_state$userRecord3","UserData","UrinaryCathetor","setUrinaryCathetor","useState","Status","CathetorFunction","UrineQuality","CatheterSite","UrinaryCatheterSize","Uti","Remarks","gridData","setGridData","IsGetData","setIsGetData","IsViewMode","setIsViewMode","UrinaryCathetorColumns","key","name","frozen","renderCell","params","_jsx","IconButton","onClick","handleView","row","children","VisibilityIcon","data","handleClear","useEffect","axios","get","concat","RegistrationId","Type","then","res","ress","catch","err","HandleOnChange","e","value","target","formattedValue","trim","prevFormData","_jsxs","_Fragment","className","Object","keys","map","p","index","htmlFor","id","onChange","readOnly","type","checked","placeholder","handleSubmit","senddata","Createdby","username","post","message","values","prev","length","ReactGrid","columns","RowData","ToastAlert","Message"],"sourceRoot":""}