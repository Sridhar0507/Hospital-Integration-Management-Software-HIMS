{"version":3,"file":"static/js/1608.cd2fdb6e.chunk.js","mappings":"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","sources":["IP_Workbench/Nurse/OtRequest.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ReactGrid from \"../../OtherComponent/ReactGrid/ReactGrid\";\r\nimport ToastAlert from \"../../OtherComponent/ToastContainer/ToastAlert\";\r\nimport Button from \"@mui/material/Button\";\r\nconst OtRequest = () => {\r\n  const UrlLink = useSelector((state) => state.userRecord?.UrlLink);\r\n  const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n  console.log(\"userRecord\", userRecord);\r\n  const toast = useSelector((state) => state.userRecord?.toast);\r\n  const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n  console.log(\"IP_DoctorWorkbenchNavigation\", IP_DoctorWorkbenchNavigation);\r\n  const dispatchvalue = useDispatch();\r\n\r\n  const [OtRequest, setOtRequest] = useState({\r\n    OtRequetsId: \"\",\r\n    PrimaryDoctor: \"\",\r\n    SurgeryName: \"\",\r\n    SurgeryDate: \"\",\r\n    SurgeryTime: \"\",\r\n    Remarks: \"\",\r\n    SurgerySpeciality: \"\",\r\n    Priority: \"\",\r\n    Speciality: \"\",\r\n    AdditionalDoctor: \"No\",\r\n    SurgeonSpeciality: \"\",\r\n    SurgeonName: \"\",\r\n  });\r\n  console.log(\"Ot\", OtRequest);\r\n\r\n  const [SpecialityData, setSpecialityData] = useState([]);\r\n  const [ResponseData,setResponseData] = useState([]);\r\n  const [SurgeryData, setSurgeryData] = useState([]);\r\n  const [SurgeryDoctorData, setSurgeryDoctorData] = useState([]);\r\n  const [OtRequestGet, setOtRequestGet] = useState(false);\r\n\r\n  useEffect(() => {\r\n    axios.get(`${UrlLink}Masters/Speciality_Detials_link`)\r\n      .then((res) => {\r\n        const ress = res.data\r\n        console.log(\"specialization\", ress);\r\n        setSpecialityData(ress)\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n  }, [UrlLink])\r\n\r\n\r\n  useEffect(() => {\r\n    const params = {\r\n      DoctorId: IP_DoctorWorkbenchNavigation?.DoctorName,\r\n      Specialization: IP_DoctorWorkbenchNavigation?.Specialization\r\n    };\r\n\r\n    if (params.DoctorId && params.Specialization) {\r\n      axios.get(`${UrlLink}OP/OtRequest_Details`, { params })\r\n        .then((res) => {\r\n          const ress = res.data;\r\n          console.log(\"Response:\", ress);\r\n\r\n          if (ress.DoctorName && ress.SpecialityName) {\r\n            setOtRequest(prevState => ({\r\n              ...prevState,\r\n              PrimaryDoctor: ress.DoctorName,\r\n              Speciality: ress.SpecialityName\r\n            }));\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.error(\"Error:\", err);\r\n        });\r\n    }\r\n\r\n  }, [UrlLink, IP_DoctorWorkbenchNavigation?.DoctorName, IP_DoctorWorkbenchNavigation?.Specialization]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (OtRequest.SurgerySpeciality) {\r\n      axios.get(`${UrlLink}Masters/Surgeryname_Speciality_link`, {\r\n        params: { Speciality: OtRequest.SurgerySpeciality }\r\n      })\r\n        .then((response) => {\r\n          console.log(\"Response Dataspeciality\", response.data);\r\n\r\n          // Check if the data is an array before setting it to the state\r\n          if (Array.isArray(response.data)) {\r\n            setSurgeryData(response.data);\r\n          } else {\r\n            setSurgeryData([]);  // Handle cases where data isn't an array\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setSurgeryData([]); // Set it to an empty array in case of an error\r\n        });\r\n    }\r\n  }, [UrlLink, OtRequest.SurgerySpeciality]);\r\n\r\n  useEffect(() => {\r\n    if (OtRequest.AdditionalDoctor === \"Yes\" && OtRequest.SurgerySpeciality) {\r\n      axios.get(`${UrlLink}Masters/Surgeryname_Speciality_Doctor_link`, {\r\n        params: { Speciality: OtRequest.SurgerySpeciality }\r\n      })\r\n        .then((response) => {\r\n          console.log(\"Response Dataspecialitydoctor\", response.data);\r\n\r\n          // Check if the data is an array before setting it to the state\r\n          if (Array.isArray(response.data)) {\r\n            setSurgeryDoctorData(response.data);\r\n          } else {\r\n            setSurgeryDoctorData([]);  // Handle cases where data isn't an array\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setSurgeryDoctorData([]); // Set it to an empty array in case of an error\r\n        });\r\n    }\r\n  }, [UrlLink, OtRequest.SurgerySpeciality]);\r\n\r\n\r\n\r\n  const handleOtRequestChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    if (name === 'AdditionalDoctor') {\r\n      if (value === 'No') {\r\n        setOtRequest((previous) => ({\r\n          ...previous,\r\n          SurgeonName: '',\r\n        }));\r\n      }\r\n      setOtRequest((previous) => ({\r\n        ...previous,\r\n        AdditionalDoctor: value,\r\n      }));\r\n\r\n    }\r\n\r\n\r\n    setOtRequest((previous) => ({\r\n      ...previous,\r\n      [name]: value,\r\n    }));\r\n\r\n  };\r\n  const handleOtRequestSubmit = () => {\r\n    // Check if SurgeryName is provided and AdditionalDoctor/SurgeryName conditions are met\r\n    if (OtRequest.SurgeryName !== \"\") {\r\n  \r\n      const data = {\r\n        ...OtRequest,\r\n        RegisterType: \"IP\",\r\n        created_by: userRecord?.username || \"\",\r\n        RegistrationId: IP_DoctorWorkbenchNavigation?.pk\r\n      };\r\n      \r\n      console.log(\"sendOtRequestdata\", data);\r\n  \r\n      axios.post(`${UrlLink}OP/OtRequest_Names_link`, data)\r\n        .then((res) => {\r\n          const reste = res.data;\r\n          const typp = Object.keys(reste)[0];\r\n          const mess = Object.values(reste)[0];\r\n          const tdata = {\r\n            message: mess,\r\n            type: typp,\r\n          };\r\n  \r\n          dispatchvalue({ type: \"toast\", value: tdata });\r\n          setOtRequestGet((prev) => !prev);\r\n          \r\n          // Reset the form after submission\r\n          setOtRequest({\r\n            PrimaryDoctor: \"\",\r\n            SurgeryName: \"\",\r\n            SurgeryDate: \"\",\r\n            SurgeryTime: \"\",\r\n            Remarks: \"\",\r\n            SurgerySpeciality: \"\",\r\n            Priority: \"\",\r\n            AdditionalDoctor: \"No\",  // Default back to \"No\"\r\n            SurgeonName: \"\",\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n  \r\n    } else {\r\n      // Warn the user if required fields are missing\r\n      const tdata = {\r\n        message: \"Please provide the required fields.\",\r\n        type: \"warn\",\r\n      };\r\n      dispatchvalue({ type: \"toast\", value: tdata });\r\n    }\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    // Ensure RegistrationId is available before making the request\r\n    if (IP_DoctorWorkbenchNavigation?.pk) {\r\n      const params = {\r\n        RegistrationId: IP_DoctorWorkbenchNavigation?.pk, // Ensure RegistrationId is valid\r\n        RegisterType: \"IP\" // Set the RegisterType explicitly\r\n      };\r\n\r\n      // Make the API call to fetch OT request details\r\n      axios.get(`${UrlLink}OP/OtRequest_Names_link`, { params })\r\n        .then((res) => {\r\n          const responseData = res.data;\r\n          console.log(\"Response dataget234:\", responseData);\r\nsetResponseData(responseData);\r\n\r\n        })\r\n        .catch((err) => {\r\n          console.error(\"Error fetching OT request data:\", err);\r\n        });\r\n    }\r\n  }, [UrlLink, OtRequestGet, IP_DoctorWorkbenchNavigation?.pk]);\r\n\r\n\r\n  const OtrequestColumns = [\r\n    {\r\n        key: \"id\",\r\n        name: \"S.No \",\r\n        frozen: true,\r\n    },\r\n    {\r\n        key: \"SurgeryName\",\r\n        name: \"Surgery Name\",\r\n    },\r\n    {\r\n        key: \"SurgeryDate\",\r\n        name: \"Surgery Date\",\r\n    },\r\n    {\r\n        key: \"SurgeryTime\",\r\n        name: \"Surgery Time\",\r\n    },\r\n    {\r\n        key: \"Priority\",\r\n        name: \"Priority\",\r\n    },\r\n    {\r\n        key: \"AdditionalDoctor\",\r\n        name: \"AdditionalDoctor\",\r\n        renderCell: (params) => (\r\n          \r\n          <div>{params.row.AdditionalDoctor || 'Nill'}</div>\r\n      )\r\n    },\r\n    {\r\n      key: \"Reason\",\r\n      name: \"Reason\",\r\n      renderCell: (params) => (\r\n          \r\n        <div>{console.log(params)}{params.row.Reason || 'Nill'}</div>\r\n    )\r\n  }\r\n   \r\n];\r\n  return (\r\n    <>\r\n      <div className=\"Main_container_app\">\r\n        <div className=\"RegisFormcon_1\">\r\n\r\n          <div className=\"common_center_tag\">\r\n            <span>OT Request</span>\r\n          </div>\r\n          <br></br>\r\n          <br></br>\r\n\r\n\r\n\r\n          <div className=\"RegisForm_1\">\r\n            <label htmlFor=\"ReportTime\">\r\n              Primary Doctor <span>:</span>\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"PrimaryDoctor\"\r\n              name=\"PrimaryDoctor\"\r\n              onChange={handleOtRequestChange}\r\n              value={OtRequest.PrimaryDoctor}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"RegisForm_1\">\r\n            <label> Surgery Speciality<span>:</span> </label>\r\n\r\n            <select\r\n              name='SurgerySpeciality'\r\n              value={OtRequest.SurgerySpeciality}\r\n              onChange={handleOtRequestChange}\r\n            >\r\n              <option value=''>Select</option>\r\n              {\r\n                SpecialityData.map((p) => (\r\n                  <option key={p.id} value={p.id}>{p.SpecialityName}</option>\r\n                ))\r\n              }\r\n            </select>\r\n          </div>\r\n          <div className=\"RegisForm_1\">\r\n            <label>\r\n              Additional Doctor<span>:</span>\r\n            </label>\r\n            <div className=\"text_adjust_mt_Ot_rado_0\">\r\n              <div className=\"radio_Nurse_ot2\">\r\n                <label htmlFor=\"Yes\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    id=\"Yes\"\r\n                    name=\"AdditionalDoctor\"\r\n                    value=\"Yes\"\r\n                    // className=\"radio_Nurse_ot2_input\"\r\n                    checked={OtRequest.AdditionalDoctor === \"Yes\"}\r\n                    onChange={handleOtRequestChange}\r\n                  />\r\n                  Yes\r\n                </label>\r\n              </div>\r\n              <div className=\"radio_Nurse_ot2\">\r\n                <label htmlFor=\"No\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    id=\"No\"\r\n                    name=\"AdditionalDoctor\"\r\n                    value=\"No\"\r\n                    // className=\"radio_Nurse_ot2_input\"\r\n                    checked={OtRequest.AdditionalDoctor === \"No\"}\r\n                    onChange={handleOtRequestChange}\r\n                  />\r\n                  No\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {\r\n            (OtRequest.AdditionalDoctor === 'Yes') && (\r\n              <>\r\n\r\n                <div className=\"RegisForm_1\">\r\n                  <label htmlFor=\"SurgeonName\"> Surgeon Name<span>:</span> </label>\r\n\r\n                  <select\r\n                    name='SurgeonName'\r\n                    value={OtRequest.SurgeonName}\r\n                    onChange={handleOtRequestChange}\r\n                  >\r\n                    <option value=''>Select</option>\r\n                    {\r\n                      SurgeryDoctorData && SurgeryDoctorData.length > 0 ? (\r\n                        SurgeryDoctorData.map((p) => (\r\n                          <option key={p.id} value={p.Doctor_ID}>{p.Doctor_Name}</option>\r\n                        ))\r\n                      ) : (\r\n                        <option value=''>No surgeon available</option>\r\n                      )\r\n                    }\r\n                  </select>\r\n                </div>\r\n              </>\r\n\r\n            )\r\n          }\r\n\r\n\r\n          <div className=\"RegisForm_1\">\r\n            <label> Surgery Name<span>:</span> </label>\r\n\r\n            <select\r\n              name='SurgeryName'\r\n              value={OtRequest.SurgeryName}\r\n              onChange={handleOtRequestChange}\r\n            >\r\n              <option value=''>Select</option>\r\n              {\r\n                SurgeryData && SurgeryData.length > 0 ? (\r\n                  SurgeryData.map((p) => (\r\n                    <option key={p.id} value={p.Surgery_Id}>{p.Surgery_Name}</option>\r\n                  ))\r\n                ) : (\r\n                  <option value=''>No surgeries available</option>\r\n                )\r\n              }\r\n            </select>\r\n          </div>\r\n\r\n\r\n\r\n\r\n          <div className=\"RegisForm_1\">\r\n            <label htmlFor=\"ReportDate\">\r\n              Surgery Date <span>:</span>\r\n            </label>\r\n            <input\r\n              type=\"date\"\r\n              id=\"SurgeryDate\"\r\n              name=\"SurgeryDate\"\r\n              onChange={handleOtRequestChange}\r\n              value={OtRequest.SurgeryDate}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"RegisForm_1\">\r\n            <label htmlFor=\"ReportTime\">\r\n              Surgery Time <span>:</span>\r\n            </label>\r\n            <input\r\n              type=\"time\"\r\n              id=\"SurgeryTime\"\r\n              name=\"SurgeryTime\"\r\n              onChange={handleOtRequestChange}\r\n              value={OtRequest.SurgeryTime}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"RegisForm_1\">\r\n            <label>\r\n              Priority <span>:</span>\r\n            </label>\r\n            <select\r\n              name=\"Priority\"\r\n              required\r\n              value={OtRequest.Priority}\r\n              onChange={handleOtRequestChange}\r\n            >\r\n              <option value=\"\" disabled>Select</option>\r\n              <option value=\"Urgent\">Urgent</option>\r\n              <option value=\"Regular\">Regular</option>\r\n\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"RegisForm_1\">\r\n            <label htmlFor=\"ReportTime\">\r\n              Remarks <span>:</span>\r\n            </label>\r\n            <textarea\r\n              className=\"treatcon_body_1 textarea\"\r\n              id=\"Remarks\"\r\n              name=\"Remarks\"\r\n              onChange={handleOtRequestChange}\r\n              value={OtRequest.Remarks}\r\n              required\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"Main_container_Btn\">\r\n          <button onClick={handleOtRequestSubmit}>\r\n            {OtRequest.RequestId ? \"Update\" : \"Save\"}\r\n          </button>\r\n        </div>\r\n        <br></br>\r\n        {ResponseData.length > 0 && (\r\n                <>\r\n                   \r\n                    <ReactGrid columns={OtrequestColumns} RowData={ResponseData} />\r\n                </>\r\n            )}\r\n        <ToastAlert Message={toast.message} Type={toast.type} />\r\n\r\n      </div>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default OtRequest\r\n"],"names":["OtRequest","UrlLink","useSelector","state","_state$userRecord","userRecord","_state$userRecord2","UserData","console","log","toast","_state$userRecord3","IP_DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","dispatchvalue","useDispatch","setOtRequest","useState","OtRequetsId","PrimaryDoctor","SurgeryName","SurgeryDate","SurgeryTime","Remarks","SurgerySpeciality","Priority","Speciality","AdditionalDoctor","SurgeonSpeciality","SurgeonName","SpecialityData","setSpecialityData","ResponseData","setResponseData","SurgeryData","setSurgeryData","SurgeryDoctorData","setSurgeryDoctorData","OtRequestGet","setOtRequestGet","useEffect","axios","get","concat","then","res","ress","data","catch","err","params","DoctorId","DoctorName","Specialization","SpecialityName","prevState","error","response","Array","isArray","handleOtRequestChange","e","name","value","target","previous","pk","RegistrationId","RegisterType","responseData","OtrequestColumns","key","frozen","renderCell","_jsx","children","row","_jsxs","Reason","_Fragment","className","htmlFor","type","id","onChange","required","map","p","checked","length","Doctor_ID","Doctor_Name","Surgery_Id","Surgery_Name","disabled","onClick","handleOtRequestSubmit","created_by","username","post","reste","typp","Object","keys","mess","values","message","prev","RequestId","ReactGrid","columns","RowData","ToastAlert","Message","Type"],"sourceRoot":""}