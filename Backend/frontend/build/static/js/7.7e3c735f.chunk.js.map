{"version":3,"file":"static/js/7.7e3c735f.chunk.js","mappings":"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","sources":["DoctorWorkBench/GeneralEvaluation.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\nimport ToastAlert from '../OtherComponent/ToastContainer/ToastAlert';\r\nimport { IconButton } from '@mui/material';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport ReactGrid from '../OtherComponent/ReactGrid/ReactGrid';\r\nimport ModelContainer from '../OtherComponent/ModelContainer/ModelContainer';\r\n\r\n\r\nconst GeneralEvaluation = () => {\r\n  const UrlLink = useSelector((state) => state.userRecord?.UrlLink);\r\n  const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n  const toast = useSelector((state) => state.userRecord?.toast);\r\n  const dispatch = useDispatch();\r\n  const DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.DoctorWorkbenchNavigation);\r\n\r\n  const [GeneralEvaluation, setGeneralEvaluation] = useState({\r\n    cheifComplaint: '',\r\n    History: '',\r\n    Examine: '',\r\n    Diagnosis: '',\r\n    ChooseDocument: null,\r\n\r\n  });\r\n\r\n  const [gridData, setGridData] = useState([]);\r\n  const [IsGetData, setIsGetData] = useState(false)\r\n  const [IsViewMode, setIsViewMode] = useState(false)\r\n\r\n  const Selectedfileview = (fileval) => {\r\n    if (fileval) {\r\n        let tdata = {\r\n            Isopen: false,\r\n            content: null,\r\n            type: \"image/jpg\",\r\n        };\r\n        if ([\"data:image/jpeg;base64\", \"data:image/jpg;base64\"].includes(fileval?.split(\",\")[0])) {\r\n            tdata = {\r\n                Isopen: true,\r\n                content: fileval,\r\n                type: \"image/jpeg\",\r\n            };\r\n        } else if (fileval?.split(\",\")[0] === \"data:image/png;base64\") {\r\n            tdata = {\r\n                Isopen: true,\r\n                content: fileval,\r\n                type: \"image/png\",\r\n            };\r\n        } else if (fileval?.split(\",\")[0] === \"data:application/pdf;base64\") {\r\n            tdata = {\r\n                Isopen: true,\r\n                content: fileval,\r\n                type: \"application/pdf\",\r\n            };\r\n        }\r\n\r\n        dispatch({ type: \"modelcon\", value: tdata });\r\n    } else {\r\n        const tdata = {\r\n            message: \"There is no file to view.\",\r\n            type: \"warn\",\r\n        };\r\n        dispatch({ type: \"toast\", value: tdata });\r\n    }\r\n};\r\n\r\n\r\nconst handleinpchangeDocumentsForm = (e) => {\r\n  const { name, files } = e.target;\r\n\r\n  // Ensure that files exist and are not empty\r\n  if (files && files.length > 0) {\r\n      const formattedValue = files[0];\r\n\r\n      // Optional: Add validation for file type and size\r\n      const allowedTypes = [\"application/pdf\", \"image/jpeg\", \"image/png\"]; // Example allowed types\r\n      const maxSize = 5 * 1024 * 1024; // Example max size of 5MB\r\n      if (!allowedTypes.includes(formattedValue.type) || formattedValue.type === \"\") {\r\n          // Dispatch a warning toast or handle file type validation\r\n          const tdata = {\r\n              message: \"Invalid file type. Please upload a PDF, JPEG, or PNG file.\",\r\n              type: \"warn\",\r\n          };\r\n          dispatch({ type: \"toast\", value: tdata });\r\n      } else if (formattedValue.size > maxSize) {\r\n          // Dispatch a warning toast or handle file size validation\r\n          const tdata = {\r\n              message: \"File size exceeds the limit of 5MB.\",\r\n              type: \"warn\",\r\n          };\r\n          dispatch({ type: \"toast\", value: tdata });\r\n      } else {\r\n          const reader = new FileReader();\r\n          reader.onload = () => {\r\n              setGeneralEvaluation(prev => ({\r\n                  ...prev,\r\n                  [name]: reader.result,\r\n              }));\r\n          };\r\n          reader.readAsDataURL(formattedValue);\r\n      }\r\n  } else {\r\n      // Handle case where no file is selected\r\n      const tdata = {\r\n          message: \"No file selected. Please choose a file to upload.\",\r\n          type: \"warn\",\r\n      };\r\n      dispatch({ type: \"toast\", value: tdata });\r\n  }\r\n};\r\n\r\n  const GeneralEvaluationColumns = [\r\n    { key: 'id', name: 'S.No', frozen: true },\r\n    { key: 'VisitId', name: 'VisitId', frozen: true },\r\n    { key: 'PrimaryDoctorId', name: 'Doctor Id', frozen: true },\r\n    { key: 'PrimaryDoctorName', name: 'Doctor Name', frozen: true },\r\n    { key: 'Date', name: 'Date', frozen: true },\r\n    { key: 'Time', name: 'Time', frozen: true },\r\n    {\r\n      key: 'view',\r\n      name: 'View',\r\n      frozen: true,\r\n      renderCell: (params) => (\r\n        <IconButton onClick={() => handleView(params.row)}>\r\n          <VisibilityIcon />\r\n        </IconButton>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    axios.get(`${UrlLink}Workbench/Workbench_GeneralEvaluation_Details`, { params: { RegistrationId: DoctorWorkbenchNavigation?.pk } })\r\n      .then((res) => {\r\n        const ress = res.data\r\n        console.log(res);\r\n        setGridData(ress)\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n  }, [IsGetData, UrlLink, DoctorWorkbenchNavigation])\r\n\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    console.log(name, value, '-------');\r\n\r\n    setGeneralEvaluation(prevState => ({\r\n      ...prevState,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n\r\n\r\n  const handleView = (data) => {\r\n    setGeneralEvaluation({\r\n      cheifComplaint: data.cheifComplaint || '',\r\n      History: data.History || '',\r\n      Examine: data.Examine || '',\r\n      Diagnosis: data.Diagnosis || '',\r\n      ChooseDocument: data.ChooseDocument || null,\r\n\r\n    });\r\n    setIsViewMode(true);\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setGeneralEvaluation({\r\n      cheifComplaint: '',\r\n      History: '',\r\n      Examine: '',\r\n      Diagnosis: '',\r\n      ChooseDocument: null,\r\n\r\n    });\r\n    setIsViewMode(false);\r\n  };\r\n\r\n\r\n  const handleSubmit = async () => {\r\n    const formData = new FormData();\r\n    console.log(FormData,'formData');\r\n    \r\n    formData.append(\"cheifComplaint\", GeneralEvaluation.cheifComplaint);\r\n    formData.append(\"History\", GeneralEvaluation.History);\r\n    formData.append(\"Examine\", GeneralEvaluation.Examine);\r\n    formData.append(\"Diagnosis\", GeneralEvaluation.Diagnosis);\r\n    \r\n\r\n    if (GeneralEvaluation.ChooseDocument) {\r\n      formData.append(\"ChooseDocument\", GeneralEvaluation.ChooseDocument);\r\n    }\r\n    console.log(GeneralEvaluation.ChooseDocument);\r\n    \r\n\r\n     \r\n    formData.append('RegistrationId', DoctorWorkbenchNavigation?.pk);\r\n    formData.append('Createdby', userRecord?.username);\r\n\r\n    try {\r\n      const response = await axios.post(`${UrlLink}Workbench/Workbench_GeneralEvaluation_Details`, formData,{\r\n          headers: {\r\n              'Content-Type': 'multipart/form-data',\r\n          }\r\n      });\r\n      const [type, message] = [Object.keys(response.data)[0], Object.values(response.data)[0]];\r\n      dispatch({ type: 'toast', value: { message, type } });\r\n      setIsGetData(prev => !prev);\r\n      handleClear();\r\n  } catch (error) {\r\n      console.error(error);\r\n  }\r\n\r\n   \r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"appointment\">\r\n        <div className=\"treatcon_body_1 txtWidth\">\r\n          <label>\r\n            Cheif Complaint <span>:</span>\r\n          </label>\r\n          <textarea\r\n            id='cheifComplaint'\r\n            name='cheifComplaint'\r\n            value={GeneralEvaluation.cheifComplaint}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"treatcon_body_1 txtWidth\">\r\n          <label>\r\n            History <span>:</span>\r\n          </label>\r\n          <textarea\r\n            id='History'\r\n            name='History'\r\n            value={GeneralEvaluation.History}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"treatcon_body_1 txtWidth\">\r\n          <label>\r\n            Examination <span>:</span>\r\n          </label>\r\n          <textarea\r\n            id='Examine'\r\n            name='Examine'\r\n            value={GeneralEvaluation.Examine}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"treatcon_body_1 txtWidth\">\r\n          <label>\r\n            Diagnosis <span>:</span>\r\n          </label>\r\n          <textarea\r\n            id='Diagnosis'\r\n            name='Diagnosis'\r\n            value={GeneralEvaluation.Diagnosis}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"treatcon_body_1 txtWidth\">\r\n          <label>\r\n            Choose Document <span>:</span>\r\n          </label>\r\n          <div style={{ display: 'flex', alignItems: 'center' }}>\r\n              <input\r\n                  type=\"file\"\r\n                  name={'ChooseDocument'}\r\n                  accept=\"image/jpeg, image/png, application/pdf\"\r\n                  required\r\n                  id={'ChooseDocument'}\r\n                  autoComplete=\"off\"\r\n                  onChange={handleinpchangeDocumentsForm}\r\n                  style={{ display: 'none' }}\r\n              />\r\n              <div style={{ width: \"150px\", display: \"flex\", justifyContent: \"space-around\" }}>\r\n                  <label\r\n                      htmlFor={'ChooseDocument'}\r\n                      className=\"RegisterForm_1_btns choose_file_update\"\r\n                  >\r\n                      Choose File\r\n                  </label>\r\n                  <button\r\n                      className=\"fileviewbtn\"\r\n                      onClick={() => Selectedfileview(GeneralEvaluation.ChooseDocument)}\r\n                  >\r\n                      View\r\n                  </button>\r\n              </div>\r\n          </div>\r\n          \r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"Main_container_Btn\">\r\n\r\n        {IsViewMode && (\r\n          <button onClick={handleClear}>Clear</button>\r\n        )}\r\n        {!IsViewMode && (\r\n          <button onClick={handleSubmit}>Submit</button>\r\n        )}\r\n      </div>\r\n\r\n      {gridData.length > 0 &&\r\n        <ReactGrid columns={GeneralEvaluationColumns} RowData={gridData} />\r\n      }\r\n\r\n      <ToastAlert Message={toast.message} Type={toast.type} />\r\n      <ModelContainer />\r\n\r\n\r\n    </>\r\n\r\n\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default GeneralEvaluation;"],"names":["GeneralEvaluation","UrlLink","useSelector","state","_state$userRecord","userRecord","_state$userRecord2","UserData","toast","_state$userRecord3","dispatch","useDispatch","DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","setGeneralEvaluation","useState","cheifComplaint","History","Examine","Diagnosis","ChooseDocument","gridData","setGridData","IsGetData","setIsGetData","IsViewMode","setIsViewMode","GeneralEvaluationColumns","key","name","frozen","renderCell","params","_jsx","IconButton","onClick","handleView","row","children","VisibilityIcon","useEffect","axios","get","concat","RegistrationId","pk","then","res","ress","data","console","log","catch","err","handleChange","e","value","target","prevState","handleClear","_jsxs","_Fragment","className","id","onChange","style","display","alignItems","type","accept","required","autoComplete","files","length","formattedValue","maxSize","includes","size","message","reader","FileReader","onload","prev","result","readAsDataURL","width","justifyContent","htmlFor","fileval","tdata","Isopen","content","split","Selectedfileview","async","formData","FormData","append","username","response","post","headers","Object","keys","values","error","ReactGrid","columns","RowData","ToastAlert","Message","Type","ModelContainer"],"sourceRoot":""}