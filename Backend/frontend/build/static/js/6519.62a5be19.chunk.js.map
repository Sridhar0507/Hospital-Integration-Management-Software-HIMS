{"version":3,"file":"static/js/6519.62a5be19.chunk.js","mappings":"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","sources":["IP_Workbench/Doctor/IP_Vitals.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ReactGrid from '../../OtherComponent/ReactGrid/ReactGrid';\r\nimport axios from 'axios';\r\nimport ToastAlert from '../../OtherComponent/ToastContainer/ToastAlert';\r\nimport { IconButton } from '@mui/material';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\n\r\nimport ToggleButton from \"@mui/material/ToggleButton\";\r\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\r\n\r\n\r\nconst IP_Vitals = () => {\r\n    const dispatch = useDispatch();\r\n    const UrlLink = useSelector(state => state.userRecord?.UrlLink);\r\n    const toast = useSelector(state => state.userRecord?.toast);\r\n    const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n    console.log(IP_DoctorWorkbenchNavigation,'IP_DoctorWorkbenchNavigation');\r\n\r\n    const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n\r\n    \r\n    const formatLabel = (label) => {\r\n\r\n        if (/[a-z]/.test(label) && /[A-Z]/.test(label) && !/\\d/.test(label)) {\r\n            return label\r\n                .replace(/([a-z])([A-Z])/g, \"$1 $2\")\r\n                .replace(/^./, (str) => str.toUpperCase());\r\n        } else {\r\n            return label;\r\n        }\r\n    };\r\n\r\n   \r\n    const [VitalFormData, setVitalFormData] = useState({\r\n       \r\n        Temperature: '',\r\n        PulseRate: '',\r\n        SPO2: '',\r\n        HeartRate: '',\r\n        RespiratoryRate: '',\r\n        SBP: '',\r\n        DBP: '',\r\n        Height: '',\r\n        Weight: '',\r\n        BMI: '',\r\n        WC: '',\r\n        HC: '',\r\n        BSL:'',\r\n        Painscore:'',\r\n        SupplementalOxygen:'',\r\n        LevelOfConsiousness:'',\r\n        CapillaryRefillTime:'',\r\n        // ETCO2: \"\",\r\n        // BreathSounds: \"\",\r\n        // Date: \"\",\r\n        // Time: \"\",\r\n    });\r\n\r\n    const [type, setType] = useState(\"Vital\");\r\n\r\n    const [gridData, setGridData] = useState([])\r\n    const [IsGetData, setIsGetData] = useState(false)\r\n\r\n    const [IsViewMode, setIsViewMode] = useState(false)\r\n  \r\n    const colorStyles = {\r\n        normal: 'green',\r\n        minlow: 'yellow',\r\n        maxlow: 'yellow',\r\n        minmedium: 'orange',\r\n        maxmedium: 'orange',\r\n        minhigh: 'red',\r\n        maxhigh: 'red',\r\n      };\r\n      \r\n    \r\n      const getColorByStatus = (status) => {\r\n        switch (status) {\r\n            case 3:\r\n                return 'red';\r\n            case 2:\r\n                return 'orange';\r\n            case 1:\r\n                return 'yellow';\r\n            case 0:\r\n                return 'green';\r\n            default:\r\n                return ''; // Default color for undefined or other values\r\n        }\r\n    };\r\n    \r\n\r\n    const getColorStyle = (status) => {\r\n        return colorStyles[status] || ''; // Default color if no match\r\n      };\r\n      \r\n      const renderColorBox = (status) => {\r\n        // Ensure `status` is defined and is a string\r\n        if (typeof status !== 'string' || status.length === 0) {\r\n            return null; // Or render a default/fallback element\r\n        }\r\n    \r\n        return (\r\n            <div\r\n                style={{\r\n                    width: '40px', // Slightly larger for better visibility\r\n                    height: '40px', // Slightly larger for better visibility\r\n                    backgroundColor: getColorStyle(status),\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    marginRight: '15px', // Increased spacing\r\n                    borderRadius: '8px', // Rounded corners\r\n                    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)', // Subtle shadow for depth\r\n                    border: '1px solid rgba(0, 0, 0, 0.2)', // Light border for contrast\r\n                    fontSize: '12px', // Adjust font size for the box\r\n                    fontWeight: 'bold', // Bold text\r\n                    color: '#fff', // Text color for better contrast\r\n                }}\r\n            >\r\n                {status.charAt(0).toUpperCase()} {/* Display first letter of the range */}\r\n            </div>\r\n        );\r\n    };\r\n    \r\n      \r\n      \r\n    useEffect(() => {\r\n        if (VitalFormData.Weight && VitalFormData.Height) {\r\n          const parsedWeight = parseFloat(VitalFormData.Weight);\r\n          const parsedHeight = parseFloat(VitalFormData.Height) / 100; // Convert cm to m\r\n          const calculatedBMI = (\r\n            parsedWeight /\r\n            (parsedHeight * parsedHeight)\r\n          ).toFixed(2);\r\n      \r\n          setVitalFormData((prev) => ({\r\n            ...prev,\r\n            BMI: calculatedBMI,\r\n          }));\r\n        }\r\n      }, [VitalFormData.Weight, VitalFormData.Height]);\r\n      \r\n    const VitalsFormColumns = [\r\n        {\r\n            key: 'id',\r\n            name: 'S.No',\r\n            frozen: true\r\n        },\r\n        { key: 'Type', name: 'Type',frozen: true },\r\n        { key: 'PrimaryDoctorId', name: 'Doctor Id',frozen: true },\r\n        { key: 'PrimaryDoctorName', name: 'Doctor Name',frozen: true },\r\n      \r\n        {\r\n            key: 'Date',\r\n            name: 'Date',\r\n            frozen: true\r\n        },\r\n        {\r\n            key: 'Time',\r\n            name: 'Time',\r\n            frozen: true\r\n        },\r\n       \r\n       \r\n       \r\n        {\r\n            key: 'view',\r\n            frozen: true,\r\n            name: 'View',\r\n            renderCell: (params) => (\r\n              <IconButton onClick={() => handleView(params.row)}>\r\n                <VisibilityIcon />\r\n              </IconButton>\r\n            ),\r\n          },\r\n        \r\n    ]\r\n// Handle setting the form data when viewing\r\nconst handleView = (data) => {\r\n    setVitalFormData({\r\n        Temperature: data.Temperature || '',\r\n        PulseRate: data.PulseRate || '',\r\n        SPO2: data.SPO2 || '',\r\n        HeartRate: data.HeartRate || '',\r\n        RespiratoryRate: data.RespiratoryRate || '',\r\n        SBP: data.SBP || '',\r\n        DBP: data.DBP || '',\r\n        Height: data.Height || '',\r\n        Weight: data.Weight || '',\r\n        BMI: data.BMI || '',\r\n        WC: data.WC || '',\r\n        HC: data.HC || '',\r\n        BSL: data.BSL || '',\r\n        Painscore: data.Painscore || '',\r\n        SupplementalOxygen: data.SupplementalOxygen || '',\r\n        LevelOfConsiousness: data.LevelOfConsiousness || '',\r\n        CapillaryRefillTime: data.CapillaryRefillTime || '',\r\n        \r\n        // ETCO2: data.EtCO2 || '',\r\n        // BreathSounds: data.BreathSounds || '',\r\n        // Date: data.Date || '',\r\n        // Time: data.Time || '',\r\n        // Createdby: data.Createdby || '',\r\n    });\r\n    setIsViewMode(true);\r\n};\r\n\r\n\r\n// Handle clearing the form and resetting the view mode\r\nconst handleClear = () => {\r\nsetVitalFormData({\r\n    Temperature: '',\r\n    PulseRate: '',\r\n    SPO2: '',\r\n    HeartRate: '',\r\n    RespiratoryRate: '',\r\n    SBP: '',\r\n    DBP: '',\r\n    Height: '',\r\n    Weight: '',\r\n    BMI: '',\r\n    WC: '',\r\n    HC: '',\r\n    BSL: '',\r\n    Painscore:'',\r\n    SupplementalOxygen:'',\r\n    LevelOfConsiousness:'',\r\n    CapillaryRefillTime:'',\r\n    // ETCO2:'',\r\n    // BreathSounds:'',\r\n    // Date: '',\r\n    // Time: '',\r\n    // Createdby: '',\r\n});\r\nsetIsViewMode(false);\r\n};\r\n  \r\n\r\n    // useEffect(() => {\r\n    //     axios.get(`${UrlLink}Ip_Workbench/IP_Vitals_Form_Details_Link`,{params:{RegistrationId:IP_DoctorWorkbenchNavigation?.RegistrationId}})\r\n    //         .then((res) => {\r\n    //             const ress = res.data\r\n    //             console.log(ress)\r\n    //             setGridData(ress)\r\n    \r\n    //         })\r\n    //         .catch((err) => {\r\n    //             console.log(err);\r\n    //         })\r\n    //   }, [UrlLink,IP_DoctorWorkbenchNavigation,IsGetData])\r\n    \r\n    \r\n\r\n    useEffect(() => {\r\n      axios.get(`${UrlLink}Ip_Workbench/IP_Vitals_Form_Details_Link`, {\r\n          params: { RegistrationId: IP_DoctorWorkbenchNavigation?.RegistrationId }\r\n      })\r\n      .then((res) => {\r\n          const data = res.data;\r\n          console.log('API Data:', data); // Check the data structure here\r\n          \r\n          // Access the `vital_details` array from the response\r\n          if (data && Array.isArray(data.vital_details)) {\r\n              setGridData(data.vital_details);\r\n          } else {\r\n              console.error('vital_details is not an array:', data);\r\n          }\r\n      })\r\n      .catch((err) => {\r\n          console.error('Error fetching data:', err);\r\n      });\r\n  }, [UrlLink, IP_DoctorWorkbenchNavigation, IsGetData]);\r\n  \r\n\r\n      const HandleOnChange = (e) => {\r\n        const { name, value } = e.target;\r\n        const formattedValue = value.trim();\r\n        setVitalFormData((prevFormData) => ({\r\n            ...prevFormData,\r\n            [name]: formattedValue,\r\n        }));\r\n    };\r\n\r\n\r\n    const handleChange = (event) => {\r\n        setType(event.target.value);\r\n      };\r\n     \r\n      const columns = [\r\n        {\r\n            key: 'temperature_status',\r\n            name: 'Temperature Status',\r\n            renderCell: (params) => (\r\n                <div\r\n                    style={{\r\n                        backgroundColor: getColorByStatus(params.row.temperature_status),\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        textAlign: 'center',\r\n                        color: '#fff',\r\n                        fontWeight: 'bold',\r\n                        borderRadius: '4px',\r\n                        padding: '5px'\r\n                    }}\r\n                >\r\n                    {params.row.temperature_status}\r\n                </div>\r\n            )\r\n        },\r\n        {\r\n            key: 'spo2_status',\r\n            name: 'SPO2 Status',\r\n            renderCell: (params) => (\r\n                <div\r\n                    style={{\r\n                        backgroundColor: getColorByStatus(params.row.spo2_status),\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        textAlign: 'center',\r\n                        color: '#fff',\r\n                        fontWeight: 'bold',\r\n                        borderRadius: '4px',\r\n                        padding: '5px'\r\n                    }}\r\n                >\r\n                    {params.row.spo2_status}\r\n                </div>\r\n            )\r\n        },\r\n        {\r\n            key: 'heartrate_status',\r\n            name: 'Heart Rate Status',\r\n            renderCell: (params) => (\r\n                <div\r\n                    style={{\r\n                        backgroundColor: getColorByStatus(params.row.heartrate_status),\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        textAlign: 'center',\r\n                        color: '#fff',\r\n                        fontWeight: 'bold',\r\n                        borderRadius: '4px',\r\n                        padding: '5px'\r\n                    }}\r\n                >\r\n                    {params.row.heartrate_status}\r\n                </div>\r\n            )\r\n        },\r\n        {\r\n            key: 'RespiratoryStatus',\r\n            name: 'Respiratory Status',\r\n            renderCell: (params) => (\r\n                <div\r\n                    style={{\r\n                        backgroundColor: getColorByStatus(params.row.RespiratoryStatus),\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        textAlign: 'center',\r\n                        color: '#fff',\r\n                        fontWeight: 'bold',\r\n                        borderRadius: '4px',\r\n                        padding: '5px'\r\n                    }}\r\n                >\r\n                    {params.row.RespiratoryStatus}\r\n                </div>\r\n            )\r\n        },\r\n        {\r\n            key: 'sbp_status',\r\n            name: 'SBP Status',\r\n            renderCell: (params) => (\r\n                <div\r\n                    style={{\r\n                        backgroundColor: getColorByStatus(params.row.sbp_status),\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        textAlign: 'center',\r\n                        color: '#fff',\r\n                        fontWeight: 'bold',\r\n                        borderRadius: '4px',\r\n                        padding: '5px'\r\n                    }}\r\n                >\r\n                    {params.row.sbp_status}\r\n                </div>\r\n            )\r\n        },\r\n        {\r\n            key: 'SupplementalOxygen_status',\r\n            name: 'Supplemental Oxygen Status',\r\n            renderCell: (params) => (\r\n                <div\r\n                    style={{\r\n                        backgroundColor: getColorByStatus(params.row.SupplementalOxygen_status),\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        textAlign: 'center',\r\n                        color: '#fff',\r\n                        fontWeight: 'bold',\r\n                        borderRadius: '4px',\r\n                        padding: '5px'\r\n                    }}\r\n                >\r\n                    {params.row.SupplementalOxygen_status}\r\n                </div>\r\n            )\r\n        },\r\n        {\r\n            key: 'LevelOfConsiousness_Status',\r\n            name: 'Level of Consciousness Status',\r\n            renderCell: (params) => (\r\n                <div\r\n                    style={{\r\n                        backgroundColor: getColorByStatus(params.row.LevelOfConsiousness_Status),\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        textAlign: 'center',\r\n                        color: '#fff',\r\n                        fontWeight: 'bold',\r\n                        borderRadius: '4px',\r\n                        padding: '5px'\r\n                    }}\r\n                >\r\n                    {params.row.LevelOfConsiousness_Status}\r\n                </div>\r\n            )\r\n        },\r\n        {\r\n            key: 'CapillaryRefillTime_Status',\r\n            name: 'Capillary Refill Time Status',\r\n            renderCell: (params) => (\r\n                <div\r\n                    style={{\r\n                        backgroundColor: getColorByStatus(params.row.CapillaryRefillTime_Status),\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        textAlign: 'center',\r\n                        color: '#fff',\r\n                        fontWeight: 'bold',\r\n                        borderRadius: '4px',\r\n                        padding: '5px'\r\n                    }}\r\n                >\r\n                    {params.row.CapillaryRefillTime_Status}\r\n                </div>\r\n            )\r\n        },\r\n    ];\r\n    \r\n    const calculateTotalScore = (row) => {\r\n    const fields = [\r\n      'LevelOfConsiousness_Status',\r\n      'RespiratoryStatus',\r\n      'SupplementalOxygen_status',\r\n      'heartrate_status',\r\n      'temperature_status',\r\n      'spo2_status',\r\n      'sbp_status',\r\n      'CapillaryRefillTime_Status'\r\n    ];\r\n\r\n    return fields.reduce((total, field) => {\r\n      const value = row[field];\r\n      return total + (value !== null ? value : 0); // Ensure we handle null values\r\n    }, 0);\r\n  };\r\n\r\n//   const getScoreCategory = (score) => {\r\n//     if (score >= 0 && score <= 4) {\r\n//         return 'Low';\r\n//     } else if (score >= 5 && score <= 6) {\r\n//         return 'Medium';\r\n//     } else if (score >= 7 && score <= 21) {\r\n//         return 'High';\r\n//     } else {\r\n//         return 'Unknown';\r\n//     }\r\n// };\r\n\r\nconst calculateAge = (dob) => {\r\n  const dobDate = new Date(dob);\r\n  const today = new Date();\r\n  let age = today.getFullYear() - dobDate.getFullYear();\r\n  const monthDifference = today.getMonth() - dobDate.getMonth();\r\n  if (monthDifference < 0 || (monthDifference === 0 && today.getDate() < dobDate.getDate())) {\r\n      age--;\r\n  }\r\n  return age;\r\n};\r\n\r\nconst dob = IP_DoctorWorkbenchNavigation?.DOB; // Ensure this matches the structure of your state\r\nconst age = dob ? calculateAge(dob) : null;\r\n\r\n\r\nconst getScoreCategory = (score, age) => {\r\n  if (age >= 16) {\r\n      // Score categories for age 16 and above\r\n      if (score >= 0 && score <= 4) {\r\n          return 'Low';\r\n      } else if (score >= 5 && score <= 6) {\r\n          return 'Medium';\r\n      } else if (score >= 7 && score <= 21) {\r\n          return 'High';\r\n      } else {\r\n          return 'Unknown';\r\n      }\r\n  } else {\r\n      // Score categories for age below 16\r\n      if (score >= 0 && score <= 2) {\r\n          return 'Low';\r\n      } else if (score >= 3 && score <= 5) {\r\n          return 'Medium';\r\n      } else if (score >= 6 && score <= 12) {\r\n          return 'High';\r\n      } else {\r\n          return 'Unknown';\r\n      }\r\n  }\r\n};\r\n\r\n  // Example usage in render or function\r\n  const totalScore = gridData.length > 0 ? calculateTotalScore(gridData[gridData.length - 1]) : 0;\r\n  // const scoreCategory = getScoreCategory(totalScore);\r\n  const scoreCategory = age !== null ? getScoreCategory(totalScore, age) : 'Unknown';\r\n  console.log(totalScore, 'totalScore');\r\n\r\n    \r\n\r\n    const handleVitalFormSubmit = () => {\r\n        \r\n        console.log(IP_DoctorWorkbenchNavigation?.RegistrationId);\r\n        \r\n        const senddata={\r\n            // ...VitalFormData,\r\n            Temperature: VitalFormData.Temperature || null,\r\n            PulseRate: VitalFormData.PulseRate || null,\r\n            SPO2: VitalFormData.SPO2 || null,\r\n            HeartRate: VitalFormData.HeartRate || null,\r\n            RespiratoryRate: VitalFormData.RespiratoryRate || null,\r\n            SBP: VitalFormData.SBP || null,\r\n            DBP: VitalFormData.DBP || null,\r\n            Height: VitalFormData.Height || null,\r\n            Weight: VitalFormData.Weight || null,\r\n            BMI: VitalFormData.BMI || null,\r\n            WC: VitalFormData.WC || null,\r\n            HC: VitalFormData.HC || null,\r\n            BSL: VitalFormData.BSL || null,\r\n            Painscore: VitalFormData.Painscore || null,\r\n            SupplementalOxygen: VitalFormData.SupplementalOxygen || '',\r\n            LevelOfConsiousness: VitalFormData.LevelOfConsiousness || '',\r\n            CapillaryRefillTime: VitalFormData.CapillaryRefillTime || '',\r\n            RegistrationId:IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n            Createdby:userRecord?.username,\r\n            Type:'Doctor'\r\n            \r\n        }\r\n\r\n        console.log(senddata,'senddata');\r\n        \r\n        axios.post(`${UrlLink}Ip_Workbench/IP_Vitals_Form_Details_Link`, senddata)\r\n        .then((res) => {\r\n            const [type, message] = [Object.keys(res.data)[0], Object.values(res.data)[0]];\r\n            dispatch({ type: 'toast', value: { message, type } });\r\n            setIsGetData(prev => !prev);\r\n            handleClear();\r\n            })\r\n            .catch((err) => console.log(err));\r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <div className='new-patient-registration-form'>\r\n                        \r\n            <div className=\"RegisFormcon_1\">\r\n              \r\n        \r\n                <div style={{ width: \"100%\", display: \"grid\", placeItems: \"center\" }}>\r\n                    <ToggleButtonGroup\r\n                        value={type}\r\n                        exclusive\r\n                        onChange={handleChange}\r\n                        aria-label=\"Platform\"\r\n                    >\r\n                        <ToggleButton\r\n                        value=\"Vital\"\r\n                        style={{\r\n                            height: \"30px\",\r\n                            width: \"100px\",\r\n                            backgroundColor:\r\n                            type === \"Vital\"\r\n                                ? \"var(--selectbackgroundcolor)\"\r\n                                : \"inherit\",\r\n                        }}\r\n                        className=\"togglebutton_container\"\r\n                        >\r\n                        Vital\r\n                        </ToggleButton>\r\n                        <ToggleButton\r\n                        value=\"NewsScore\"\r\n                        style={{\r\n                            backgroundColor:\r\n                            type === \"NewsScore\"\r\n                                ? \"var(--selectbackgroundcolor)\"\r\n                                : \"inherit\",\r\n                            width: \"100px\",\r\n                            height: \"30px\",\r\n                        }}\r\n                        className=\"togglebutton_container\"\r\n                        >\r\n                        NewsScore\r\n                        </ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </div>\r\n                {type === \"Vital\" ? (\r\n                    Object.keys(VitalFormData).map((p, index) => (\r\n                        <div className='RegisForm_1' key={p}>\r\n                        <label htmlFor={`${p}_${index}`}>\r\n                            {formatLabel(p)} <span>:</span>\r\n                        </label>\r\n                        {p === 'SupplementalOxygen' ? (\r\n                            <select\r\n                            id={`${p}_${index}`}\r\n                            name={p}\r\n                            value={VitalFormData[p]}\r\n                            onChange={HandleOnChange}\r\n                            >\r\n                            <option value=\"\">Select</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                            </select>\r\n                        ) : p === 'LevelOfConsiousness' ? (\r\n                            <select\r\n                            id={`${p}_${index}`}\r\n                            name={p}\r\n                            value={VitalFormData[p]}\r\n                            onChange={HandleOnChange}\r\n                            >\r\n                            <option value=\"\">Select</option>\r\n                            <option value=\"Alert\">Alert</option>\r\n                            <option value=\"Responsive to Voice\">V - Responsive to Voice</option>\r\n                            <option value=\"Responsive to Pain\">P - Responsive to Pain</option>\r\n                            <option value=\"Unresponsive\">U - Unresponsive</option>\r\n                            </select>\r\n                        ) : p === 'CapillaryRefillTime' ? (\r\n                            <select\r\n                            id={`${p}_${index}`}\r\n                            name={p}\r\n                            value={VitalFormData[p]}\r\n                            onChange={HandleOnChange}\r\n                            >\r\n                            <option value=\"\">Select</option>\r\n                            <option value=\"under 2 seconds\">under 2 seconds</option>\r\n                            <option value=\"3 to 4 seconds\">3-4 seconds</option>\r\n                            <option value=\"greaterthan 4 seconds\"> {`>4 seconds`}</option>\r\n                            </select>\r\n                        ) : (\r\n                            <input\r\n                            id={`${p}_${index}`}\r\n                            autoComplete='off'\r\n                            type={p === 'Date' ? 'date' : p === 'Time' ? 'time' : 'text'}\r\n                            name={p}\r\n                            value={VitalFormData[p]}\r\n                            onChange={HandleOnChange}\r\n                            />\r\n                        )}\r\n                        </div>\r\n                        \r\n                    ))\r\n                    \r\n                ) : type === \"NewsScore\" ? (\r\n                    <div style={{ display: 'flex', alignItems: 'center',marginLeft: '20%',justifyContent:'center' }}>\r\n                        {renderColorBox('minhigh')}Min High\r\n                        {renderColorBox('minmedium')}Min Medium\r\n                        {renderColorBox('minlow')}Min Low\r\n                        {renderColorBox('normal')}Normal\r\n                        {renderColorBox('maxlow')}Max Low\r\n                        {renderColorBox('maxmedium')}Max Medium\r\n                        {renderColorBox('maxhigh')}Max High\r\n                    </div>\r\n                    \r\n                ) : null}\r\n        \r\n                <br />\r\n                <br/>\r\n                \r\n                <div className=\"Main_container_Btn\">\r\n                    {IsViewMode && (\r\n                        <button onClick={handleClear}>Clear</button>\r\n                    )}\r\n                    {!IsViewMode &&  type === 'Vital' &&(\r\n                        <button onClick={handleVitalFormSubmit}>Submit</button>\r\n                    )}\r\n                </div>\r\n                <br />\r\n                {type === \"Vital\" && (\r\n                  <div style={{display:'flex',alignItems:'center',marginLeft: '0%', textAlign: 'center', marginTop: '20px' }}>\r\n                    <h2>EWS Score: {totalScore} ({scoreCategory})</h2>\r\n                  </div>\r\n                )}\r\n\r\n        \r\n                {type === \"Vital\" && gridData.length > 0 && (\r\n                    <>\r\n                    <ReactGrid columns={VitalsFormColumns} RowData={gridData} />\r\n                    \r\n                    </>\r\n                )}\r\n\r\n                {type === \"NewsScore\" && gridData.length > 0 && (\r\n                    <>\r\n                    <ReactGrid columns={columns} RowData={gridData} />\r\n                    \r\n                    </>\r\n                )}\r\n                <ToastAlert Message={toast.message} Type={toast.type} />\r\n            </div>\r\n          \r\n        </div>    \r\n      );\r\n      \r\n      \r\n}\r\n\r\n\r\nexport default IP_Vitals;\r\n\r\n"],"names":["IP_Vitals","dispatch","useDispatch","UrlLink","useSelector","state","_state$userRecord","userRecord","toast","_state$userRecord2","IP_DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","console","log","_state$userRecord3","UserData","VitalFormData","setVitalFormData","useState","Temperature","PulseRate","SPO2","HeartRate","RespiratoryRate","SBP","DBP","Height","Weight","BMI","WC","HC","BSL","Painscore","SupplementalOxygen","LevelOfConsiousness","CapillaryRefillTime","type","setType","gridData","setGridData","IsGetData","setIsGetData","IsViewMode","setIsViewMode","colorStyles","normal","minlow","maxlow","minmedium","maxmedium","minhigh","maxhigh","getColorByStatus","status","getColorStyle","renderColorBox","length","_jsxs","style","width","height","backgroundColor","display","alignItems","justifyContent","marginRight","borderRadius","boxShadow","border","fontSize","fontWeight","color","children","charAt","toUpperCase","useEffect","parsedWeight","parseFloat","parsedHeight","calculatedBMI","toFixed","prev","VitalsFormColumns","key","name","frozen","renderCell","params","_jsx","IconButton","onClick","handleView","row","VisibilityIcon","data","handleClear","axios","get","concat","RegistrationId","then","res","Array","isArray","vital_details","error","catch","err","HandleOnChange","e","value","target","formattedValue","trim","prevFormData","columns","temperature_status","textAlign","padding","spo2_status","heartrate_status","RespiratoryStatus","sbp_status","SupplementalOxygen_status","LevelOfConsiousness_Status","CapillaryRefillTime_Status","dob","DOB","age","dobDate","Date","today","getFullYear","monthDifference","getMonth","getDate","calculateAge","totalScore","reduce","total","field","scoreCategory","getScoreCategory","score","className","placeItems","ToggleButtonGroup","exclusive","onChange","event","ToggleButton","Object","keys","map","p","index","htmlFor","label","test","replace","str","id","autoComplete","marginLeft","handleVitalFormSubmit","senddata","Createdby","username","Type","post","message","values","marginTop","_Fragment","ReactGrid","RowData","ToastAlert","Message"],"sourceRoot":""}