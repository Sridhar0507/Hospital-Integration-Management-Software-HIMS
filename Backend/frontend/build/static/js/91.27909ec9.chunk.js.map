{"version":3,"file":"static/js/91.27909ec9.chunk.js","mappings":"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","sources":["DoctorWorkBench/Gynecology.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\nimport ToastAlert from '../OtherComponent/ToastContainer/ToastAlert';\r\nimport { IconButton } from '@mui/material';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport ReactGrid from '../OtherComponent/ReactGrid/ReactGrid';\r\n\r\nfunction Gynecology() {\r\n  const UrlLink = useSelector((state) => state.userRecord?.UrlLink);\r\n  const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n  const toast = useSelector((state) => state.userRecord?.toast);\r\n  const dispatch = useDispatch();\r\n  // const UsercreatePatientdata = useSelector(state => state.userRecord?.UsercreatePatientdata);\r\n  const DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.DoctorWorkbenchNavigation);\r\n\r\n  console.log(DoctorWorkbenchNavigation, 'DoctorWorkbenchNavigation');\r\n\r\n  const [formData, setFormData] = useState({\r\n    OH: \"\",\r\n    MH: \"\",\r\n    EXAMI: \"\",\r\n    PS: \"\",\r\n    PV: \"\",\r\n  });\r\n\r\n\r\n\r\n  const [gridData, setGridData] = useState([]);\r\n  const [IsGetData, setIsGetData] = useState(false)\r\n  const [IsViewMode, setIsViewMode] = useState(false)\r\n\r\n  const Gyneccolumns = [\r\n    { key: 'id', name: 'S.No', frozen: true },\r\n    { key: 'VisitId', name: 'VisitId', frozen: true },\r\n    { key: 'PrimaryDoctorId', name: 'Doctor Id', frozen: true },\r\n    { key: 'PrimaryDoctorName', name: 'Doctor Name', frozen: true },\r\n    { key: 'Date', name: 'Date', frozen: true },\r\n    { key: 'Time', name: 'Time', frozen: true },\r\n    { key: 'OH', name: 'OH' },\r\n    { key: 'MH', name: 'MH' },\r\n    { key: 'EXAMI', name: 'EXAMI' },\r\n    { key: 'PS', name: 'PS' },\r\n    { key: 'PV', name: 'PV' },\r\n    {\r\n      key: 'view',\r\n      name: 'View',\r\n      frozen: true,\r\n      renderCell: (params) => (\r\n        <IconButton onClick={() => handleView(params.row)}>\r\n          <VisibilityIcon />\r\n        </IconButton>\r\n      ),\r\n    },\r\n  ];\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    axios.get(`${UrlLink}Workbench/Workbench_Gynecology_Details`, { params: { RegistrationId: DoctorWorkbenchNavigation?.pk } })\r\n      .then((res) => {\r\n        const ress = res.data\r\n        console.log(res);\r\n        setGridData(ress)\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n  }, [IsGetData, UrlLink, DoctorWorkbenchNavigation])\r\n\r\n\r\n\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prevState => ({\r\n      ...prevState,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleView = (data) => {\r\n    setFormData({\r\n      OH: data.OH || '',\r\n      MH: data.MH || '',\r\n      EXAMI: data.EXAMI || '',\r\n      PS: data.PS || '',\r\n      PV: data.PV || '',\r\n    });\r\n    setIsViewMode(true);\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setFormData({\r\n      OH: '',\r\n      MH: '',\r\n      EXAMI: '',\r\n      PS: '',\r\n      PV: '',\r\n    });\r\n    setIsViewMode(false);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n\r\n    const filledFormData = Object.fromEntries(\r\n      Object.entries(formData).filter(([_, value]) => value.trim() !== '')\r\n    );\r\n\r\n    if (Object.keys(filledFormData).length === 0) {\r\n\r\n      dispatch({\r\n        type: 'toast',\r\n        value: { message: 'Please provide at least one field.', type: 'warn' },\r\n      });\r\n      return; // Exit the function early if no fields are filled\r\n\r\n    }\r\n    const data = {\r\n      ...filledFormData,\r\n      created_by: userRecord?.username || '',\r\n      RegistrationId: DoctorWorkbenchNavigation?.pk,\r\n\r\n    };\r\n    console.log(data, 'data ');\r\n\r\n    axios\r\n      .post(`${UrlLink}Workbench/Workbench_Gynecology_Details`, data)\r\n      .then((res) => {\r\n        const [type, message] = [Object.keys(res.data)[0], Object.values(res.data)[0]];\r\n        dispatch({ type: 'toast', value: { message, type } });\r\n        setIsGetData(prev => !prev)\r\n        handleClear();\r\n      })\r\n      .catch((err) => console.log(err));\r\n\r\n\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n      <div className=\"appointment\">\r\n        <h4\r\n          style={{\r\n            color: 'var(--labelcolor)',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            textAlign: 'start',\r\n            padding: '10px',\r\n          }}\r\n        >\r\n          Gynecology\r\n        </h4>\r\n\r\n\r\n\r\n        <div className=\"case_sheet_5con\">\r\n          {['OH', 'MH', 'EXAMI', 'PS', 'PV'].map((field, indx) => (\r\n            <div className=\"case_sheet_5con_20\" key={indx}>\r\n              <label>\r\n                {field} <span>:</span>\r\n              </label>\r\n              <textarea\r\n                id={field}\r\n                name={field}\r\n                value={formData[field]}\r\n                onChange={handleChange}\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n\r\n\r\n\r\n      </div>\r\n      <div className=\"Main_container_Btn\">\r\n\r\n\r\n\r\n        {IsViewMode && (\r\n          <button onClick={handleClear}>Clear</button>\r\n        )}\r\n        {!IsViewMode && (\r\n          <button onClick={handleSubmit}>Submit</button>\r\n        )}\r\n      </div>\r\n\r\n      {gridData.length > 0 &&\r\n        <ReactGrid columns={Gyneccolumns} RowData={gridData} />\r\n      }\r\n\r\n      <ToastAlert Message={toast.message} Type={toast.type} />\r\n\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Gynecology;\r\n\r\n"],"names":["UrlLink","useSelector","state","_state$userRecord","userRecord","_state$userRecord2","UserData","toast","_state$userRecord3","dispatch","useDispatch","DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","console","log","formData","setFormData","useState","OH","MH","EXAMI","PS","PV","gridData","setGridData","IsGetData","setIsGetData","IsViewMode","setIsViewMode","Gyneccolumns","key","name","frozen","renderCell","params","_jsx","IconButton","onClick","handleView","row","children","VisibilityIcon","useEffect","axios","get","concat","RegistrationId","pk","then","res","ress","data","catch","err","handleChange","e","value","target","prevState","handleClear","_jsxs","_Fragment","className","style","color","display","justifyContent","alignItems","textAlign","padding","map","field","indx","id","onChange","handleSubmit","filledFormData","Object","fromEntries","entries","filter","_ref","_","trim","keys","length","type","message","created_by","username","post","values","prev","ReactGrid","columns","RowData","ToastAlert","Message","Type"],"sourceRoot":""}