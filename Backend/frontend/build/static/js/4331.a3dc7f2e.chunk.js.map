{"version":3,"file":"static/js/4331.a3dc7f2e.chunk.js","mappings":"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","sources":["IP_Workbench/Nurse/IPM/IP_PatientCare.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ReactGrid from '../../../OtherComponent/ReactGrid/ReactGrid';\r\nimport axios from 'axios';\r\nimport ToastAlert from '../../../OtherComponent/ToastContainer/ToastAlert';\r\nimport { IconButton } from '@mui/material';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\n\r\n\r\n\r\nconst IP_PatientCare = () => {\r\n    const dispatch = useDispatch();\r\n    const UrlLink = useSelector(state => state.userRecord?.UrlLink);\r\n    const toast = useSelector(state => state.userRecord?.toast);\r\n    const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n    console.log(IP_DoctorWorkbenchNavigation,'IP_DoctorWorkbenchNavigation');\r\n\r\n    const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n\r\n    \r\n    const formatLabel = (label) => {\r\n\r\n        if (/[a-z]/.test(label) && /[A-Z]/.test(label) && !/\\d/.test(label)) {\r\n            return label\r\n                .replace(/([a-z])([A-Z])/g, \"$1 $2\")\r\n                .replace(/^./, (str) => str.toUpperCase());\r\n        } else {\r\n            return label;\r\n        }\r\n    };\r\n\r\n   \r\n\r\n    const [PatientCare, setPatientCare] = useState({\r\n       \r\n        PatientCareParameter: \"\",\r\n        Time:\"\",\r\n        Remarks: \"\",\r\n\r\n    });\r\n\r\n\r\n    const [gridData, setGridData] = useState([])\r\n    const [IsGetData, setIsGetData] = useState(false)\r\n\r\n    const [IsViewMode, setIsViewMode] = useState(false)\r\n  \r\n    \r\n      \r\n    const PatientCareColumns = [\r\n        {\r\n            key: 'id',\r\n            name: 'S.No',\r\n            frozen: true\r\n        },\r\n        { key: 'PrimaryDoctorName', name: 'Doctor Name',frozen: true },\r\n      \r\n        {\r\n            key: 'CurrDate',\r\n            name: 'Date',\r\n            frozen: true\r\n        },\r\n        {\r\n            key: 'CurrTime',\r\n            name: 'Time',\r\n            frozen: true\r\n        },\r\n       \r\n       \r\n       \r\n        {\r\n            key: 'view',\r\n            frozen: true,\r\n            name: 'View',\r\n            renderCell: (params) => (\r\n              <IconButton onClick={() => handleView(params.row)}>\r\n                <VisibilityIcon />\r\n              </IconButton>\r\n            ),\r\n          },\r\n        { key: 'PatientCareParameter', name: 'PatientCareParameter'},\r\n        { key: 'Time', name: 'Time'},\r\n        { key: 'Remarks', name: 'Remarks'},\r\n        \r\n        \r\n    ]\r\n\r\n     // Handle setting the form data when viewing\r\n     const handleView = (data) => {\r\n        setPatientCare({\r\n            \r\n            PatientCareParameter: data.PatientCareParameter || '',\r\n            Time: data.Time || '',\r\n            Remarks: data.Remarks || '',\r\n           \r\n            \r\n        });\r\n        setIsViewMode(true);\r\n    };\r\n    \r\n  \r\n  // Handle clearing the form and resetting the view mode\r\n  const handleClear = () => {\r\n    setPatientCare({\r\n        \r\n        PatientCareParameter: '',\r\n        Time: '',\r\n        Remarks: '',\r\n        \r\n       \r\n    });\r\n    setIsViewMode(false);\r\n};\r\n\r\n  \r\n\r\n    useEffect(() => {\r\n        axios.get(`${UrlLink}Ip_Workbench/IP_PatientCare_Details_Link`,{params:{RegistrationId:IP_DoctorWorkbenchNavigation?.RegistrationId,Type: 'Nurse'}})\r\n            .then((res) => {\r\n                const ress = res.data\r\n                console.log(ress)\r\n                setGridData(ress)\r\n    \r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            })\r\n      }, [UrlLink,IP_DoctorWorkbenchNavigation,IsGetData])\r\n    \r\n    \r\n\r\n\r\n      const HandleOnChange = (e) => {\r\n        const { name, value } = e.target;\r\n        const formattedValue = value.trim();\r\n        setPatientCare((prevFormData) => ({\r\n            ...prevFormData,\r\n            [name]: formattedValue,\r\n        }));\r\n    };\r\n\r\n\r\n    const handleSubmit = () => {\r\n        \r\n        console.log(IP_DoctorWorkbenchNavigation?.RegistrationId);\r\n        \r\n        const senddata={\r\n            ...PatientCare,\r\n            RegistrationId:IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n            Createdby:userRecord?.username,\r\n            Type:'Nurse'\r\n            \r\n        }\r\n\r\n        console.log(senddata,'senddata');\r\n        \r\n        axios.post(`${UrlLink}Ip_Workbench/IP_PatientCare_Details_Link`, senddata)\r\n        .then((res) => {\r\n            const [type, message] = [Object.keys(res.data)[0], Object.values(res.data)[0]];\r\n            dispatch({ type: 'toast', value: { message, type } });\r\n            setIsGetData(prev => !prev);\r\n            handleClear();\r\n            })\r\n        .catch((err) => console.log(err));\r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n                <div className=\"RegisFormcon_1\" >\r\n\r\n                    \r\n                    {\r\n                        Object.keys(PatientCare).map((p, index) =>\r\n                        (\r\n                            <div className='RegisForm_1' key={p}>\r\n                                <label htmlFor={`${p}_${index}`}>\r\n                                    { (\r\n                                        formatLabel(p)\r\n                                      )} \r\n                                    \r\n                                    <span>:</span>\r\n                                </label>\r\n                                {p === 'PatientCareParameter' ? (\r\n                                <select\r\n                                    id={`${p}_${index}`}\r\n                                    name={p}\r\n                                    value={PatientCare[p]}\r\n                                    onChange={HandleOnChange}\r\n                                    >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"SpongeBath\">SpongeBath</option>\r\n                                    <option value=\"OralCare\">OralCare</option>\r\n                                    <option value=\"EyeCare\">EyeCare</option>\r\n                                    <option value=\"BackCare\">BackCare</option>\r\n                                    <option value=\"ChestPhysioSuction\">ChestPhysioSuction</option>\r\n                                    <option value=\"Humidifier\">Humidifier</option>\r\n                                    <option value=\"Others\">Others</option>\r\n                                    \r\n                                </select>\r\n                            ) : p === 'Remarks' ? (\r\n                                <textarea\r\n                                    id={`${p}_${index}`}\r\n                                    name={p}\r\n                                    value={PatientCare[p]}\r\n                                    onChange={HandleOnChange}\r\n                                    placeholder='Enter your remarks here'\r\n                                />\r\n                            ):(\r\n                                <input\r\n                                id={`${p}_${index}`}\r\n                                autoComplete='off'\r\n                                type={( p === 'Time') ? 'time' : 'text'}\r\n                                name={p}\r\n                                value={PatientCare[p]}\r\n                                onChange={HandleOnChange}\r\n                                />\r\n                            )}\r\n                            </div>\r\n\r\n                        ))\r\n                    }\r\n                </div>\r\n                <div className=\"Main_container_Btn\">\r\n            \r\n                    {IsViewMode && (\r\n                        <button onClick={handleClear}>Clear</button>\r\n                    )}\r\n                    {!IsViewMode && (\r\n                        <button onClick={handleSubmit}>Submit</button>\r\n                    )}\r\n                </div>\r\n\r\n                {gridData.length >= 0 &&\r\n                    <ReactGrid columns={PatientCareColumns} RowData={gridData} />\r\n                }\r\n            \r\n            <ToastAlert Message={toast.message} Type={toast.type} />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default IP_PatientCare;\r\n\r\n\r\n"],"names":["IP_PatientCare","dispatch","useDispatch","UrlLink","useSelector","state","_state$userRecord","userRecord","toast","_state$userRecord2","IP_DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","console","log","_state$userRecord3","UserData","PatientCare","setPatientCare","useState","PatientCareParameter","Time","Remarks","gridData","setGridData","IsGetData","setIsGetData","IsViewMode","setIsViewMode","PatientCareColumns","key","name","frozen","renderCell","params","_jsx","IconButton","onClick","handleView","row","children","VisibilityIcon","data","handleClear","useEffect","axios","get","concat","RegistrationId","Type","then","res","ress","catch","err","HandleOnChange","e","value","target","formattedValue","trim","prevFormData","_jsxs","_Fragment","className","Object","keys","map","p","index","htmlFor","label","test","replace","str","toUpperCase","id","onChange","placeholder","autoComplete","type","handleSubmit","senddata","Createdby","username","post","message","values","prev","length","ReactGrid","columns","RowData","ToastAlert","Message"],"sourceRoot":""}