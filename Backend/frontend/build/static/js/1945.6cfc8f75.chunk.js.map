{"version":3,"file":"static/js/1945.6cfc8f75.chunk.js","mappings":"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","sources":["IP_Workbench/Nurse/BedtransferRecieve.jsx","../node_modules/@mui/icons-material/CheckCircle.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ReactGrid from '../../OtherComponent/ReactGrid/ReactGrid';\r\nimport Button from \"@mui/material/Button\";\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport axios from 'axios';\r\nimport ToastAlert from '../../OtherComponent/ToastContainer/ToastAlert';\r\n\r\nconst BedtransferRecieve = () => {\r\n\r\n    const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n    const [CurrentPreviousRoom, setCurrentPreviousRoom] = useState(null)\r\n    const UrlLink = useSelector(state => state.userRecord?.UrlLink);\r\n    const UserData = useSelector((state) => state.userRecord?.UserData);\r\n    const toast = useSelector(state => state.userRecord?.toast);\r\n    const [getdata, setgetdata] = useState(false)\r\n    const [Showmodel, setShowmodel] = useState({\r\n        status: false,\r\n        type: '',\r\n        RoomId: \"\",\r\n    })\r\n    const [datasforapprove, setdatasforapprove] = useState({\r\n        PatientFileRecieved: false,\r\n        MedicineTransfered: false,\r\n        AnyMedicalRecordError: false,\r\n        ConfirmationFromRelatives: false,\r\n        RelativeName: \"\",\r\n        Reason: \"\"\r\n    })\r\n    const dispatchvalue = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n        setCurrentPreviousRoom(null)\r\n        axios.get(`${UrlLink}Frontoffice/get_ip_roomdetials_for_bedtransfer_details?RegistrationId=${IP_DoctorWorkbenchNavigation?.RegistrationId}`,)\r\n            .then((res) => {\r\n                const ress = res.data;\r\n                setCurrentPreviousRoom(ress);\r\n\r\n            })\r\n            .catch((err) => {\r\n                setCurrentPreviousRoom(null);\r\n                console.log(err);\r\n            });\r\n    }, [UrlLink, IP_DoctorWorkbenchNavigation, getdata]);\r\n\r\n    const RegisterColumn = [\r\n        {\r\n            key: \"DateTime\",\r\n            name: \"DateTime\",\r\n            frozen: true\r\n        },\r\n\r\n        {\r\n            key: \"BuildingName\",\r\n            name: \"Building Name\",\r\n        },\r\n        {\r\n            key: \"BlockName\",\r\n            name: \"Block Name\",\r\n        },\r\n        {\r\n            key: \"FloorName\",\r\n            name: \"Floor Name\",\r\n        },\r\n\r\n        {\r\n            key: \"WardName\",\r\n            name: \"Ward Name\",\r\n        },\r\n        {\r\n            key: \"RoomName\",\r\n            name: \"Room Name\",\r\n        },\r\n        {\r\n            key: \"RoomNo\",\r\n            name: \"Room No\",\r\n        },\r\n        {\r\n            key: \"BedNo\",\r\n            name: \"Bed No\",\r\n        },\r\n        {\r\n            key: \"RoomId\",\r\n            name: \"Room Id\",\r\n        },\r\n\r\n\r\n    ]\r\n\r\n    const RegisterColumn1 = [\r\n        {\r\n            key: \"DateTime\",\r\n            name: \"DateTime\",\r\n            frozen: true\r\n        },\r\n        {\r\n            key: \"Status\",\r\n            name: \"Status\",\r\n            frozen: true\r\n        },\r\n\r\n        {\r\n            key: \"Action\",\r\n            name: \"Action\",\r\n            frozen: true,\r\n            width: 200,\r\n            renderCell: (params) => (\r\n                params.row.Status === 'Requested' ?\r\n                    <div style={{\r\n                        display: 'flex',\r\n                        justifyContent: 'center',\r\n                        alignItems: 'center',\r\n\r\n                    }}>\r\n                        <Button\r\n                            className=\"cell_btn\"\r\n                            onClick={() => handleapprovetransfer(params.row)}\r\n                            title='Approve the transfer request'\r\n                        >\r\n                            <CheckCircleIcon className=\"check_box_clrr_cancell\" />\r\n                        </Button>\r\n                        <Button\r\n                            className=\"cell_btn\"\r\n                            onClick={() => handlecanceltransfer(params.row)}\r\n                            title='Cancel the transfer request'\r\n                        >\r\n                            <CancelIcon className=\"check_box_clrr_cancell\" />\r\n                        </Button>\r\n                    </div>\r\n                    : 'No Action'\r\n            ),\r\n        },\r\n        {\r\n            key: \"Admitted_Date\",\r\n            name: \"In Time\",\r\n        },\r\n        {\r\n            key: \"Discharge_Date\",\r\n            name: \"Out Time\",\r\n        },\r\n\r\n\r\n        {\r\n            key: \"BuildingName\",\r\n            name: \"Building Name\",\r\n        },\r\n        {\r\n            key: \"BlockName\",\r\n            name: \"Block Name\",\r\n        },\r\n        {\r\n            key: \"FloorName\",\r\n            name: \"Floor Name\",\r\n        },\r\n\r\n        {\r\n            key: \"WardName\",\r\n            name: \"Ward Name\",\r\n        },\r\n        {\r\n            key: \"RoomName\",\r\n            name: \"Room Name\",\r\n        },\r\n        {\r\n            key: \"RoomNo\",\r\n            name: \"Room No\",\r\n        },\r\n        {\r\n            key: \"BedNo\",\r\n            name: \"Bed No\",\r\n        },\r\n        {\r\n            key: \"RoomId\",\r\n            name: \"Room Id\",\r\n        },\r\n\r\n\r\n    ]\r\n    const handleapprovetransfer = (params) => {\r\n        setShowmodel({\r\n            status: true,\r\n            type: 'Approve',\r\n            RoomId: params?.RoomId,\r\n        })\r\n        \r\n    }\r\n    const handlecanceltransfer = (params) => {\r\n        setShowmodel({\r\n            status: true,\r\n            type: 'Cancel',\r\n            RoomId: params?.RoomId,\r\n        })\r\n       \r\n    }\r\n\r\n\r\n\r\n    const handlesubmit = () => {\r\n        const exist = Object.keys(datasforapprove).filter(p => Showmodel.status === 'Cancel' ?\r\n            p === 'Reason' :\r\n            datasforapprove.AnyMedicalRecordError ?\r\n                p !== 'AnyMedicalRecordError' : !['AnyMedicalRecordError', 'Reason'].includes(p)\r\n        ).filter(f => !datasforapprove[f])\r\n        if (exist.length !== 0) {\r\n            dispatchvalue({\r\n                type: 'toast',\r\n                value: { message: `Please fill the required fields : ${exist.join(' , ')}`, type: 'warn' },\r\n            });\r\n        } else {\r\n            const approve = window.confirm('Are You sure, need to approve the request')\r\n            if (approve) {\r\n                const data = {\r\n                    RegistrationId: IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n                    Type: Showmodel.type,\r\n                    RoomId: Showmodel?.RoomId,\r\n                    ...datasforapprove,\r\n                    createdby: UserData?.username\r\n                }\r\n\r\n\r\n                axios.post(`${UrlLink}Frontoffice/bed_transfer_approve_cancel_details`, data)\r\n                    .then((res) => {\r\n                        const resres = res.data;\r\n                        let typp = Object.keys(resres)[0];\r\n                        let mess = Object.values(resres)[0];\r\n                        const tdata = {\r\n                            message: mess,\r\n                            type: typp,\r\n                        };\r\n                        setgetdata(prev => !prev)\r\n                        dispatchvalue({ type: 'toast', value: tdata });\r\n                        setShowmodel({\r\n                            status: false,\r\n                            type: '',\r\n                            RoomId: \"\",\r\n                        })\r\n                        setdatasforapprove({\r\n                            PatientFileRecieved: false,\r\n                            MedicineTransfered: false,\r\n                            AnyMedicalRecordError: false,\r\n                            ConformationFromRelatives: false,\r\n                            RelativeName: \"\",\r\n                            Reason: \"\"\r\n                        })\r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err);\r\n\r\n                    })\r\n            }\r\n        }\r\n\r\n    }\r\n    const formatLabel = (label) => {\r\n\r\n        if (/[a-z]/.test(label) && /[A-Z]/.test(label) && !/\\d/.test(label)) {\r\n            return label\r\n                .replace(/([a-z])([A-Z])/g, \"$1 $2\")\r\n                .replace(/^./, (str) => str.toUpperCase());\r\n        } else {\r\n            return label;\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className='new-patient-registration-form'>\r\n                <br />\r\n            <div className='DivCenter_container'>Bed Request Approve / Cancel</div>\r\n\r\n                <br />\r\n                <div className='DivCenter_container'> current Room </div>\r\n                {\r\n                    CurrentPreviousRoom?.ip_register_data &&\r\n                    <ReactGrid columns={RegisterColumn} RowData={CurrentPreviousRoom?.ip_register_data} />\r\n                }\r\n                <br />\r\n\r\n\r\n                <div className='DivCenter_container'> Requested Room </div>\r\n                <br />\r\n                <ReactGrid columns={RegisterColumn1} RowData={CurrentPreviousRoom?.Roomsdata} />\r\n\r\n\r\n            </div>\r\n\r\n            {\r\n                Showmodel?.status && (\r\n                    <div className=\"modal-container\" onClick={() => setShowmodel(prev => ({\r\n                        ...prev,\r\n                        status: false\r\n                    }))}>\r\n                        <div className=\"App_Cal_modal\" onClick={(e) => e.stopPropagation()}>\r\n                            <div className=\"common_center_tag\">\r\n                                <span>{Showmodel.type} Request</span>\r\n                            </div>\r\n                            <br />\r\n                            <div className=\"RegisFormcon_1\">\r\n                                {\r\n                                    Object.keys(datasforapprove).filter(p => Showmodel.type === 'Cancel' ? p === 'Reason' : datasforapprove.AnyMedicalRecordError ? p : p !== 'Reason').map((field, indx) => (\r\n                                        <div className=\"RegisForm_1\" key={indx}>\r\n                                            <label htmlFor={`${field}_${indx}`}>{formatLabel(field)}<span>:</span> </label>\r\n                                            {\r\n                                                field === 'Reason' ?\r\n                                                    <textarea\r\n                                                        id={`${field}_${indx}`}\r\n                                                        autoComplete='off'\r\n                                                        name={field}\r\n                                                        required\r\n                                                        value={datasforapprove[field]}\r\n                                                        onChange={(e) => setdatasforapprove(prevState => ({\r\n                                                            ...prevState,\r\n                                                            [field]: e.target.value\r\n                                                        }))}\r\n                                                    />\r\n                                                    : field === 'RelativeName' ?\r\n                                                        <input\r\n                                                            id={`${field}_${indx}`}\r\n                                                            autoComplete='off'\r\n                                                            type={'text'}\r\n                                                            name={field}\r\n                                                            value={datasforapprove[field]}\r\n                                                            onChange={(e) => setdatasforapprove(prevState => ({\r\n                                                                ...prevState,\r\n                                                                [field]: e.target.value\r\n                                                            }))}\r\n                                                        />\r\n                                                        :\r\n                                                        <div style={{ display: 'flex', justifyContent: 'space-between', width: '150px' }}>\r\n                                                            <input\r\n                                                                id={`${field}_check_yes`}\r\n                                                                type=\"checkbox\"\r\n                                                                name={field}\r\n                                                                style={{ width: '15px' }}\r\n                                                                checked={datasforapprove[field]}\r\n                                                                onChange={(e) => setdatasforapprove(prevState => ({\r\n                                                                    ...prevState,\r\n                                                                    [field]: !prevState[field]\r\n                                                                }))}\r\n                                                            />\r\n                                                        </div>\r\n                                              \r\n                                            }\r\n\r\n                                        </div>\r\n                                    ))\r\n                                }\r\n                                <div className=\"Main_container_Btn\">\r\n                                    <button onClick={handlesubmit}>\r\n                                        Save\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            <ToastAlert Message={toast.message} Type={toast.type} />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BedtransferRecieve;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m-2 15-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8z\"\n}), 'CheckCircle');"],"names":["BedtransferRecieve","IP_DoctorWorkbenchNavigation","useSelector","state","_state$Frontoffice","Frontoffice","CurrentPreviousRoom","setCurrentPreviousRoom","useState","UrlLink","_state$userRecord","userRecord","UserData","_state$userRecord2","toast","_state$userRecord3","getdata","setgetdata","Showmodel","setShowmodel","status","type","RoomId","datasforapprove","setdatasforapprove","PatientFileRecieved","MedicineTransfered","AnyMedicalRecordError","ConfirmationFromRelatives","RelativeName","Reason","dispatchvalue","useDispatch","useEffect","axios","get","concat","RegistrationId","then","res","ress","data","catch","err","console","log","RegisterColumn1","key","name","frozen","width","renderCell","params","row","Status","_jsxs","style","display","justifyContent","alignItems","children","_jsx","Button","className","onClick","handleapprovetransfer","title","CheckCircleIcon","handlecanceltransfer","CancelIcon","_Fragment","ip_register_data","ReactGrid","columns","RowData","Roomsdata","prev","e","stopPropagation","Object","keys","filter","p","map","field","indx","htmlFor","label","test","replace","str","toUpperCase","id","autoComplete","required","value","onChange","prevState","target","checked","handlesubmit","exist","includes","f","length","message","join","window","confirm","Type","createdby","username","post","resres","typp","tdata","values","ConformationFromRelatives","ToastAlert","Message","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d"],"sourceRoot":""}