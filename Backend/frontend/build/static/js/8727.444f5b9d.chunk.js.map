{"version":3,"file":"static/js/8727.444f5b9d.chunk.js","mappings":"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","sources":["FrontOffice/RegistrationList/IpHandoverRoomDetials.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { IoBedOutline } from \"react-icons/io5\";\r\nimport RoomDetialsSelect from '../Registration/RoomDetialsSelect';\r\nimport axios from 'axios';\r\nimport ReactGrid from '../../OtherComponent/ReactGrid/ReactGrid';\r\nimport ToastAlert from '../../OtherComponent/ToastContainer/ToastAlert';\r\n\r\nconst IpHandoverRoomDetials = () => {\r\n    const Registeredit = useSelector(state => state.Frontoffice?.Registeredit);\r\n    const RegisterRoomShow = useSelector(state => state.Frontoffice?.RegisterRoomShow);\r\n    const SelectRoomRegister = useSelector(state => state.Frontoffice?.SelectRoomRegister);\r\n    const UrlLink = useSelector(state => state.userRecord?.UrlLink);\r\n    const toast = useSelector((state) => state.userRecord?.toast);\r\n    const UserData = useSelector((state) => state.userRecord?.UserData);\r\n\r\n    const [getdata, setgetdata] = useState(false)\r\n    const [RoomdeditalsShow, setRoomdeditalsShow] = useState({\r\n        BuildingId: null,\r\n        BuildingName: \"\",\r\n        BlockId: null,\r\n        BlockName: \"\",\r\n        FloorId: null,\r\n        FloorName: \"\",\r\n        WardId: null,\r\n        WardName: \"\",\r\n        RoomId: null,\r\n        RoomName: \"\",\r\n        RoomNo: \"\",\r\n        BedNo: \"\",\r\n        id: \"\",\r\n    })\r\n    const [roomdataforregistered, setroomdataforregistered] = useState(null)\r\n    const dispatchvalue = useDispatch();\r\n    const formatLabel = (label) => {\r\n\r\n        if (/[a-z]/.test(label) && /[A-Z]/.test(label) && !/\\d/.test(label)) {\r\n            return label\r\n                .replace(/([a-z])([A-Z])/g, \"$1 $2\")\r\n                .replace(/^./, (str) => str.toUpperCase());\r\n        } else {\r\n            return label;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (Object.keys(SelectRoomRegister).length !== 0) {\r\n\r\n            setRoomdeditalsShow({\r\n                BuildingId: SelectRoomRegister.BuildingId,\r\n                BuildingName: SelectRoomRegister.BuildingName,\r\n                BlockId: SelectRoomRegister.BlockId,\r\n                BlockName: SelectRoomRegister.BlockName,\r\n                FloorId: SelectRoomRegister.FloorId,\r\n                FloorName: SelectRoomRegister.FloorName,\r\n                WardId: SelectRoomRegister.WardId,\r\n                WardName: SelectRoomRegister.WardName,\r\n                RoomId: SelectRoomRegister.RoomId,\r\n                RoomName: SelectRoomRegister.RoomName,\r\n                RoomNo: SelectRoomRegister.RoomNo,\r\n                BedNo: SelectRoomRegister.BedNo,\r\n                id: SelectRoomRegister.id,\r\n            })\r\n\r\n        }\r\n\r\n    }, [SelectRoomRegister])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        axios.get(`${UrlLink}Frontoffice/get_ip_roomdetials_before_handover_details?RegistrationId=${Registeredit?.RegistrationId}`,)\r\n            .then((res) => {\r\n                const ress = res.data;\r\n                setroomdataforregistered(ress);\r\n\r\n            })\r\n            .catch((err) => {\r\n                setroomdataforregistered(null);\r\n                console.log(err);\r\n            });\r\n    }, [UrlLink, Registeredit, getdata]);\r\n\r\n    const RegisterColumn = [\r\n        {\r\n            key: \"DateTime\",\r\n            name: \"DateTime\",\r\n            frozen: true\r\n        },\r\n\r\n        {\r\n            key: \"BuildingName\",\r\n            name: \"Building Name\",\r\n        },\r\n        {\r\n            key: \"BlockName\",\r\n            name: \"Block Name\",\r\n        },\r\n        {\r\n            key: \"FloorName\",\r\n            name: \"Floor Name\",\r\n        },\r\n\r\n        {\r\n            key: \"WardName\",\r\n            name: \"Ward Name\",\r\n        },\r\n        {\r\n            key: \"RoomName\",\r\n            name: \"Room Name\",\r\n        },\r\n        {\r\n            key: \"RoomNo\",\r\n            name: \"Room No\",\r\n        },\r\n        {\r\n            key: \"BedNo\",\r\n            name: \"Bed No\",\r\n        },\r\n        {\r\n            key: \"RoomId\",\r\n            name: \"Room Id\",\r\n        },\r\n\r\n\r\n    ]\r\n    const handlesubmit = () => {\r\n        if (RoomdeditalsShow?.id) {\r\n            const submitdata = {\r\n                RegistrationId: Registeredit?.RegistrationId,\r\n                RoomId: RoomdeditalsShow?.id,\r\n                createdby: UserData?.username\r\n            }\r\n            console.log(submitdata);\r\n\r\n            axios.post(`${UrlLink}Frontoffice/post_ip_roomdetials_before_handover_details`, submitdata)\r\n                .then(res => {\r\n                    console.log(res.data);\r\n                    const resres = res.data;\r\n                    let typp = Object.keys(resres)[0];\r\n                    let mess = Object.values(resres)[0];\r\n                    const tdata = {\r\n                        message: mess,\r\n                        type: typp,\r\n                    };\r\n                    setgetdata(prev => !prev)\r\n                    dispatchvalue({ type: 'toast', value: tdata });\r\n                    setRoomdeditalsShow({\r\n                        BuildingId: null,\r\n                        BuildingName: \"\",\r\n                        BlockId: null,\r\n                        BlockName: \"\",\r\n                        FloorId: null,\r\n                        FloorName: \"\",\r\n                        WardId: null,\r\n                        WardName: \"\",\r\n                        RoomId: null,\r\n                        RoomName: \"\",\r\n                        RoomNo: \"\",\r\n                        BedNo: \"\",\r\n                        RoomId: \"\",\r\n                    })\r\n                    dispatchvalue({ type: 'SelectRoomRegister', value: {} })\r\n\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n        } else {\r\n            const tdata = {\r\n                message: 'Please select a Room To change',\r\n                type: 'warn',\r\n            };\r\n            dispatchvalue({ type: 'toast', value: tdata });\r\n\r\n        }\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <div className='new-patient-registration-form'>\r\n                <div className='DivCenter_container'>Selected Room on Registration </div>\r\n                <br />\r\n                {\r\n                    roomdataforregistered?.ip_register_data &&\r\n                    <ReactGrid columns={RegisterColumn} RowData={roomdataforregistered?.ip_register_data} />\r\n                }\r\n\r\n                <br />\r\n                <div className='DivCenter_container'>Change Room  </div>\r\n                <div className='DivCenter_container' >\r\n                    <IoBedOutline className='HotelIcon_registration' onClick={() => { dispatchvalue({ type: 'RegisterRoomShow', value: { type: 'IP', val: true } }) }} />\r\n                </div>\r\n\r\n                <br />\r\n                <div className=\"RegisFormcon_1\" >\r\n                    {\r\n                        ['BuildingName', 'BlockName', 'FloorName', 'WardName', 'RoomName', 'RoomNo', 'BedNo'].map((field, indx) => (\r\n                            <div className=\"RegisForm_1\" key={indx}>\r\n                                <label htmlFor={`${field}_${indx}`}>\r\n                                    {formatLabel(field)}\r\n                                    <span>:</span>\r\n                                </label>\r\n                                <input\r\n                                    type='text'\r\n                                    value={RoomdeditalsShow[field]}\r\n                                    disabled\r\n                                />\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n                <div className=\"Main_container_Btn\">\r\n                    <button onClick={handlesubmit}>\r\n                        Change\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {\r\n                roomdataforregistered && roomdataforregistered?.Roomsdata?.length !== 0 &&\r\n                <ReactGrid columns={RegisterColumn} RowData={roomdataforregistered?.Roomsdata} />\r\n\r\n            }\r\n\r\n            {\r\n                RegisterRoomShow.val &&\r\n                <RoomDetialsSelect />\r\n            }\r\n            <ToastAlert Message={toast.message} Type={toast.type} />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default IpHandoverRoomDetials;"],"names":["IpHandoverRoomDetials","_roomdataforregistere","Registeredit","useSelector","state","_state$Frontoffice","Frontoffice","RegisterRoomShow","_state$Frontoffice2","SelectRoomRegister","_state$Frontoffice3","UrlLink","_state$userRecord","userRecord","toast","_state$userRecord2","UserData","_state$userRecord3","getdata","setgetdata","useState","RoomdeditalsShow","setRoomdeditalsShow","BuildingId","BuildingName","BlockId","BlockName","FloorId","FloorName","WardId","WardName","RoomId","RoomName","RoomNo","BedNo","id","roomdataforregistered","setroomdataforregistered","dispatchvalue","useDispatch","useEffect","Object","keys","length","axios","get","concat","RegistrationId","then","res","ress","data","catch","err","console","log","RegisterColumn","key","name","frozen","_jsxs","_Fragment","children","className","_jsx","ip_register_data","ReactGrid","columns","RowData","IoBedOutline","onClick","type","value","val","map","field","indx","htmlFor","label","test","replace","str","toUpperCase","disabled","handlesubmit","submitdata","createdby","username","post","resres","typp","tdata","message","values","prev","Roomsdata","RoomDetialsSelect","ToastAlert","Message","Type"],"sourceRoot":""}