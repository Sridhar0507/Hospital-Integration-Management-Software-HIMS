{"version":3,"file":"static/js/8237.edf202ed.chunk.js","mappings":"+NASA,MAkXA,EAlXwBA,KACpB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,KAAYC,IAAK,IAAAC,EAAA,OAAoB,QAApBA,EAAID,EAAME,kBAAU,IAAAD,OAAA,EAAhBA,EAAkBH,OAAO,IACxDK,GAAQJ,EAAAA,EAAAA,KAAYC,IAAK,IAAAI,EAAA,OAAoB,QAApBA,EAAIJ,EAAME,kBAAU,IAAAE,OAAA,EAAhBA,EAAkBD,KAAK,IACpDE,GAA+BN,EAAAA,EAAAA,KAAYC,IAAK,IAAAM,EAAA,OAAqB,QAArBA,EAAIN,EAAMO,mBAAW,IAAAD,OAAA,EAAjBA,EAAmBD,4BAA4B,IACnGH,GAAaH,EAAAA,EAAAA,KAAYC,IAAK,IAAAQ,EAAA,OAAoB,QAApBA,EAAIR,EAAME,kBAAU,IAAAM,OAAA,EAAhBA,EAAkBC,QAAQ,KAE3DC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,CAC3CC,KAAM,GACNC,KAAM,GACNC,WAAY,GACZC,gBAAiB,GACjBC,eAAgB,KAChBC,QAAQ,EACRC,WAAY,MAGTC,EAAmBC,IAAwBT,EAAAA,EAAAA,UAAS,KACpDU,EAAwBC,IAA6BX,EAAAA,EAAAA,UAAS,CAAC,IAC/DY,EAAUC,IAAeb,EAAAA,EAAAA,UAAS,KAClCc,EAAWC,IAAgBf,EAAAA,EAAAA,WAAS,IACpCgB,EAAYC,IAAiBjB,EAAAA,EAAAA,WAAS,GAEvCkB,EAAoBC,IACtB,GAAIA,EAAS,CACT,IAAIC,EAAQ,CACRC,QAAQ,EACRC,QAAS,KACTC,KAAM,aAEN,CAAC,yBAA0B,yBAAyBC,SAAgB,OAAPL,QAAO,IAAPA,OAAO,EAAPA,EAASM,MAAM,KAAK,IACjFL,EAAQ,CACJC,QAAQ,EACRC,QAASH,EACTI,KAAM,cAEwB,2BAApB,OAAPJ,QAAO,IAAPA,OAAO,EAAPA,EAASM,MAAM,KAAK,IAC3BL,EAAQ,CACJC,QAAQ,EACRC,QAASH,EACTI,KAAM,aAEwB,iCAApB,OAAPJ,QAAO,IAAPA,OAAO,EAAPA,EAASM,MAAM,KAAK,MAC3BL,EAAQ,CACJC,QAAQ,EACRC,QAASH,EACTI,KAAM,oBAIdvC,EAAS,CAAEuC,KAAM,WAAYG,MAAON,GACxC,KAAO,CAKHpC,EAAS,CAAEuC,KAAM,QAASG,MAJZ,CACVC,QAAS,4BACTJ,KAAM,SAGd,GAEEK,EAAqB,CACvB,CAAEC,IAAK,KAAMC,KAAM,OAAQC,QAAQ,GACnC,CAAEF,IAAK,oBAAqBC,KAAM,cAAeC,QAAQ,GACzD,CAAEF,IAAK,OAAQC,KAAM,OAAQC,QAAQ,GACrC,CAAEF,IAAK,OAAQC,KAAM,OAAQC,QAAQ,GACrC,CAAEF,IAAK,kBAAmBC,KAAM,mBAChC,CAAED,IAAK,aAAcC,KAAM,cAC3B,CACID,IAAK,iBACLC,KAAM,iBACNE,WAAaC,IACTC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,UAAU,WAAWC,QAASA,IAAMnB,EAAiBe,EAAOK,IAAIjC,gBAAgBkC,UACxFL,EAAAA,EAAAA,KAACM,EAAAA,EAAc,OAI3B,CACIX,IAAK,OACLE,QAAQ,EACRD,KAAM,OACNE,WAAaC,IACTC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACE,QAASA,IAAMI,EAAWR,EAAOK,KAAKC,UAC9CL,EAAAA,EAAAA,KAACM,EAAAA,EAAc,QAMzBC,EAAcC,IAChB,MAAMC,EAAeD,EAAKvC,WACpByC,EAAsBlC,EAAuBiC,IAAiB,GACpEhC,EAA0B,IAAKD,EAAwB,CAACiC,GAAeC,IAEvE7C,EAAe,CACXE,KAAMyC,EAAKzC,MAAQ,GACnBC,KAAMwC,EAAKxC,MAAQ,GACnBC,WAAYuC,EAAKvC,YAAc,GAC/BC,gBAAiBsC,EAAKtC,iBAAmB,GACzCC,eAAgBqC,EAAKrC,gBAAkB,KACvCC,OAAwB,SAAhBoC,EAAKpC,SAAqC,IAAhBoC,EAAKpC,SAAmB,EAC1DC,WAAYmC,EAAKnC,YAAc,KAGnCU,GAAc,EAAK,EAGjB4B,EAAcA,KAChB9C,EAAe,CACXE,KAAM,GACNC,KAAM,GACNC,WAAY,GACZC,gBAAiB,GACjBC,eAAgB,KAChBC,QAAQ,EACRC,WAAY,KAEhBU,GAAc,EAAM,GAGxB6B,EAAAA,EAAAA,YAAU,KACNC,EAAAA,EAAMC,IAAI,GAADC,OAAI/D,EAAO,qCACfgE,MAAMC,IACH,MAAMC,EAAcD,EAAIT,KAGlBW,EAAcD,EAAYE,QAAO,CAACC,EAAKC,KACpCD,EAAIE,MAAKC,GAAQA,EAAKhC,QAAU8B,EAAQG,gBACzCJ,EAAIK,KAAK,CAAEC,MAAOL,EAAQrD,WAAYuB,MAAO8B,EAAQG,eAElDJ,IACR,IAEH9C,EAAqB4C,GAGrB,MAAMS,EAA2BT,EAAYC,QAAO,CAACC,EAAKQ,KACtD,MAAMC,EAAuBZ,EACxBa,QAAOT,GAAWA,EAAQG,eAAiBI,EAAWrC,QACtDwC,KAAIV,IAAO,CAAOK,MAAOL,EAAQW,iBAAkBzC,MAAO8B,EAAQW,qBAGvE,OADAZ,EAAIQ,EAAWrC,OAASsC,EACjBT,CAAG,GACX,CAAC,GAEJ5C,EAA0BmD,EAAyB,IAEtDM,OAAOC,GAAQC,QAAQC,IAAIF,IAAK,GACtC,CAACnF,KAEJ4D,EAAAA,EAAAA,YAAU,KAC0B,OAA5BrD,QAA4B,IAA5BA,GAAAA,EAA8B+E,gBAC9BzB,EAAAA,EAAMC,IAAI,GAADC,OAAI/D,EAAO,4CAA4C,CAC5D+C,OAAQ,CAAEuC,eAA4C,OAA5B/E,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8B+E,kBAE3DtB,MAAMC,IACHtC,EAAYsC,EAAIT,KAAK,IAExB0B,OAAOC,GAAQC,QAAQC,IAAIF,IAChC,GACD,CAACnF,EAASO,EAA8BqB,IAE3C,MAAM2D,EAA2BC,IAC7B,MAAM,GAAEC,EAAE,MAAEjD,EAAK,KAAEH,EAAI,QAAEqD,GAAYF,EAAEG,OAEvC,GAAW,eAAPF,EAAqB,CAErB,MAAM/B,EAAsBlC,EAAuBgB,IAAU,GAC7D3B,GAAe+E,IAAI,IACZA,EACH,CAACH,GAAKjD,EACNtB,gBAAiB,OAErBO,GAA0BoE,IAAW,IAC9BA,EACH,CAACrD,GAAQkB,KAEjB,MACI7C,GAAe+E,IAAI,IACZA,EACH,CAACH,GAAc,aAATpD,EAAsBqD,EAAUlD,KAE9C,EAGEsD,EAAgCN,IAClC,MAAM,KAAE5C,EAAI,MAAEmD,GAAUP,EAAEG,OAG1B,GAAII,GAASA,EAAMC,OAAS,EAAG,CAC3B,MAAMC,EAAiBF,EAAM,GAIvBG,EAAU,QAChB,GAFqB,CAAC,kBAAmB,aAAc,aAErC5D,SAAS2D,EAAe5D,OAAiC,KAAxB4D,EAAe5D,KAO3D,GAAI4D,EAAeE,KAAOD,EAAS,CAMtCpG,EAAS,CAAEuC,KAAM,QAASG,MAJZ,CACVC,QAAS,sCACTJ,KAAM,SAGd,KAAO,CACH,MAAM+D,EAAS,IAAIC,WACnBD,EAAOE,OAAS,KACZzF,GAAe+E,IAAI,IACZA,EACH,CAAChD,GAAOwD,EAAOG,UAChB,EAEPH,EAAOI,cAAcP,EACzB,KAvB+E,CAM3EnG,EAAS,CAAEuC,KAAM,QAASG,MAJZ,CACVC,QAAS,6DACTJ,KAAM,SAGd,CAiBJ,KAAO,CAMHvC,EAAS,CAAEuC,KAAM,QAASG,MAJZ,CACVC,QAAS,oDACTJ,KAAM,SAGd,GA0CJ,OACIoE,EAAAA,EAAAA,MAAA,OAAKvD,UAAU,gCAA+BG,SAAA,EAC1CL,EAAAA,EAAAA,KAAA,UACAyD,EAAAA,EAAAA,MAAA,OAAKvD,UAAU,gBAAeG,SAAA,EAC1BL,EAAAA,EAAAA,KAAA,OAAKE,UAAU,oBAAmBG,UAC9BL,EAAAA,EAAAA,KAAA,MAAAK,SAAI,4BAERL,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,OAAKE,UAAU,iBAAgBG,SAC1B,CACG,CAAEsB,MAAO,OAAQc,GAAI,OAAQpD,KAAM,QACnC,CAAEsC,MAAO,OAAQc,GAAI,OAAQpD,KAAM,QACnC,CAAEsC,MAAO,aAAcc,GAAI,aAAcpD,KAAM,SAAUqE,QAASpF,GAClE,CAAEqD,MAAO,kBAAmBc,GAAI,kBAAmBpD,KAAM,SAAUqE,QAASlF,EAAuBZ,EAAYK,aAAe,IAC9H,CAAE0D,MAAO,SAAUc,GAAI,SAAUpD,KAAM,YACvC,CAAEsC,MAAO,aAAcc,GAAI,aAAcpD,KAAM,QAC/C,CAAEsC,MAAO,iBAAkBc,GAAI,iBAAkBpD,KAAM,SACzD2C,KAAK2B,IACHF,EAAAA,EAAAA,MAAA,OAAKvD,UAAU,cAAaG,SAAA,EACxBoD,EAAAA,EAAAA,MAAA,SAAOG,QAASD,EAAMlB,GAAGpC,SAAA,CACpBsD,EAAMhC,MAAM,KAAC3B,EAAAA,EAAAA,KAAA,QAAAK,SAAM,SAER,WAAfsD,EAAMtE,MACHoE,EAAAA,EAAAA,MAAA,UACIhB,GAAIkB,EAAMlB,GACV7C,KAAM+D,EAAMlB,GACZoB,SAAUtB,EACV/C,MAAO5B,EAAY+F,EAAMlB,KAAO,GAChCqB,UAAQ,EACRC,SAAUjF,EAAWuB,SAAA,EAErBoD,EAAAA,EAAAA,MAAA,UAAQjE,MAAM,GAAEa,SAAA,CAAC,UAAQsD,EAAMhC,SAC9BqC,MAAMC,QAAQN,EAAMD,UAAYC,EAAMD,QAAQV,OAAS,EACpDW,EAAMD,QAAQ1B,KAAKkC,IACflE,EAAAA,EAAAA,KAAA,UAA2BR,MAAO0E,EAAO1E,MAAMa,SAC1C6D,EAAOvC,OADCuC,EAAO1E,UAKxBQ,EAAAA,EAAAA,KAAA,UAAQ+D,UAAQ,EAAA1D,SAAC,4BAGZ,mBAAbsD,EAAMlB,IACNgB,EAAAA,EAAAA,MAAA,OAAKU,MAAO,CAAEC,QAAS,OAAQC,WAAY,UAAWhE,SAAA,EAClDL,EAAAA,EAAAA,KAAA,SACIX,KAAK,OACLO,KAAM+D,EAAMlB,GACZ6B,OAAO,yCACPR,UAAQ,EACRrB,GAAE,GAAA1B,OAAK4C,EAAMlB,GAAE,KAAA1B,OAAI4C,EAAMlB,IACzB8B,aAAa,MACbV,SAAUf,EACVqB,MAAO,CAAEC,QAAS,WAEtBX,EAAAA,EAAAA,MAAA,OAAKU,MAAO,CAAEK,MAAO,QAASJ,QAAS,OAAQK,eAAgB,gBAAiBpE,SAAA,EAC5EL,EAAAA,EAAAA,KAAA,SACI4D,QAAO,GAAA7C,OAAK4C,EAAMlB,GAAE,KAAA1B,OAAI4C,EAAMlB,IAC9BvC,UAAU,yCAAwCG,SACrD,iBAGDL,EAAAA,EAAAA,KAAA,UACIE,UAAU,cACVC,QAASA,IAAMnB,EAAiBpB,EAAYO,gBAAgBkC,SAC/D,gBAMTL,EAAAA,EAAAA,KAAA,SACIX,KAAMsE,EAAMtE,KACZoD,GAAIkB,EAAMlB,GACV7C,KAAM+D,EAAMlB,GACZoB,SAAUtB,EACV/C,MAAsB,SAAfmE,EAAMtE,KAAkBzB,EAAY+F,EAAMlB,KAAO,QAAKiC,EAC7DZ,SAAyB,aAAfH,EAAMtE,KAChBqD,QAAwB,aAAfiB,EAAMtE,KAAsBzB,EAAY+F,EAAMlB,MAAO,OAAQiC,EACtEC,SAAU7F,GAA6B,SAAf6E,EAAMtE,SA5DRsE,EAAMlB,YAoEpDzC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,qBAAoBG,SAC9BvB,GACGkB,EAAAA,EAAAA,KAAA,UAAQG,QAASQ,EAAYN,SAAC,WAE9BL,EAAAA,EAAAA,KAAA,UAAQG,QAjIHyE,UACjB,MAAMC,EAAW,IAAIC,SACrB1C,QAAQC,IAAIyC,SAAS,YAGrBD,EAASE,OAAO,OAAQnH,EAAYG,MACpC8G,EAASE,OAAO,OAAQnH,EAAYI,MACpC6G,EAASE,OAAO,aAAcnH,EAAYK,YAC1C4G,EAASE,OAAO,kBAAmBnH,EAAYM,iBAC/C2G,EAASE,OAAO,SAAUnH,EAAYQ,QACtCyG,EAASE,OAAO,aAAcnH,EAAYS,YAGtCT,EAAYO,gBACZ0G,EAASE,OAAO,iBAAkBnH,EAAYO,gBAGlDiE,QAAQC,IAAIzE,EAAYO,eAAe,kBAEvC0G,EAASE,OAAO,iBAA8C,OAA5BxH,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8B+E,gBAChEuC,EAASE,OAAO,YAAuB,OAAV3H,QAAU,IAAVA,OAAU,EAAVA,EAAY4H,UAEzC,IACI,MAAMC,QAAiBpE,EAAAA,EAAMqE,KAAK,GAADnE,OAAI/D,EAAO,4CAA4C6H,EAAS,CAC7FM,QAAS,CACL,eAAgB,0BAGjB9F,EAAMI,GAAW,CAAC2F,OAAOC,KAAKJ,EAASzE,MAAM,GAAI4E,OAAOE,OAAOL,EAASzE,MAAM,IACrF1D,EAAS,CAAEuC,KAAM,QAASG,MAAO,CAAEC,UAASJ,UAC5CR,GAAa+D,IAASA,IACtBjC,GACJ,CAAE,MAAO4E,GACLnD,QAAQmD,MAAMA,EAClB,GA+F0ClF,SAAC,aAItC3B,EAASsE,OAAS,IACfhD,EAAAA,EAAAA,KAACwF,EAAAA,EAAS,CAACC,QAAS/F,EAAoBgG,QAAShH,KAGrDsB,EAAAA,EAAAA,KAAC2F,EAAAA,EAAU,CAACC,QAASvI,EAAMoC,QAASoG,KAAMxI,EAAMgC,QAChDW,EAAAA,EAAAA,KAAC8F,EAAAA,EAAc,MACb,C","sources":["IP_Workbench/Nurse/IP_ConsentForms.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ReactGrid from '../../OtherComponent/ReactGrid/ReactGrid';\r\nimport axios from 'axios';\r\nimport ToastAlert from '../../OtherComponent/ToastContainer/ToastAlert';\r\nimport { IconButton } from '@mui/material';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport ModelContainer from '../../OtherComponent/ModelContainer/ModelContainer';\r\n\r\nconst IP_ConsentForms = () => {\r\n    const dispatch = useDispatch();\r\n    const UrlLink = useSelector(state => state.userRecord?.UrlLink);\r\n    const toast = useSelector(state => state.userRecord?.toast);\r\n    const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n    const userRecord = useSelector(state => state.userRecord?.UserData);\r\n\r\n    const [ConsentForm, setConsentForm] = useState({\r\n        Date: \"\",\r\n        Time: \"\",\r\n        Department: \"\",\r\n        ConsentFormName: \"\",\r\n        ChooseDocument: null,\r\n        ChkBox: false,\r\n        SisterName: \"\",\r\n    });\r\n\r\n    const [departmentOptions, setDepartmentOptions] = useState([]);\r\n    const [consentFormNameOptions, setConsentFormNameOptions] = useState({});\r\n    const [gridData, setGridData] = useState([]);\r\n    const [IsGetData, setIsGetData] = useState(false);\r\n    const [IsViewMode, setIsViewMode] = useState(false);\r\n   \r\n    const Selectedfileview = (fileval) => {\r\n        if (fileval) {\r\n            let tdata = {\r\n                Isopen: false,\r\n                content: null,\r\n                type: \"image/jpg\",\r\n            };\r\n            if ([\"data:image/jpeg;base64\", \"data:image/jpg;base64\"].includes(fileval?.split(\",\")[0])) {\r\n                tdata = {\r\n                    Isopen: true,\r\n                    content: fileval,\r\n                    type: \"image/jpeg\",\r\n                };\r\n            } else if (fileval?.split(\",\")[0] === \"data:image/png;base64\") {\r\n                tdata = {\r\n                    Isopen: true,\r\n                    content: fileval,\r\n                    type: \"image/png\",\r\n                };\r\n            } else if (fileval?.split(\",\")[0] === \"data:application/pdf;base64\") {\r\n                tdata = {\r\n                    Isopen: true,\r\n                    content: fileval,\r\n                    type: \"application/pdf\",\r\n                };\r\n            }\r\n\r\n            dispatch({ type: \"modelcon\", value: tdata });\r\n        } else {\r\n            const tdata = {\r\n                message: \"There is no file to view.\",\r\n                type: \"warn\",\r\n            };\r\n            dispatch({ type: \"toast\", value: tdata });\r\n        }\r\n    };\r\n    const ConsentFormColumns = [\r\n        { key: 'id', name: 'S.No', frozen: true },\r\n        { key: 'PrimaryDoctorName', name: 'Doctor Name', frozen: true },\r\n        { key: 'Date', name: 'Date', frozen: true },\r\n        { key: 'Time', name: 'Time', frozen: true },\r\n        { key: 'ConsentFormName', name: 'ConsentFormName' },\r\n        { key: 'SisterName', name: 'SisterName' },\r\n        {\r\n            key: \"ChooseDocument\",\r\n            name: \"ChooseDocument\",\r\n            renderCell: (params) => (\r\n                <IconButton className=\"cell_btn\" onClick={() => Selectedfileview(params.row.ChooseDocument)}>\r\n                    <VisibilityIcon />\r\n                </IconButton>\r\n            ),\r\n        },\r\n        {\r\n            key: 'view',\r\n            frozen: true,\r\n            name: 'View',\r\n            renderCell: (params) => (\r\n                <IconButton onClick={() => handleView(params.row)}>\r\n                    <VisibilityIcon />\r\n                </IconButton>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const handleView = (data) => {\r\n        const departmentId = data.Department;\r\n        const relatedConsentForms = consentFormNameOptions[departmentId] || [];\r\n        setConsentFormNameOptions({ ...consentFormNameOptions, [departmentId]: relatedConsentForms });\r\n\r\n        setConsentForm({\r\n            Date: data.Date || '',\r\n            Time: data.Time || '',\r\n            Department: data.Department || '',\r\n            ConsentFormName: data.ConsentFormName || '',\r\n            ChooseDocument: data.ChooseDocument || null,\r\n            ChkBox: data.ChkBox === 'true' || data.ChkBox === true || false,\r\n            SisterName: data.SisterName || '',\r\n        });\r\n\r\n        setIsViewMode(true);\r\n    };\r\n\r\n    const handleClear = () => {\r\n        setConsentForm({\r\n            Date: \"\",\r\n            Time: \"\",\r\n            Department: \"\",\r\n            ConsentFormName: \"\",\r\n            ChooseDocument: null,\r\n            ChkBox: false,\r\n            SisterName: \"\",\r\n        });\r\n        setIsViewMode(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        axios.get(`${UrlLink}Masters/ConsentName_Detials_link`)\r\n            .then((res) => {\r\n                const consentData = res.data;\r\n\r\n                // Generate department options\r\n                const departments = consentData.reduce((acc, consent) => {\r\n                    if (!acc.some(dept => dept.value === consent.DepartmentId)) {\r\n                        acc.push({ label: consent.Department, value: consent.DepartmentId });\r\n                    }\r\n                    return acc;\r\n                }, []);\r\n\r\n                setDepartmentOptions(departments);\r\n\r\n                // Precompute consent form name options grouped by department\r\n                const consentFormOptionsByDept = departments.reduce((acc, department) => {\r\n                    const filteredConsentForms = consentData\r\n                        .filter(consent => consent.DepartmentId === department.value)\r\n                        .map(consent => ({ label: consent.ConsentFormsName, value: consent.ConsentFormsName }));\r\n                    \r\n                    acc[department.value] = filteredConsentForms;\r\n                    return acc;\r\n                }, {});\r\n\r\n                setConsentFormNameOptions(consentFormOptionsByDept);\r\n            })\r\n            .catch((err) => console.log(err));\r\n    }, [UrlLink]);\r\n\r\n    useEffect(() => {\r\n        if (IP_DoctorWorkbenchNavigation?.RegistrationId) {\r\n            axios.get(`${UrlLink}Ip_Workbench/IP_ConsentForm_Details_Link`, {\r\n                params: { RegistrationId: IP_DoctorWorkbenchNavigation?.RegistrationId }\r\n            })\r\n            .then((res) => {\r\n                setGridData(res.data);\r\n            })\r\n            .catch((err) => console.log(err));\r\n        }\r\n    }, [UrlLink, IP_DoctorWorkbenchNavigation, IsGetData]);\r\n\r\n    const handleConsentFormChange = (e) => {\r\n        const { id, value, type, checked } = e.target;\r\n\r\n        if (id === 'Department') {\r\n            // Update consent form name options based on the selected department\r\n            const relatedConsentForms = consentFormNameOptions[value] || [];\r\n            setConsentForm(prev => ({\r\n                ...prev,\r\n                [id]: value,\r\n                ConsentFormName: '' // Clear the previously selected ConsentFormName when department changes\r\n            }));\r\n            setConsentFormNameOptions(prevOptions => ({\r\n                ...prevOptions,\r\n                [value]: relatedConsentForms\r\n            }));\r\n        } else {\r\n            setConsentForm(prev => ({\r\n                ...prev,\r\n                [id]: type === 'checkbox' ? checked : value\r\n            }));\r\n        }\r\n    };\r\n\r\n    const handleinpchangeDocumentsForm = (e) => {\r\n        const { name, files } = e.target;\r\n\r\n        // Ensure that files exist and are not empty\r\n        if (files && files.length > 0) {\r\n            const formattedValue = files[0];\r\n\r\n            // Optional: Add validation for file type and size\r\n            const allowedTypes = [\"application/pdf\", \"image/jpeg\", \"image/png\"]; // Example allowed types\r\n            const maxSize = 5 * 1024 * 1024; // Example max size of 5MB\r\n            if (!allowedTypes.includes(formattedValue.type) || formattedValue.type === \"\") {\r\n                // Dispatch a warning toast or handle file type validation\r\n                const tdata = {\r\n                    message: \"Invalid file type. Please upload a PDF, JPEG, or PNG file.\",\r\n                    type: \"warn\",\r\n                };\r\n                dispatch({ type: \"toast\", value: tdata });\r\n            } else if (formattedValue.size > maxSize) {\r\n                // Dispatch a warning toast or handle file size validation\r\n                const tdata = {\r\n                    message: \"File size exceeds the limit of 5MB.\",\r\n                    type: \"warn\",\r\n                };\r\n                dispatch({ type: \"toast\", value: tdata });\r\n            } else {\r\n                const reader = new FileReader();\r\n                reader.onload = () => {\r\n                    setConsentForm(prev => ({\r\n                        ...prev,\r\n                        [name]: reader.result,\r\n                    }));\r\n                };\r\n                reader.readAsDataURL(formattedValue);\r\n            }\r\n        } else {\r\n            // Handle case where no file is selected\r\n            const tdata = {\r\n                message: \"No file selected. Please choose a file to upload.\",\r\n                type: \"warn\",\r\n            };\r\n            dispatch({ type: \"toast\", value: tdata });\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        const formData = new FormData();\r\n        console.log(FormData,'formData');\r\n        \r\n\r\n        formData.append(\"Date\", ConsentForm.Date);\r\n        formData.append(\"Time\", ConsentForm.Time);\r\n        formData.append(\"Department\", ConsentForm.Department);\r\n        formData.append(\"ConsentFormName\", ConsentForm.ConsentFormName);\r\n        formData.append(\"ChkBox\", ConsentForm.ChkBox);\r\n        formData.append(\"SisterName\", ConsentForm.SisterName);\r\n\r\n        // Append the file if it exists\r\n        if (ConsentForm.ChooseDocument) {\r\n            formData.append(\"ChooseDocument\", ConsentForm.ChooseDocument);\r\n        }\r\n\r\n        console.log(ConsentForm.ChooseDocument,'ChooseDocument');\r\n        \r\n        formData.append('RegistrationId', IP_DoctorWorkbenchNavigation?.RegistrationId);\r\n        formData.append('Createdby', userRecord?.username);\r\n\r\n        try {\r\n            const response = await axios.post(`${UrlLink}Ip_Workbench/IP_ConsentForm_Details_Link`, formData,{\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',\r\n                }\r\n            });\r\n            const [type, message] = [Object.keys(response.data)[0], Object.values(response.data)[0]];\r\n            dispatch({ type: 'toast', value: { message, type } });\r\n            setIsGetData(prev => !prev);\r\n            handleClear();\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n \r\n\r\n    return (\r\n        <div className='new-patient-registration-form'>\r\n            <br />\r\n            <div className=\"form-section5\">\r\n                <div className=\"common_center_tag\">\r\n                    <h3>Consent Form Details</h3>\r\n                </div>\r\n                <br />\r\n                <div className=\"RegisFormcon_1\">\r\n                    {[\r\n                        { label: \"Date\", id: \"Date\", type: \"date\" },\r\n                        { label: \"Time\", id: \"Time\", type: \"time\" },\r\n                        { label: \"Department\", id: \"Department\", type: \"select\", options: departmentOptions },\r\n                        { label: \"ConsentFormName\", id: \"ConsentFormName\", type: \"select\", options: consentFormNameOptions[ConsentForm.Department] || [] },\r\n                        { label: \"ChkBox\", id: \"ChkBox\", type: \"checkbox\" },\r\n                        { label: \"SisterName\", id: \"SisterName\", type: \"text\" },\r\n                        { label: \"ChooseDocument\", id: \"ChooseDocument\", type: \"file\" },\r\n                    ].map((input) => (\r\n                        <div className=\"RegisForm_1\" key={input.id}>\r\n                            <label htmlFor={input.id}>\r\n                                {input.label} <span>:</span>\r\n                            </label>\r\n                            {input.type === \"select\" ? (\r\n                                <select\r\n                                    id={input.id}\r\n                                    name={input.id}\r\n                                    onChange={handleConsentFormChange}\r\n                                    value={ConsentForm[input.id] || ''}\r\n                                    required\r\n                                    disabled={IsViewMode}\r\n                                >\r\n                                    <option value=\"\">Select {input.label}</option>\r\n                                    {Array.isArray(input.options) && input.options.length > 0 ? (\r\n                                        input.options.map((option) => (\r\n                                            <option key={option.value} value={option.value}>\r\n                                                {option.label}\r\n                                            </option>\r\n                                        ))\r\n                                    ) : (\r\n                                        <option disabled>No options available</option>\r\n                                    )}\r\n                                </select>\r\n                            ) : input.id === \"ChooseDocument\" ? (\r\n                                <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                                    <input\r\n                                        type=\"file\"\r\n                                        name={input.id}\r\n                                        accept=\"image/jpeg, image/png, application/pdf\"\r\n                                        required\r\n                                        id={`${input.id}_${input.id}`}\r\n                                        autoComplete=\"off\"\r\n                                        onChange={handleinpchangeDocumentsForm}\r\n                                        style={{ display: 'none' }}\r\n                                    />\r\n                                    <div style={{ width: \"150px\", display: \"flex\", justifyContent: \"space-around\" }}>\r\n                                        <label\r\n                                            htmlFor={`${input.id}_${input.id}`}\r\n                                            className=\"RegisterForm_1_btns choose_file_update\"\r\n                                        >\r\n                                            Choose File\r\n                                        </label>\r\n                                        <button\r\n                                            className=\"fileviewbtn\"\r\n                                            onClick={() => Selectedfileview(ConsentForm.ChooseDocument)}\r\n                                        >\r\n                                            View\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            ) : (\r\n                                <input\r\n                                    type={input.type}\r\n                                    id={input.id}\r\n                                    name={input.id}\r\n                                    onChange={handleConsentFormChange}\r\n                                    value={input.type !== 'file' ? ConsentForm[input.id] || '' : undefined}\r\n                                    required={input.type !== 'checkbox'}\r\n                                    checked={input.type === 'checkbox' ? ConsentForm[input.id] || false : undefined}\r\n                                    readOnly={IsViewMode && input.type !== 'file'}\r\n                                />\r\n                            )}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"Main_container_Btn\">\r\n                {IsViewMode ? (\r\n                    <button onClick={handleClear}>Clear</button>\r\n                ) : (\r\n                    <button onClick={handleSubmit}>Submit</button>\r\n                )}\r\n            </div>\r\n\r\n            {gridData.length > 0 && (\r\n                <ReactGrid columns={ConsentFormColumns} RowData={gridData} />\r\n            )}\r\n\r\n            <ToastAlert Message={toast.message} Type={toast.type} />\r\n            <ModelContainer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default IP_ConsentForms;\r\n"],"names":["IP_ConsentForms","dispatch","useDispatch","UrlLink","useSelector","state","_state$userRecord","userRecord","toast","_state$userRecord2","IP_DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","_state$userRecord3","UserData","ConsentForm","setConsentForm","useState","Date","Time","Department","ConsentFormName","ChooseDocument","ChkBox","SisterName","departmentOptions","setDepartmentOptions","consentFormNameOptions","setConsentFormNameOptions","gridData","setGridData","IsGetData","setIsGetData","IsViewMode","setIsViewMode","Selectedfileview","fileval","tdata","Isopen","content","type","includes","split","value","message","ConsentFormColumns","key","name","frozen","renderCell","params","_jsx","IconButton","className","onClick","row","children","VisibilityIcon","handleView","data","departmentId","relatedConsentForms","handleClear","useEffect","axios","get","concat","then","res","consentData","departments","reduce","acc","consent","some","dept","DepartmentId","push","label","consentFormOptionsByDept","department","filteredConsentForms","filter","map","ConsentFormsName","catch","err","console","log","RegistrationId","handleConsentFormChange","e","id","checked","target","prev","prevOptions","handleinpchangeDocumentsForm","files","length","formattedValue","maxSize","size","reader","FileReader","onload","result","readAsDataURL","_jsxs","options","input","htmlFor","onChange","required","disabled","Array","isArray","option","style","display","alignItems","accept","autoComplete","width","justifyContent","undefined","readOnly","async","formData","FormData","append","username","response","post","headers","Object","keys","values","error","ReactGrid","columns","RowData","ToastAlert","Message","Type","ModelContainer"],"sourceRoot":""}