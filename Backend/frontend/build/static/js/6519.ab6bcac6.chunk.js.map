{"version":3,"file":"static/js/6519.ab6bcac6.chunk.js","mappings":"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","sources":["IP_Workbench/Doctor/IP_Vitals.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ReactGrid from '../../OtherComponent/ReactGrid/ReactGrid';\r\nimport axios from 'axios';\r\nimport ToastAlert from '../../OtherComponent/ToastContainer/ToastAlert';\r\nimport { IconButton } from '@mui/material';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\n\r\nimport ToggleButton from \"@mui/material/ToggleButton\";\r\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\r\n\r\n\r\nconst IP_Vitals = () => {\r\n    const dispatch = useDispatch();\r\n    const UrlLink = useSelector(state => state.userRecord?.UrlLink);\r\n    const toast = useSelector(state => state.userRecord?.toast);\r\n    const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n    console.log(IP_DoctorWorkbenchNavigation, 'IP_DoctorWorkbenchNavigation');\r\n\r\n    const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n\r\n\r\n    const formatLabel = (label) => {\r\n\r\n        if (/[a-z]/.test(label) && /[A-Z]/.test(label) && !/\\d/.test(label)) {\r\n            return label\r\n                .replace(/([a-z])([A-Z])/g, \"$1 $2\")\r\n                .replace(/^./, (str) => str.toUpperCase());\r\n        } else {\r\n            return label;\r\n        }\r\n    };\r\n\r\n\r\n    const [VitalFormData, setVitalFormData] = useState({\r\n\r\n        Temperature: '',\r\n        PulseRate: '',\r\n        SPO2: '',\r\n        HeartRate: '',\r\n        RespiratoryRate: '',\r\n        SBP: '',\r\n        DBP: '',\r\n        Height: '',\r\n        Weight: '',\r\n        BMI: '',\r\n        WC: '',\r\n        HC: '',\r\n        BSL: '',\r\n        Painscore: '',\r\n        SupplementalOxygen: '',\r\n        LevelOfConsiousness: '',\r\n        CapillaryRefillTime: '',\r\n        // ETCO2: \"\",\r\n        // BreathSounds: \"\",\r\n        // Date: \"\",\r\n        // Time: \"\",\r\n    });\r\n\r\n    const [type, setType] = useState(\"Vital\");\r\n\r\n    const [gridData, setGridData] = useState([])\r\n    const [IsGetData, setIsGetData] = useState(false)\r\n\r\n    const [IsViewMode, setIsViewMode] = useState(false)\r\n\r\n \r\n\r\n    const getColorByStatus = (status) => {\r\n        switch (status) {\r\n            case 3:\r\n                return 'red';\r\n            case 2:\r\n                return 'orange';\r\n            case 1:\r\n                return 'yellow';\r\n            case 0:\r\n                return 'green';\r\n            default:\r\n                return ''; // Default color for undefined or other values\r\n        }\r\n    };\r\n\r\n\r\n\r\n  \r\n\r\n    useEffect(() => {\r\n        if (VitalFormData.Weight && VitalFormData.Height) {\r\n            const parsedWeight = parseFloat(VitalFormData.Weight);\r\n            const parsedHeight = parseFloat(VitalFormData.Height) / 100; // Convert cm to m\r\n            const calculatedBMI = (\r\n                parsedWeight /\r\n                (parsedHeight * parsedHeight)\r\n            ).toFixed(2);\r\n\r\n            setVitalFormData((prev) => ({\r\n                ...prev,\r\n                BMI: calculatedBMI,\r\n            }));\r\n        }\r\n    }, [VitalFormData.Weight, VitalFormData.Height]);\r\n\r\n    const VitalsFormColumns = [\r\n        {\r\n            key: 'id',\r\n            name: 'S.No',\r\n            frozen: true\r\n        },\r\n        { key: 'Type', name: 'Type', frozen: true },\r\n        { key: 'PrimaryDoctorId', name: 'Doctor Id', frozen: true },\r\n        { key: 'PrimaryDoctorName', name: 'Doctor Name', frozen: true },\r\n\r\n        {\r\n            key: 'Date',\r\n            name: 'Date',\r\n            frozen: true\r\n        },\r\n        {\r\n            key: 'Time',\r\n            name: 'Time',\r\n            frozen: true\r\n        },\r\n\r\n        {\r\n            key: 'view',\r\n            frozen: true,\r\n            name: 'View',\r\n            renderCell: (params) => (\r\n                <IconButton onClick={() => handleView(params.row)}>\r\n                    <VisibilityIcon />\r\n                </IconButton>\r\n            ),\r\n        },\r\n\r\n    ]\r\n    // Handle setting the form data when viewing\r\n    const handleView = (data) => {\r\n        setVitalFormData({\r\n            Temperature: data.Temperature || '',\r\n            PulseRate: data.PulseRate || '',\r\n            SPO2: data.SPO2 || '',\r\n            HeartRate: data.HeartRate || '',\r\n            RespiratoryRate: data.RespiratoryRate || '',\r\n            SBP: data.SBP || '',\r\n            DBP: data.DBP || '',\r\n            Height: data.Height || '',\r\n            Weight: data.Weight || '',\r\n            BMI: data.BMI || '',\r\n            WC: data.WC || '',\r\n            HC: data.HC || '',\r\n            BSL: data.BSL || '',\r\n            Painscore: data.Painscore || '',\r\n            SupplementalOxygen: data.SupplementalOxygen || '',\r\n            LevelOfConsiousness: data.LevelOfConsiousness || '',\r\n            CapillaryRefillTime: data.CapillaryRefillTime || '',\r\n\r\n            // ETCO2: data.EtCO2 || '',\r\n            // BreathSounds: data.BreathSounds || '',\r\n            // Date: data.Date || '',\r\n            // Time: data.Time || '',\r\n            // Createdby: data.Createdby || '',\r\n        });\r\n        setIsViewMode(true);\r\n    };\r\n\r\n\r\n    // Handle clearing the form and resetting the view mode\r\n    const handleClear = () => {\r\n        setVitalFormData({\r\n            Temperature: '',\r\n            PulseRate: '',\r\n            SPO2: '',\r\n            HeartRate: '',\r\n            RespiratoryRate: '',\r\n            SBP: '',\r\n            DBP: '',\r\n            Height: '',\r\n            Weight: '',\r\n            BMI: '',\r\n            WC: '',\r\n            HC: '',\r\n            BSL: '',\r\n            Painscore: '',\r\n            SupplementalOxygen: '',\r\n            LevelOfConsiousness: '',\r\n            CapillaryRefillTime: '',\r\n            // ETCO2:'',\r\n            // BreathSounds:'',\r\n            // Date: '',\r\n            // Time: '',\r\n            // Createdby: '',\r\n        });\r\n        setIsViewMode(false);\r\n    };\r\n\r\n\r\n    // useEffect(() => {\r\n    //     axios.get(`${UrlLink}Ip_Workbench/IP_Vitals_Form_Details_Link`,{params:{RegistrationId:IP_DoctorWorkbenchNavigation?.RegistrationId}})\r\n    //         .then((res) => {\r\n    //             const ress = res.data\r\n    //             console.log(ress)\r\n    //             setGridData(ress)\r\n\r\n    //         })\r\n    //         .catch((err) => {\r\n    //             console.log(err);\r\n    //         })\r\n    //   }, [UrlLink,IP_DoctorWorkbenchNavigation,IsGetData])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(`${UrlLink}Ip_Workbench/IP_Vitals_Form_Details_Link`, {\r\n            params: { RegistrationId: IP_DoctorWorkbenchNavigation?.RegistrationId }\r\n        })\r\n            .then((res) => {\r\n                const data = res.data;\r\n                console.log('API Data:', data); // Check the data structure here\r\n\r\n                // Access the `vital_details` array from the response\r\n                if (data && Array.isArray(data.vital_details)) {\r\n                    setGridData(data.vital_details);\r\n                } else {\r\n                    console.error('vital_details is not an array:', data);\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.error('Error fetching data:', err);\r\n            });\r\n    }, [UrlLink, IP_DoctorWorkbenchNavigation, IsGetData]);\r\n\r\n\r\n    const HandleOnChange = (e) => {\r\n        const { name, value } = e.target;\r\n        const formattedValue = value.trim();\r\n        setVitalFormData((prevFormData) => ({\r\n            ...prevFormData,\r\n            [name]: formattedValue,\r\n        }));\r\n    };\r\n\r\n\r\n    const handleChange = (event) => {\r\n        setType(event.target.value);\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            key: 'temperature_status',\r\n            name: 'Temperature Status',\r\n            renderCell: (params) => (\r\n                <div\r\n                    style={{\r\n                        backgroundColor: getColorByStatus(params.row.temperature_status),\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        textAlign: 'center',\r\n                        color: '#fff',\r\n                        fontWeight: 'bold',\r\n                        borderRadius: '4px',\r\n                        padding: '5px'\r\n                    }}\r\n                >\r\n                    {params.row.temperature_status}\r\n                </div>\r\n            )\r\n        },\r\n        {\r\n            key: 'spo2_status',\r\n            name: 'SPO2 Status',\r\n            renderCell: (params) => (\r\n                <div\r\n                    style={{\r\n                        backgroundColor: getColorByStatus(params.row.spo2_status),\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        textAlign: 'center',\r\n                        color: '#fff',\r\n                        fontWeight: 'bold',\r\n                        borderRadius: '4px',\r\n                        padding: '5px'\r\n                    }}\r\n                >\r\n                    {params.row.spo2_status}\r\n                </div>\r\n            )\r\n        },\r\n        {\r\n            key: 'heartrate_status',\r\n            name: 'Heart Rate Status',\r\n            renderCell: (params) => (\r\n                <div\r\n                    style={{\r\n                        backgroundColor: getColorByStatus(params.row.heartrate_status),\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        textAlign: 'center',\r\n                        color: '#fff',\r\n                        fontWeight: 'bold',\r\n                        borderRadius: '4px',\r\n                        padding: '5px'\r\n                    }}\r\n                >\r\n                    {params.row.heartrate_status}\r\n                </div>\r\n            )\r\n        },\r\n        {\r\n            key: 'RespiratoryStatus',\r\n            name: 'Respiratory Status',\r\n            renderCell: (params) => (\r\n                <div\r\n                    style={{\r\n                        backgroundColor: getColorByStatus(params.row.RespiratoryStatus),\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        textAlign: 'center',\r\n                        color: '#fff',\r\n                        fontWeight: 'bold',\r\n                        borderRadius: '4px',\r\n                        padding: '5px'\r\n                    }}\r\n                >\r\n                    {params.row.RespiratoryStatus}\r\n                </div>\r\n            )\r\n        },\r\n        {\r\n            key: 'sbp_status',\r\n            name: 'SBP Status',\r\n            renderCell: (params) => (\r\n                <div\r\n                    style={{\r\n                        backgroundColor: getColorByStatus(params.row.sbp_status),\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        textAlign: 'center',\r\n                        color: '#fff',\r\n                        fontWeight: 'bold',\r\n                        borderRadius: '4px',\r\n                        padding: '5px'\r\n                    }}\r\n                >\r\n                    {params.row.sbp_status}\r\n                </div>\r\n            )\r\n        },\r\n        {\r\n            key: 'SupplementalOxygen_status',\r\n            name: 'Supplemental Oxygen Status',\r\n            renderCell: (params) => (\r\n                <div\r\n                    style={{\r\n                        backgroundColor: getColorByStatus(params.row.SupplementalOxygen_status),\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        textAlign: 'center',\r\n                        color: '#fff',\r\n                        fontWeight: 'bold',\r\n                        borderRadius: '4px',\r\n                        padding: '5px'\r\n                    }}\r\n                >\r\n                    {params.row.SupplementalOxygen_status}\r\n                </div>\r\n            )\r\n        },\r\n        {\r\n            key: 'LevelOfConsiousness_Status',\r\n            name: 'Level of Consciousness Status',\r\n            renderCell: (params) => (\r\n                <div\r\n                    style={{\r\n                        backgroundColor: getColorByStatus(params.row.LevelOfConsiousness_Status),\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        textAlign: 'center',\r\n                        color: '#fff',\r\n                        fontWeight: 'bold',\r\n                        borderRadius: '4px',\r\n                        padding: '5px'\r\n                    }}\r\n                >\r\n                    {params.row.LevelOfConsiousness_Status}\r\n                </div>\r\n            )\r\n        },\r\n        {\r\n            key: 'CapillaryRefillTime_Status',\r\n            name: 'Capillary Refill Time Status',\r\n            renderCell: (params) => (\r\n                <div\r\n                    style={{\r\n                        backgroundColor: getColorByStatus(params.row.CapillaryRefillTime_Status),\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        textAlign: 'center',\r\n                        color: '#fff',\r\n                        fontWeight: 'bold',\r\n                        borderRadius: '4px',\r\n                        padding: '5px'\r\n                    }}\r\n                >\r\n                    {params.row.CapillaryRefillTime_Status}\r\n                </div>\r\n            )\r\n        },\r\n    ];\r\n\r\n    const calculateTotalScore = (row) => {\r\n        const fields = [\r\n            'LevelOfConsiousness_Status',\r\n            'RespiratoryStatus',\r\n            'SupplementalOxygen_status',\r\n            'heartrate_status',\r\n            'temperature_status',\r\n            'spo2_status',\r\n            'sbp_status',\r\n            'CapillaryRefillTime_Status'\r\n        ];\r\n\r\n        return fields.reduce((total, field) => {\r\n            const value = row[field];\r\n            return total + (value !== null ? value : 0); // Ensure we handle null values\r\n        }, 0);\r\n    };\r\n\r\n    //   const getScoreCategory = (score) => {\r\n    //     if (score >= 0 && score <= 4) {\r\n    //         return 'Low';\r\n    //     } else if (score >= 5 && score <= 6) {\r\n    //         return 'Medium';\r\n    //     } else if (score >= 7 && score <= 21) {\r\n    //         return 'High';\r\n    //     } else {\r\n    //         return 'Unknown';\r\n    //     }\r\n    // };\r\n\r\n    const calculateAge = (dob) => {\r\n        const dobDate = new Date(dob);\r\n        const today = new Date();\r\n        let age = today.getFullYear() - dobDate.getFullYear();\r\n        const monthDifference = today.getMonth() - dobDate.getMonth();\r\n        if (monthDifference < 0 || (monthDifference === 0 && today.getDate() < dobDate.getDate())) {\r\n            age--;\r\n        }\r\n        return age;\r\n    };\r\n\r\n    const dob = IP_DoctorWorkbenchNavigation?.DOB; // Ensure this matches the structure of your state\r\n    const age = dob ? calculateAge(dob) : null;\r\n\r\n\r\n    const getScoreCategory = (score, age) => {\r\n        if (age >= 16) {\r\n            // Score categories for age 16 and above\r\n            if (score >= 0 && score <= 4) {\r\n                return 'Low';\r\n            } else if (score >= 5 && score <= 6) {\r\n                return 'Medium';\r\n            } else if (score >= 7 && score <= 21) {\r\n                return 'High';\r\n            } else {\r\n                return 'Unknown';\r\n            }\r\n        } else {\r\n            // Score categories for age below 16\r\n            if (score >= 0 && score <= 2) {\r\n                return 'Low';\r\n            } else if (score >= 3 && score <= 5) {\r\n                return 'Medium';\r\n            } else if (score >= 6 && score <= 12) {\r\n                return 'High';\r\n            } else {\r\n                return 'Unknown';\r\n            }\r\n        }\r\n    };\r\n\r\n    // Example usage in render or function\r\n    const totalScore = gridData.length > 0 ? calculateTotalScore(gridData[gridData.length - 1]) : 0;\r\n    // const scoreCategory = getScoreCategory(totalScore);\r\n    const scoreCategory = age !== null ? getScoreCategory(totalScore, age) : 'Unknown';\r\n    console.log(totalScore, 'totalScore');\r\n\r\n\r\n\r\n    const handleVitalFormSubmit = () => {\r\n\r\n        console.log(IP_DoctorWorkbenchNavigation?.RegistrationId);\r\n\r\n        const senddata = {\r\n            // ...VitalFormData,\r\n            Temperature: VitalFormData.Temperature || null,\r\n            PulseRate: VitalFormData.PulseRate || null,\r\n            SPO2: VitalFormData.SPO2 || null,\r\n            HeartRate: VitalFormData.HeartRate || null,\r\n            RespiratoryRate: VitalFormData.RespiratoryRate || null,\r\n            SBP: VitalFormData.SBP || null,\r\n            DBP: VitalFormData.DBP || null,\r\n            Height: VitalFormData.Height || null,\r\n            Weight: VitalFormData.Weight || null,\r\n            BMI: VitalFormData.BMI || null,\r\n            WC: VitalFormData.WC || null,\r\n            HC: VitalFormData.HC || null,\r\n            BSL: VitalFormData.BSL || null,\r\n            Painscore: VitalFormData.Painscore || null,\r\n            SupplementalOxygen: VitalFormData.SupplementalOxygen || '',\r\n            LevelOfConsiousness: VitalFormData.LevelOfConsiousness || '',\r\n            CapillaryRefillTime: VitalFormData.CapillaryRefillTime || '',\r\n            RegistrationId: IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n            Createdby: userRecord?.username,\r\n            Type: 'Doctor'\r\n\r\n        }\r\n\r\n        console.log(senddata, 'senddata');\r\n\r\n        axios.post(`${UrlLink}Ip_Workbench/IP_Vitals_Form_Details_Link`, senddata)\r\n            .then((res) => {\r\n                const [type, message] = [Object.keys(res.data)[0], Object.values(res.data)[0]];\r\n                dispatch({ type: 'toast', value: { message, type } });\r\n                setIsGetData(prev => !prev);\r\n                handleClear();\r\n            })\r\n            .catch((err) => console.log(err));\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='new-patient-registration-form'>\r\n\r\n            <div className=\"RegisFormcon_1\">\r\n\r\n\r\n                <div style={{ width: \"100%\", display: \"grid\", placeItems: \"center\" }}>\r\n                    <ToggleButtonGroup\r\n                        value={type}\r\n                        exclusive\r\n                        onChange={handleChange}\r\n                        aria-label=\"Platform\"\r\n                    >\r\n                        <ToggleButton\r\n                            value=\"Vital\"\r\n                            style={{\r\n                                height: \"30px\",\r\n                                width: \"100px\",\r\n                                backgroundColor:\r\n                                    type === \"Vital\"\r\n                                        ? \"var(--selectbackgroundcolor)\"\r\n                                        : \"inherit\",\r\n                            }}\r\n                            className=\"togglebutton_container\"\r\n                        >\r\n                            Vital\r\n                        </ToggleButton>\r\n                        <ToggleButton\r\n                            value=\"NewsScore\"\r\n                            style={{\r\n                                backgroundColor:\r\n                                    type === \"NewsScore\"\r\n                                        ? \"var(--selectbackgroundcolor)\"\r\n                                        : \"inherit\",\r\n                                width: \"100px\",\r\n                                height: \"30px\",\r\n                            }}\r\n                            className=\"togglebutton_container\"\r\n                        >\r\n                            NewsScore\r\n                        </ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </div>\r\n                {type === \"Vital\" ? (\r\n                    Object.keys(VitalFormData).map((p, index) => (\r\n                        <div className='RegisForm_1' key={p}>\r\n                            <label htmlFor={`${p}_${index}`}>\r\n                                {formatLabel(p)} <span>:</span>\r\n                            </label>\r\n                            {p === 'SupplementalOxygen' ? (\r\n                                <select\r\n                                    id={`${p}_${index}`}\r\n                                    name={p}\r\n                                    value={VitalFormData[p]}\r\n                                    onChange={HandleOnChange}\r\n                                >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"Yes\">Yes</option>\r\n                                    <option value=\"No\">No</option>\r\n                                </select>\r\n                            ) : p === 'LevelOfConsiousness' ? (\r\n                                <select\r\n                                    id={`${p}_${index}`}\r\n                                    name={p}\r\n                                    value={VitalFormData[p]}\r\n                                    onChange={HandleOnChange}\r\n                                >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"Alert\">Alert</option>\r\n                                    <option value=\"Responsive to Voice\">V - Responsive to Voice</option>\r\n                                    <option value=\"Responsive to Pain\">P - Responsive to Pain</option>\r\n                                    <option value=\"Unresponsive\">U - Unresponsive</option>\r\n                                </select>\r\n                            ) : p === 'CapillaryRefillTime' ? (\r\n                                <select\r\n                                    id={`${p}_${index}`}\r\n                                    name={p}\r\n                                    value={VitalFormData[p]}\r\n                                    onChange={HandleOnChange}\r\n                                >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"under 2 seconds\">under 2 seconds</option>\r\n                                    <option value=\"3 to 4 seconds\">3-4 seconds</option>\r\n                                    <option value=\"greaterthan 4 seconds\"> {`>4 seconds`}</option>\r\n                                </select>\r\n                            ) : (\r\n                                <input\r\n                                    id={`${p}_${index}`}\r\n                                    autoComplete='off'\r\n                                    type={p === 'Date' ? 'date' : p === 'Time' ? 'time' : 'text'}\r\n                                    name={p}\r\n                                    value={VitalFormData[p]}\r\n                                    onChange={HandleOnChange}\r\n                                />\r\n                            )}\r\n                        </div>\r\n\r\n                    ))\r\n\r\n                ) : type === \"NewsScore\" ? (\r\n                    <div className='RegisFormcon' style={{gap:'20px'}}>\r\n                        {\r\n                            ['Min High', 'Min Medium', 'Min Low', 'Normal', 'Max Low', 'Max Medium', 'Max High'].map((field, indx) => (\r\n                                <div\r\n                                    style={{\r\n                                        display: 'flex',\r\n                                        gap: '10px',\r\n                                        alignItems:'center',\r\n                                        justifyContent:'center'\r\n                                    }}>\r\n                                    <div key={indx}\r\n                                        style={{\r\n                                            width: '30px',\r\n                                            height: '30px',\r\n                                            backgroundColor: getColorByStatus(field === 'Normal' ? 0\r\n                                                : ['Min Low', 'Max Low'].includes(field) ? 1\r\n                                                    : ['Min Medium', 'Max Medium'].includes(field) ? 2\r\n                                                        : 3\r\n                                            ),\r\n                                            alignContent: 'center',\r\n                                            borderRadius: '5px'\r\n                                        }}\r\n                                    >\r\n                                        {field.charAt(0).toUpperCase()}\r\n                                    </div>\r\n                                    <div>{field}</div>\r\n                                </div>\r\n\r\n                            ))\r\n                        }\r\n                       \r\n                    </div>\r\n\r\n                ) : null}\r\n\r\n                <br />\r\n                <br />\r\n\r\n                <div className=\"Main_container_Btn\">\r\n                    {IsViewMode && (\r\n                        <button onClick={handleClear}>Clear</button>\r\n                    )}\r\n                    {!IsViewMode && type === 'Vital' && (\r\n                        <button onClick={handleVitalFormSubmit}>Submit</button>\r\n                    )}\r\n                </div>\r\n                <br />\r\n                {type === \"Vital\" && (\r\n                    <div style={{ display: 'flex', alignItems: 'center', marginLeft: '0%', textAlign: 'center', marginTop: '20px' }}>\r\n                        <h2>EWS Score: {totalScore} ({scoreCategory})</h2>\r\n                    </div>\r\n                )}\r\n\r\n\r\n                {type === \"Vital\" && gridData.length > 0 && (\r\n                    <>\r\n                        <ReactGrid columns={VitalsFormColumns} RowData={gridData} />\r\n\r\n                    </>\r\n                )}\r\n\r\n                {type === \"NewsScore\" && gridData.length > 0 && (\r\n                    <>\r\n                        <ReactGrid columns={columns} RowData={gridData} />\r\n\r\n                    </>\r\n                )}\r\n                <ToastAlert Message={toast.message} Type={toast.type} />\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\n\r\n\r\nexport default IP_Vitals;\r\n\r\n"],"names":["IP_Vitals","dispatch","useDispatch","UrlLink","useSelector","state","_state$userRecord","userRecord","toast","_state$userRecord2","IP_DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","console","log","_state$userRecord3","UserData","VitalFormData","setVitalFormData","useState","Temperature","PulseRate","SPO2","HeartRate","RespiratoryRate","SBP","DBP","Height","Weight","BMI","WC","HC","BSL","Painscore","SupplementalOxygen","LevelOfConsiousness","CapillaryRefillTime","type","setType","gridData","setGridData","IsGetData","setIsGetData","IsViewMode","setIsViewMode","getColorByStatus","status","useEffect","parsedWeight","parseFloat","parsedHeight","calculatedBMI","toFixed","prev","VitalsFormColumns","key","name","frozen","renderCell","params","_jsx","IconButton","onClick","handleView","row","children","VisibilityIcon","data","handleClear","axios","get","concat","RegistrationId","then","res","Array","isArray","vital_details","error","catch","err","HandleOnChange","e","value","target","formattedValue","trim","prevFormData","columns","style","backgroundColor","temperature_status","width","height","textAlign","color","fontWeight","borderRadius","padding","spo2_status","heartrate_status","RespiratoryStatus","sbp_status","SupplementalOxygen_status","LevelOfConsiousness_Status","CapillaryRefillTime_Status","dob","DOB","age","dobDate","Date","today","getFullYear","monthDifference","getMonth","getDate","calculateAge","totalScore","length","reduce","total","field","scoreCategory","getScoreCategory","score","className","_jsxs","display","placeItems","ToggleButtonGroup","exclusive","onChange","event","ToggleButton","Object","keys","map","p","index","htmlFor","label","test","replace","str","toUpperCase","id","autoComplete","gap","indx","alignItems","justifyContent","includes","alignContent","charAt","handleVitalFormSubmit","senddata","Createdby","username","Type","post","message","values","marginLeft","marginTop","_Fragment","ReactGrid","RowData","ToastAlert","Message"],"sourceRoot":""}