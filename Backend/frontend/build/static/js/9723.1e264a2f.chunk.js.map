{"version":3,"file":"static/js/9723.1e264a2f.chunk.js","mappings":"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","sources":["IP_Workbench/Nurse/ServiceProcedureRequest.jsx"],"sourcesContent":["import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ToastAlert from '../../OtherComponent/ToastContainer/ToastAlert';\r\nimport ReactGrid from '../../OtherComponent/ReactGrid/ReactGrid';\r\n\r\nconst ServiceProcedureRequest = () => {\r\n    const [ServiceProcedureForm, setServiceProcedureForm] = useState('Service');\r\n    const [ServiceProcedureData, setServiceProcedureData] = useState([]);\r\n    const [ServiceProcedureDataGet, setServiceProcedureDataGet] = useState([]);\r\n    const [ServiceProcedure, setServiceProcedure] = useState({\r\n        id: '',\r\n        Units: ''\r\n    });\r\n    const [getdata, setgetdata] = useState(false)\r\n    const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n    const UrlLink = useSelector(state => state.userRecord?.UrlLink);\r\n    const UserData = useSelector((state) => state.userRecord?.UserData);\r\n    const toast = useSelector(state => state.userRecord?.toast);\r\n    const dispatchvalue = useDispatch()\r\n    useEffect(() => {\r\n        axios.get(`${UrlLink}/Masters/get_service_procedure_for_ip?MasterType=${ServiceProcedureForm}`)\r\n            .then((res) => {\r\n                setServiceProcedureData(Array.isArray(res.data) ? res.data : [])\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n\r\n            })\r\n    }, [ServiceProcedureForm, UrlLink])\r\n\r\n    useEffect(() => {\r\n        axios.get(`${UrlLink}/Frontoffice/service_procedure_request?MasterType=${ServiceProcedureForm}&RegistrationId=${IP_DoctorWorkbenchNavigation?.RegistrationId}`)\r\n            .then((res) => {\r\n                setServiceProcedureDataGet(Array.isArray(res.data) ? res.data : [])\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            })\r\n    }, [ServiceProcedureForm, IP_DoctorWorkbenchNavigation?.RegistrationId, UrlLink, getdata])\r\n\r\n\r\n    const handlesubmit = () => {\r\n        if (ServiceProcedure?.id && ServiceProcedure.Units) {\r\n            const submitdata = {\r\n                RegistrationId: IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n                ...ServiceProcedure,\r\n                MasterType: ServiceProcedureForm,\r\n                createdby: UserData?.username\r\n            }\r\n\r\n            axios.post(`${UrlLink}Frontoffice/service_procedure_request`, submitdata)\r\n                .then(res => {\r\n                    console.log(res.data);\r\n                    const resres = res.data;\r\n                    let typp = Object.keys(resres)[0];\r\n                    let mess = Object.values(resres)[0];\r\n                    const tdata = {\r\n                        message: mess,\r\n                        type: typp,\r\n                    };\r\n                    setgetdata(prev => !prev)\r\n                    dispatchvalue({ type: 'toast', value: tdata });\r\n\r\n                    setServiceProcedure({\r\n                        id: '',\r\n                        Units: ''\r\n                    })\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n        } else {\r\n            const tdata = {\r\n                message: 'Please fill all the fields',\r\n                type: 'warn',\r\n            };\r\n            dispatchvalue({ type: 'toast', value: tdata });\r\n\r\n        }\r\n\r\n    }\r\n\r\n    const Servicecolumns1 = [\r\n        {\r\n            key: \"DateTime\",\r\n            name: \"Date Time\",\r\n            frozen: true\r\n        },\r\n        {\r\n            key: \"Status\",\r\n            name: \"Status\",\r\n            frozen: true\r\n        },\r\n    ]\r\n    const Servicecolumns = [\r\n        {\r\n            key: \"DateTime\",\r\n            name: \"Date Time\",\r\n            frozen: true\r\n        },\r\n        {\r\n            key: \"Status\",\r\n            name: \"Status\",\r\n            frozen: true\r\n        },\r\n        {\r\n            key: \"ServiceName\",\r\n            name: `${ServiceProcedureForm} Name`,\r\n        },\r\n        ServiceProcedureForm === 'Procedure' ? {\r\n            key: \"ServiceType\",\r\n            name: `${ServiceProcedureForm} Type`,\r\n        } : undefined,\r\n        {\r\n            key: \"Units\",\r\n            name: \"Units\",\r\n        }\r\n    ].filter(Boolean); // Filters out undefined values\r\n\r\n    return (\r\n        <>\r\n            <div className='new-patient-registration-form'>\r\n                <div className='DivCenter_container'>Service / Procedure Request</div>\r\n                <br />\r\n                <div className=\"RegisterTypecon\">\r\n                    <div className=\"RegisterType\">\r\n                        {[\"Service\", \"Procedure\"].map((p, ind) => (\r\n                            <div className=\"registertypeval\" key={ind + 'key'}>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    id={p}\r\n                                    name=\"appointment_type\"\r\n                                    checked={ServiceProcedureForm === p}\r\n                                    onChange={(e) => {\r\n                                        setServiceProcedureForm(e.target.value)\r\n                                        setServiceProcedure({\r\n                                            id: '',\r\n                                            Units: ''\r\n                                        })\r\n                                    }\r\n                                    }\r\n                                    value={p}\r\n                                />\r\n                                <label htmlFor={p}>\r\n                                    {p}\r\n                                </label>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <br />\r\n                <div className=\"RegisFormcon_1\" >\r\n                    {\r\n                        Object.keys(ServiceProcedure).filter(p => p !== 'Name').map((field, indx) => (\r\n                            <div className=\"RegisForm_1\" key={indx}>\r\n                                <label htmlFor={`${field}_${indx}`}>\r\n                                    {field === 'id' ? ServiceProcedureForm : field}\r\n                                    <span>:</span>\r\n                                </label>\r\n                                {\r\n                                    field === 'id' ?\r\n                                        <select\r\n\r\n                                            value={ServiceProcedure[field]}\r\n                                            onChange={(e) => setServiceProcedure(prev => ({\r\n                                                ...prev, [field]: e.target.value\r\n                                            }))}\r\n                                        >\r\n                                            <option value=\"\">Select</option>\r\n                                            {\r\n                                                ServiceProcedureData.map((row, indx) => (\r\n                                                    <option value={row.id} key={indx}>{ServiceProcedureForm === 'Procedure' ? `${row.name} | ${row.Type}` : row.name}</option>\r\n                                                ))\r\n                                            }\r\n                                        </select>\r\n                                        :\r\n                                        <input\r\n                                            type='number'\r\n                                            value={ServiceProcedure[field]}\r\n                                            onChange={(e) => setServiceProcedure(prev => ({\r\n                                                ...prev, [field]: e.target.value\r\n                                            }))}\r\n                                            onKeyDown={(e) => ['e', 'E', '+', '-'].includes(e.key) && e.preventDefault()}\r\n                                        />\r\n                                }\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n                <div className=\"Main_container_Btn\">\r\n                    <button onClick={handlesubmit}>\r\n                        Add\r\n                    </button>\r\n                </div>\r\n                <br />\r\n                <ReactGrid columns={Servicecolumns} RowData={ServiceProcedureDataGet} />\r\n\r\n            </div>\r\n            <ToastAlert Message={toast.message} Type={toast.type} />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ServiceProcedureRequest;"],"names":["ServiceProcedureRequest","ServiceProcedureForm","setServiceProcedureForm","useState","ServiceProcedureData","setServiceProcedureData","ServiceProcedureDataGet","setServiceProcedureDataGet","ServiceProcedure","setServiceProcedure","id","Units","getdata","setgetdata","IP_DoctorWorkbenchNavigation","useSelector","state","_state$Frontoffice","Frontoffice","UrlLink","_state$userRecord","userRecord","UserData","_state$userRecord2","toast","_state$userRecord3","dispatchvalue","useDispatch","useEffect","axios","get","concat","then","res","Array","isArray","data","catch","err","console","log","RegistrationId","Servicecolumns","key","name","frozen","undefined","filter","Boolean","_jsxs","_Fragment","children","className","_jsx","map","p","ind","type","checked","onChange","e","target","value","htmlFor","Object","keys","field","indx","prev","row","Type","onKeyDown","includes","preventDefault","onClick","handlesubmit","submitdata","MasterType","createdby","username","post","resres","typp","tdata","message","values","ReactGrid","columns","RowData","ToastAlert","Message"],"sourceRoot":""}