{"version":3,"file":"static/js/508.4f333689.chunk.js","mappings":"mNAQA,MA0SA,EA1SyBA,KACvB,MAAMC,GAAUC,EAAAA,EAAAA,KAAaC,IAAK,IAAAC,EAAA,OAAqB,QAArBA,EAAKD,EAAME,kBAAU,IAAAD,OAAA,EAAhBA,EAAkBH,OAAO,IAC1DI,GAAaH,EAAAA,EAAAA,KAAaC,IAAK,IAAAG,EAAA,OAAqB,QAArBA,EAAKH,EAAME,kBAAU,IAAAC,OAAA,EAAhBA,EAAkBC,QAAQ,IAC9DC,GAAQN,EAAAA,EAAAA,KAAaC,IAAK,IAAAM,EAAA,OAAqB,QAArBA,EAAKN,EAAME,kBAAU,IAAAI,OAAA,EAAhBA,EAAkBD,KAAK,IACtDE,GAA+BR,EAAAA,EAAAA,KAAYC,IAAK,IAAAQ,EAAA,OAAqB,QAArBA,EAAIR,EAAMS,mBAAW,IAAAD,OAAA,EAAjBA,EAAmBD,4BAA4B,IAEnGG,GAAWC,EAAAA,EAAAA,OAEVC,EAAiBC,IAAsBC,EAAAA,EAAAA,UAAS,CACrDC,cAAe,GACfC,eAAgB,GAChBC,cAAe,KACfC,UAAW,QAGNC,EAAUC,IAAeN,EAAAA,EAAAA,UAAS,KAClCO,EAAUC,IAAeR,EAAAA,EAAAA,UAAS,OAClCS,EAAWC,IAAgBV,EAAAA,EAAAA,WAAS,IACpCW,EAAYC,IAAiBZ,EAAAA,EAAAA,WAAS,GAEvCa,EAAyB,CAC7B,CAAEC,IAAK,KAAMC,KAAM,OAAQC,QAAQ,GACnC,CAAEF,IAAK,OAAQC,KAAM,QACrB,CAAED,IAAK,OAAQC,KAAM,QACrB,CAAED,IAAK,OAAQC,KAAM,QACrB,CAAED,IAAK,gBAAiBC,KAAM,iBAC9B,CAAED,IAAK,iBAAkBC,KAAM,kBAC/B,CAAED,IAAK,gBAAiBC,KAAM,iBAE9B,CACED,IAAK,YACLC,KAAM,aACNE,WAAaC,IAEX,MAAMC,EAAiC,QAAzBD,EAAOE,IAAIhB,UAAsB,SAAW,QAE1D,OACEiB,EAAAA,EAAAA,KAAA,OACEC,MAAO,CACLC,gBAAiBJ,EACjBA,MAAO,QACPK,QAAS,MACTC,UAAW,SACXC,aAAc,MACdC,SAAU,QACVC,SAEwB,QAAzBV,EAAOE,IAAIhB,UAAsB,OAAS,UACvC,GAIZ,CACEU,IAAK,OACLC,KAAM,OACNC,QAAQ,EACRC,WAAaC,IACXG,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACC,QAASA,IAAMC,EAAWb,EAAOE,KAAKQ,UAChDP,EAAAA,EAAAA,KAACW,EAAAA,EAAc,SA4CvBC,EAAAA,EAAAA,YAAU,KACRC,EAAAA,EAAMC,IAAI,GAADC,OAAIpD,EAAO,8CAA8C,CAAEkC,OAAQ,CAAEmB,eAA4C,OAA5B5C,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8B4C,kBACzHC,MAAMC,IACL,MAAMC,EAAOD,EAAIC,KAEjB,GAAIA,EAAKC,OAAS,EAAG,CAEnB,MAAMC,EAAcF,EAAKA,EAAKC,OAAS,GAGvCnC,EAAYkC,GAGkB,QAA1BE,EAAYtC,WACdI,EAAYkC,GACZ3C,EAAmB,CACjBI,cAAeuC,EAAYvC,eAAiB,GAC5CC,UAAWsC,EAAYtC,WAAa,OAGtCI,EAAY,MACZT,EAAmB,CACjBI,cAAe,KACfC,UAAW,OAGjB,KAEDuC,OAAOC,IACNC,QAAQC,IAAIF,EAAI,GAChB,GACH,CAACnC,EAAWzB,EAAqC,OAA5BS,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8B4C,iBAItD,MAAMN,EAAcS,IAClBzC,EAAmB,CACjBE,cAAeuC,EAAKvC,eAAiB,GACrCC,eAAgBsC,EAAKtC,gBAAkB,GACvCC,cAAeqC,EAAKrC,eAAiB,GACrCC,UAAWoC,EAAKpC,WAAa,KAE/BQ,GAAc,EAAK,EAGfmC,EAAcA,KAClBhD,EAAmB,CACjBE,cAAe,GACfC,eAAgB,GAChBC,cAAe,KACfC,UAAW,OAEbQ,GAAc,EAAM,EAGhBoC,EAAgBC,IACpB,MAAM,KAAElC,EAAI,MAAEmC,EAAK,KAAEC,EAAI,QAAEC,GAAYH,EAAEI,OACzCtD,GAAoBuD,IAAI,IACnBA,EACH,CAACvC,GAAgB,aAAToC,EAAuBC,EAAU,MAAQ,KAAQF,KACxD,EAsBL,OACEK,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA5B,SAAA,EACE2B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,gBAAe7B,SAAA,EAC5BP,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,OAAKoC,UAAU,qBAAoB7B,SAChC,CACC,CAAE8B,GAAI,gBAAiBC,MAAO,iBAAkBR,KAAM,YACtD,CAAEO,GAAI,iBAAkBC,MAAO,kBAAmBR,KAAM,YACxD,CAAEO,GAAI,gBAAiBC,MAAO,iBAAkBR,KAAM,SACtD,CAAEO,GAAI,YAAaC,MAAO,kBAAmBR,KAAM,UACnDS,KAAI,CAACC,EAAOC,KACZzC,EAAAA,EAAAA,KAAA,OAAKoC,UAAU,oBAAmB7B,SAClB,cAAbiC,EAAMH,IAAwD,QAAlC5D,EAAgBK,cAE3C,MAGAoD,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA5B,SAAA,EAEE2B,EAAAA,EAAAA,MAAA,SAAOQ,QAASF,EAAMH,GAAG9B,SAAA,CACtBiC,EAAMF,MAAM,KAACtC,EAAAA,EAAAA,KAAA,QAAAO,SAAM,SAGR,kBAAbiC,EAAMH,IACTH,EAAAA,EAAAA,MAAA,OAAKE,UAAU,2BAA0B7B,SAAA,EACnCP,EAAAA,EAAAA,KAAA,SACE8B,KAAK,QACLO,GAAE,GAAAtB,OAAKyB,EAAMH,GAAE,QACf3C,KAAM8C,EAAMH,GACZR,MAAM,MACNE,QAAuC,QAA9BtD,EAAgB+D,EAAMH,IAC/BM,SAAUhB,EACViB,SAAU1D,GAAYI,KAExBU,EAAAA,EAAAA,KAAA,SAAO0C,QAAO,GAAA3B,OAAKyB,EAAMH,GAAE,QAAO9B,SAAC,SAEnCP,EAAAA,EAAAA,KAAA,SACE8B,KAAK,QACLO,GAAE,GAAAtB,OAAKyB,EAAMH,GAAE,OACf3C,KAAM8C,EAAMH,GACZR,MAAM,KACNe,SAAU1D,GAAWI,EACrByC,QAAuC,OAA9BtD,EAAgB+D,EAAMH,IAC/BM,SAAUhB,KAGZ3B,EAAAA,EAAAA,KAAA,SAAO0C,QAAO,GAAA3B,OAAKyB,EAAMH,GAAE,OAAM9B,SAAC,UAGrB,cAAbiC,EAAMH,IAAwD,QAAlC5D,EAAgBK,eAC9CoD,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAA5B,SAAA,EACEP,EAAAA,EAAAA,KAAA,SACE8B,KAAK,QACLO,GAAE,GAAAtB,OAAKyB,EAAMH,GAAE,QACf3C,KAAM8C,EAAMH,GACZR,MAAM,MACNE,QAAuC,QAA9BtD,EAAgB+D,EAAMH,IAC/BM,SAAUhB,EACViB,SAAUtD,KAKZU,EAAAA,EAAAA,KAAA,SAAO0C,QAAO,GAAA3B,OAAKyB,EAAMH,GAAE,QAAO9B,SAAC,SAEnCP,EAAAA,EAAAA,KAAA,SACE8B,KAAK,QACLO,GAAE,GAAAtB,OAAKyB,EAAMH,GAAE,OACf3C,KAAM8C,EAAMH,GACZR,MAAM,KACNE,QAAuC,OAA9BtD,EAAgB+D,EAAMH,IAC/BM,SAAUhB,EACViB,SAAUtD,KAIZU,EAAAA,EAAAA,KAAA,SAAO0C,QAAO,GAAA3B,OAAKyB,EAAMH,GAAE,OAAM9B,SAAC,UAGvB,cAAbiC,EAAMH,IAAmC,kBAAbG,EAAMH,KAChCrC,EAAAA,EAAAA,KAAA,YACEqC,GAAIG,EAAMH,GACV3C,KAAM8C,EAAMH,GACZR,MAAOpD,EAAgB+D,EAAMH,IAC7BM,SAAUhB,EACVkB,SAAUvD,QA1EkBmD,WAuF9CzC,EAAAA,EAAAA,KAAA,UAEAkC,EAAAA,EAAAA,MAAA,OAAKE,UAAU,qBAAoB7B,SAAA,CAChCjB,IAAcU,EAAAA,EAAAA,KAAA,UAAQS,QAASiB,EAAYnB,SAAC,WAC3CjB,IAAcU,EAAAA,EAAAA,KAAA,UAAQS,QAzHTqC,KACnB,MAAM3B,EAAO,IACR1C,EACHuC,eAA4C,OAA5B5C,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8B4C,eAC9C+B,UAAqB,OAAVhF,QAAU,IAAVA,OAAU,EAAVA,EAAYiF,SACvBC,KAAK,UAGPpC,EAAAA,EACGqC,KAAK,GAADnC,OAAIpD,EAAO,8CAA8CwD,GAC7DF,MAAMC,IACL,MAAOY,EAAMqB,GAAW,CAACC,OAAOC,KAAKnC,EAAIC,MAAM,GAAIiC,OAAOE,OAAOpC,EAAIC,MAAM,IAC3E5C,EAAS,CAAEuD,KAAM,QAASD,MAAO,CAAEsB,UAASrB,UAC5CzC,GAAc4C,IAAUA,IACxBP,GAAa,IAEdJ,OAAOC,GAAQC,QAAQC,IAAIF,IAAK,EAyGehB,SAAC,cAGhDvB,EAASoC,OAAS,IACjBpB,EAAAA,EAAAA,KAACuD,EAAAA,EAAS,CAACC,QAAShE,EAAwBiE,QAASzE,KAGvDgB,EAAAA,EAAAA,KAAC0D,EAAAA,EAAU,CAACC,QAASzF,EAAMiF,QAASF,KAAM/E,EAAM4D,SAC/C,C","sources":["IP_Workbench/Doctor/IP_ProgressNotes.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport ToastAlert from \"../../OtherComponent/ToastContainer/ToastAlert\";\r\nimport { IconButton } from '@mui/material';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport ReactGrid from '../../OtherComponent/ReactGrid/ReactGrid';\r\n\r\nconst IP_ProgressNotes = () => {\r\n  const UrlLink = useSelector((state) => state.userRecord?.UrlLink);\r\n  const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n  const toast = useSelector((state) => state.userRecord?.toast);\r\n  const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [IpProgressNotes, setIpProgressNotes] = useState({\r\n    ProgressNotes: \"\",\r\n    TreatmentNotes: \"\",\r\n    AdverseEvents: \"no\", // This will store \"yes\" or \"no\"\r\n    colorFlag: \"no\", // This will store \"yes\" or \"no\"\r\n  });\r\n\r\n  const [gridData, setGridData] = useState([]);\r\n  const [lastdata, setlastdata] = useState(null);\r\n  const [IsGetData, setIsGetData] = useState(false);\r\n  const [IsViewMode, setIsViewMode] = useState(false);\r\n\r\n  const IpProgressNotesColumns = [\r\n    { key: 'id', name: 'S.No', frozen: true },\r\n    { key: 'Date', name: 'Date' },\r\n    { key: 'Time', name: 'Time' },\r\n    { key: 'Type', name: 'Type' },\r\n    { key: 'ProgressNotes', name: 'ProgressNotes' },\r\n    { key: 'TreatmentNotes', name: 'TreatmentNotes' },\r\n    { key: 'AdverseEvents', name: 'AdverseEvents' },\r\n    // { key: 'colorFlag', name: 'colorFlag' },\r\n    {\r\n      key: 'colorFlag',\r\n      name: 'Color Flag',\r\n      renderCell: (params) => {\r\n        // Determine the background color based on the value of colorFlag\r\n        const color = params.row.colorFlag === \"yes\" ? \"orange\" : \"green\";\r\n        \r\n        return (\r\n          <div\r\n            style={{\r\n              backgroundColor: color,\r\n              color: 'white',\r\n              padding: '5px',\r\n              textAlign: 'center',\r\n              borderRadius: '4px',\r\n              minWidth: '60px', // Adjust size as needed\r\n            }}\r\n          >\r\n            {params.row.colorFlag === \"yes\" ? 'Open' : 'Closed'}\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      key: 'view',\r\n      name: 'View',\r\n      frozen: true,\r\n      renderCell: (params) => (\r\n        <IconButton onClick={() => handleView(params.row)}>\r\n          <VisibilityIcon />\r\n        </IconButton>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  // useEffect(() => {\r\n  //   axios.get(`${UrlLink}Ip_Workbench/IP_ProgressNotes_Details_Link`, { params: { RegistrationId: IP_DoctorWorkbenchNavigation?.RegistrationId } })\r\n  //     .then((res) => {\r\n  //       setGridData(res.data);\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       console.log(err);\r\n  //     });\r\n  // }, [IsGetData, UrlLink, IP_DoctorWorkbenchNavigation?.RegistrationId]);\r\n\r\n\r\n  // useEffect(() => {\r\n  //   axios.get(`${UrlLink}Ip_Workbench/IP_ProgressNotes_Details_Link`, { params: { RegistrationId: IP_DoctorWorkbenchNavigation?.RegistrationId } })\r\n  //     .then((res) => {\r\n  //       const data = res.data;\r\n  \r\n  //       if (data.length > 0) {\r\n  //         // Sort by id or date to get the most recent entry\r\n  //         // Assuming data is sorted by id or use another field to determine the latest entry\r\n  //         const latestEntry = data[data.length - 1]; // Use appropriate logic to get the latest entry\r\n  \r\n  //         // Set grid data\r\n  //         setGridData(data);\r\n          \r\n  //         // Prepopulate IpProgressNotes with the latest entry's AdverseEvents and colorFlag\r\n  //         setIpProgressNotes({\r\n  //           AdverseEvents: latestEntry.AdverseEvents || '',\r\n  //           colorFlag: latestEntry.colorFlag || '',\r\n  //         });\r\n  //       }\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       console.log(err);\r\n  //     });\r\n  // }, [IsGetData, UrlLink, IP_DoctorWorkbenchNavigation?.RegistrationId]);\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    axios.get(`${UrlLink}Ip_Workbench/IP_ProgressNotes_Details_Link`, { params: { RegistrationId: IP_DoctorWorkbenchNavigation?.RegistrationId } })\r\n      .then((res) => {\r\n        const data = res.data;\r\n  \r\n        if (data.length > 0) {\r\n          // Sort by id or another field to get the most recent entry\r\n          const latestEntry = data[data.length - 1]; // Assuming the most recent entry is last\r\n  \r\n          // Set grid data\r\n          setGridData(data);\r\n  \r\n          // Update state based on the latest entry's AdverseEvents and colorFlag\r\n          if (latestEntry.colorFlag === \"yes\" ) {\r\n            setlastdata(latestEntry)\r\n            setIpProgressNotes({\r\n              AdverseEvents: latestEntry.AdverseEvents || '',\r\n              colorFlag: latestEntry.colorFlag || '',\r\n            });\r\n          } else {\r\n            setlastdata(null)\r\n            setIpProgressNotes({\r\n              AdverseEvents: 'no',\r\n              colorFlag: 'no', // Clear the colorFlag if it is \"no\"\r\n            });\r\n          }\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, [IsGetData, UrlLink, IP_DoctorWorkbenchNavigation?.RegistrationId]);\r\n  \r\n\r\n\r\n  const handleView = (data) => {\r\n    setIpProgressNotes({\r\n      ProgressNotes: data.ProgressNotes || '',\r\n      TreatmentNotes: data.TreatmentNotes || '',\r\n      AdverseEvents: data.AdverseEvents || '',\r\n      colorFlag: data.colorFlag || '', // Assuming you want to prepopulate this too\r\n    });\r\n    setIsViewMode(true);\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setIpProgressNotes({\r\n      ProgressNotes: '',\r\n      TreatmentNotes: '',\r\n      AdverseEvents: 'no',\r\n      colorFlag: 'no',\r\n    });\r\n    setIsViewMode(false);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    setIpProgressNotes((prev) => ({\r\n      ...prev,\r\n      [name]: type === 'checkbox' ? (checked ? 'yes' : 'no') : value,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const data = {\r\n      ...IpProgressNotes,\r\n      RegistrationId: IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n      Createdby: userRecord?.username,\r\n      Type:'Doctor'\r\n    };\r\n\r\n    axios\r\n      .post(`${UrlLink}Ip_Workbench/IP_ProgressNotes_Details_Link`, data)\r\n      .then((res) => {\r\n        const [type, message] = [Object.keys(res.data)[0], Object.values(res.data)[0]];\r\n        dispatch({ type: 'toast', value: { message, type } });\r\n        setIsGetData((prev) => !prev);\r\n        handleClear();\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"form-section5\">\r\n        <br />\r\n        <div className=\"Otdoctor_intra_Con\">\r\n          {[\r\n            { id: \"ProgressNotes\", label: \"Progress Notes\", type: \"textarea\" },\r\n            { id: \"TreatmentNotes\", label: \"Treatment Notes\", type: \"textarea\" },\r\n            { id: \"AdverseEvents\", label: \"Adverse Events\", type: \"radio\" },\r\n            { id: \"colorFlag\", label: \"Is Adverse Open\", type: \"radio\" },\r\n          ].map((field, indx) => (\r\n            <div className=\"text_adjust_mt_Ot\" key={indx}>\r\n              {field.id === \"colorFlag\" && IpProgressNotes.AdverseEvents !== \"yes\" ? (\r\n                // Do not render anything if colorFlag should be hidden\r\n                null\r\n              ) : (\r\n             \r\n                <>\r\n                \r\n                  <label htmlFor={field.id}>\r\n                    {field.label} <span>:</span>\r\n                  </label>\r\n\r\n                  {field.id === \"AdverseEvents\" ? (\r\n                <div className=\"text_adjust_mt_Ot_rado_0\">\r\n                      <input\r\n                        type=\"radio\"\r\n                        id={`${field.id}_yes`}\r\n                        name={field.id}\r\n                        value=\"yes\"\r\n                        checked={IpProgressNotes[field.id] === \"yes\"}\r\n                        onChange={handleChange}\r\n                        disabled={lastdata || IsViewMode}\r\n                      />\r\n                      <label htmlFor={`${field.id}_yes`}>Yes</label>\r\n\r\n                      <input\r\n                        type=\"radio\"\r\n                        id={`${field.id}_no`}\r\n                        name={field.id}\r\n                        value=\"no\"\r\n                        disabled={lastdata ||IsViewMode}\r\n                        checked={IpProgressNotes[field.id] === \"no\"}\r\n                        onChange={handleChange}\r\n                        // disabled={IpProgressNotes.AdverseEvents === \"yes\"}\r\n                      />\r\n                      <label htmlFor={`${field.id}_no`}>No</label>\r\n                    </div>\r\n                    \r\n                  ) : field.id === \"colorFlag\" && IpProgressNotes.AdverseEvents === \"yes\" ? (\r\n                    <>\r\n                      <input\r\n                        type=\"radio\"\r\n                        id={`${field.id}_yes`}\r\n                        name={field.id}\r\n                        value=\"yes\"\r\n                        checked={IpProgressNotes[field.id] === \"yes\"}\r\n                        onChange={handleChange}\r\n                        disabled={IsViewMode}\r\n                        // disabled={IpProgressNotes.colorFlag === \"no\"}\r\n\r\n\r\n                      />\r\n                      <label htmlFor={`${field.id}_yes`}>Yes</label>\r\n\r\n                      <input\r\n                        type=\"radio\"\r\n                        id={`${field.id}_no`}\r\n                        name={field.id}\r\n                        value=\"no\"\r\n                        checked={IpProgressNotes[field.id] === \"no\"}\r\n                        onChange={handleChange}\r\n                        disabled={IsViewMode}\r\n                        // disabled={IpProgressNotes.colorFlag === \"no\"}\r\n\r\n                      />\r\n                      <label htmlFor={`${field.id}_no`}>No</label>\r\n                    </>\r\n                  ) : (\r\n                    field.id !== \"colorFlag\" && field.id !== \"AdverseEvents\" && (\r\n                      <textarea\r\n                        id={field.id}\r\n                        name={field.id}\r\n                        value={IpProgressNotes[field.id]}\r\n                        onChange={handleChange}\r\n                        readOnly={IsViewMode}\r\n                      ></textarea>\r\n                    )\r\n                  )}\r\n                </>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n\r\n      </div>\r\n\r\n      <br />\r\n\r\n      <div className=\"Main_container_Btn\">\r\n        {IsViewMode && <button onClick={handleClear}>Clear</button>}\r\n        {!IsViewMode && <button onClick={handleSubmit}>Submit</button>}\r\n      </div>\r\n\r\n      {gridData.length > 0 && (\r\n        <ReactGrid columns={IpProgressNotesColumns} RowData={gridData} />\r\n      )}\r\n\r\n      <ToastAlert Message={toast.message} Type={toast.type} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IP_ProgressNotes;\r\n"],"names":["IP_ProgressNotes","UrlLink","useSelector","state","_state$userRecord","userRecord","_state$userRecord2","UserData","toast","_state$userRecord3","IP_DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","dispatch","useDispatch","IpProgressNotes","setIpProgressNotes","useState","ProgressNotes","TreatmentNotes","AdverseEvents","colorFlag","gridData","setGridData","lastdata","setlastdata","IsGetData","setIsGetData","IsViewMode","setIsViewMode","IpProgressNotesColumns","key","name","frozen","renderCell","params","color","row","_jsx","style","backgroundColor","padding","textAlign","borderRadius","minWidth","children","IconButton","onClick","handleView","VisibilityIcon","useEffect","axios","get","concat","RegistrationId","then","res","data","length","latestEntry","catch","err","console","log","handleClear","handleChange","e","value","type","checked","target","prev","_jsxs","_Fragment","className","id","label","map","field","indx","htmlFor","onChange","disabled","readOnly","handleSubmit","Createdby","username","Type","post","message","Object","keys","values","ReactGrid","columns","RowData","ToastAlert","Message"],"sourceRoot":""}