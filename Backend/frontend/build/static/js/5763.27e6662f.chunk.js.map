{"version":3,"file":"static/js/5763.27e6662f.chunk.js","mappings":"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","sources":["IP_Workbench/Nurse/Ip_DrugAdministrationRequest.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport { useSelector } from \"react-redux\";\r\nimport Button from \"@mui/material/Button\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport ReactGrid from '../../OtherComponent/ReactGrid/ReactGrid';\r\nimport { format } from \"date-fns\";\r\n// import Barcode from \"react-barcode\";\r\nimport jsPDF from 'jspdf';\r\nimport { useReactToPrint } from 'react-to-print';\r\n// import { toPng } from 'html-to-image';\r\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';\r\nimport { ImCancelCircle } from \"react-icons/im\";\r\n\r\nconst Ip_DrugAdministrationRequest = () => {\r\n\r\n  const [issueddrugs, setissueddrugs] = useState([]);\r\n  const [isChecked , setisChecked] = useState(false);\r\n  const [isChecked1 , setisChecked1] = useState(false);\r\n  const [ClinicDetails, setClinicDetails] = useState({});\r\n  const [selectedVital, setSelectedVital] = useState([]);\r\n  const [Savedata, setsavedata] = useState([]);\r\n  const [prescriptionData, setPrescriptionData] = useState([]);\r\n  const [clinicLogo, setClinicLogo] = useState(null);\r\n  const [doctorsign, setDoctorSign] = useState(null);\r\n  const [isprintopen, setisprintopen] = useState(true);\r\n  const [totalquantity, settotalquantity] = useState(0);\r\n  const [requesttype, setrequesttype] = useState('Inhouse')\r\n  const [issuedquantity, setissuedquatity] = useState(0);\r\n  const [prescriptioncode, setprescriptioncode] = useState('')\r\n  const [dummy, setdummy] = useState([])\r\n  const [page, setPage]  = useState(0);\r\n  const [pagetype ,setpagetype] = useState('Request');\r\n  const [column , setcolumn] = useState([])\r\n  const [ordertype , setordertype] = useState('');\r\n  const [selectedDate, setselectedDate] = useState('')\r\n  const pageSize = 10;\r\n  const showdown = issueddrugs.length;\r\n  const totalPages = Math.ceil(issueddrugs.length / 10);\r\n  const handlePageChange = (params) => {\r\n    setPage(params.page);\r\n  };\r\n  const [pdfBlob, setPdfBlob] = useState(null);\r\n  const [preview, setpreview] = useState(false);\r\n  const UrlLink = useSelector((state) => state.userRecord?.UrlLink);\r\n  const blockInvalidChar = (e) =>\r\n    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) && e.preventDefault();\r\n\r\n    const userRecord = useSelector(\r\n        (state)=> state.userRecord?.UserData\r\n    )\r\n\r\n    const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n    // const UrlLink = useSelector((state) => state.userRecord?.UrlLink);\r\n\r\n      useEffect(() => {\r\n        axios.get(`${UrlLink}usercontrol/getClinic?location=${userRecord?.location}`)\r\n          // console.log(response.data)\r\n          .then(response => {\r\n            const record = response.data[0];\r\n            console.log(response)\r\n            setClinicDetails(record);\r\n    \r\n          })\r\n          .catch(error => {\r\n            console.error('Error:', error);\r\n    \r\n          });\r\n    \r\n        axios\r\n          .get(`${UrlLink}usercontrol/getAccountsetting`)\r\n          .then((response) => {\r\n            console.log(response.data)\r\n            if (response.data) {\r\n              const firstClinic = response.data;\r\n              setClinicLogo(`data:image/png;base64,${firstClinic.Clinic_Logo}`);\r\n            } else {\r\n              console.error('No record found');\r\n            }\r\n          })\r\n          .catch((error) => console.error('Error fetching data'));\r\n      }, []);\r\n    useEffect(()=>{\r\n\r\n       if(pagetype === 'Request') {\r\n        axios.get(`${UrlLink}DrugAdminstrations/get_for_doc_drugs_nurse_request?Bookingid=${IP_DoctorWorkbenchNavigation?.RegistrationId}&Location=${userRecord?.location}`)\r\n        .then((response)=>{\r\n            console.log(response)\r\n            setissueddrugs(\r\n              response.data.map((item, index)=>({\r\n                ...item,\r\n                id : index + 1\r\n              }))\r\n            )\r\n        })\r\n        .catch((error)=>{\r\n            console.log(error)\r\n        })}\r\n        else if (pagetype === 'Approve'){\r\n          axios.get(`${UrlLink}DrugAdminstrations/get_completed_prescribed_medicine`)\r\n          .then((response)=>{\r\n              console.log(response)\r\n              setissueddrugs(\r\n                response.data.map((item, index)=>({\r\n                  ...item,\r\n                  id : index + 1\r\n                }))\r\n              )\r\n          })\r\n          .catch((error)=>{\r\n              console.log(error) \r\n          })\r\n        }\r\n    },[isChecked, pagetype,isChecked1 ])\r\n\r\n    console.log('issueddrugs', issueddrugs);\r\n    \r\n\r\n    useEffect(() => {\r\n      const currentDate = new Date().toISOString().split('T')[0];\r\n      // setAppointmentDate(currentDate);\r\n      setselectedDate(new Date(), 'Asia/Kolkata');\r\n    }, []);\r\n  \r\n    const currdate = selectedDate && format(selectedDate, ' dd / MM / yy');\r\n\r\n    useEffect(()=>{\r\n      axios.get(`${UrlLink}ipregistration/get_drug_for_pharmacy_billing`)\r\n      .then((response)=>{\r\n        console.log(response)\r\n        const data = response.data\r\n        console.log(data)\r\n\r\n        setPrescriptionData(data)\r\n      })\r\n      .catch((error)=>{\r\n        console.log(error)\r\n      })\r\n    },[]);\r\n    \r\n    const formatLabel = (label) => {\r\n      // Check if the label contains both uppercase and lowercase letters, and doesn't contain numbers\r\n      if (/[a-z]/.test(label) && /[A-Z]/.test(label) && !/\\d/.test(label)) {\r\n        return label\r\n          .replace(/([a-z])([A-Z])/g, \"$1 $2\") // Add space between lowercase and uppercase letters\r\n          .replace(/^./, (str) => str.toUpperCase()); // Capitalize first letter\r\n      } else {\r\n        return label;\r\n      }\r\n    };\r\n  \r\n    function getTextWidth(text) {\r\n      // Create a dummy element to measure text width\r\n      const dummyElement = document.createElement(\"span\");\r\n      dummyElement.textContent = text;\r\n      dummyElement.style.visibility = \"hidden\";\r\n      dummyElement.style.whiteSpace = \"nowrap\";\r\n      document.body.appendChild(dummyElement);\r\n  \r\n      // Get the width of the text\r\n      const width = dummyElement.offsetWidth;\r\n  \r\n      // Remove the dummy element\r\n      document.body.removeChild(dummyElement);\r\n  \r\n      return width;\r\n    }\r\n    // Define the columns dynamically\r\n\r\n    const handleStatusChange = (row) => {\r\n      console.log('row:', row);\r\n    \r\n      axios.post(`${UrlLink}DrugAdminstrations/insert_nurse_received_drugs`, row)\r\n        .then((response) => {\r\n          console.log('Response:', response.data);\r\n         \r\n          setisChecked1(!isChecked1)\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error:', error);\r\n          \r\n        });\r\n    };\r\n    const handleStatusChange1=(row)=>{\r\n      console.log('row.......................', row)\r\n\r\n    }\r\n    \r\n    \r\n    // Define common columns\r\nconst commonColumns = [\r\n  { key: \"id\", name: \"S No\" },\r\n  { key: \"BookingId\", name: \"Booking ID\" },\r\n  { key: \"PrescriptionId\", name: \"Prescription ID\" },\r\n  { key: \"Department\", name: \"Department\" },\r\n  { key: \"DoctorName\", name: \"Doctor Name\" },\r\n  { key: \"GenericName\", name: \"Generic Name\" },\r\n  { key: \"MedicineCode\", name: \"Medicine Code\" },\r\n  { key: \"MedicineName\", name: \"Medicine Name\" },\r\n  { key: \"Dosage\", name: \"Dosage\" },\r\n  { key: \"Route\", name: \"Route\" },\r\n  { key: \"Quantity\", name: \"Quantity\" },\r\n  {\r\n    key: \"Action\",\r\n    name: \"View\",\r\n    renderCell: (params ) => (\r\n      <Button className=\"cell_btn\" onClick={() => handleChange(params.row)}>\r\n        <EditIcon />\r\n      </Button>\r\n    ),\r\n  },\r\n];\r\n\r\n// Function to dynamically generate columns\r\nconst dynamicColumns =[\r\n  { key: \"id\", name: \"S No\" },\r\n  { key: \"BookingId\", name: \"Booking ID\" },\r\n  { key: \"PrescriptionId\", name: \"Prescription ID\" },\r\n  { key: \"Department\", name: \"Department\" },\r\n  { key: \"DoctorName\", name: \"Doctor Name\" },\r\n  { key: \"GenericName\", name: \"Generic Name\" },\r\n  { key: \"MedicineCode\", name: \"Medicine Code\" },\r\n  { key: \"MedicineName\", name: \"Medicine Name\" },\r\n  { key: \"Dosage\", name: \"Dosage\" },\r\n  { key: \"Route\", name: \"Route\" },\r\n  { key: \"RecivedQuantity\", name: \"RecivedQuantity\" },\r\n  {\r\n    key: \"Action\",\r\n    name: \"View\",\r\n   \r\n    renderCell: (params) => (\r\n      <>\r\n        <Button className=\"cell_btn\" onClick={() => handleStatusChange(params.row)}>\r\n          <CheckCircleOutlineIcon />\r\n        </Button>\r\n      </>\r\n    ),\r\n  },\r\n  {\r\n    key: \"Actions\",\r\n    name: \"Cancel\",\r\n  \r\n    renderCell: (params) => (\r\n      <>\r\n        <Button className=\"cell_btn\" onClick={() => handleStatusChange1(params.row)}>\r\n          <ImCancelCircle />\r\n        </Button>\r\n      </>\r\n    ),\r\n  },\r\n]\r\n\r\n\r\n   \r\n    const handleChange = (row) => {\r\n      console.log('row', row);\r\n      setisChecked(true);\r\n      settotalquantity(row?.Quantity);\r\n      setdummy(([\r\n        row\r\n      ]))      \r\n    };\r\n\r\n    console.log('dummy', dummy)\r\n    useEffect(() => {\r\n      let newIssuedQuantity = 0;\r\n      if (ordertype === 'Daily') {\r\n        const Frequency = dummy[0]?.FrequencyTime.split(',');\r\n        const Frequencyitem = Frequency.length;\r\n        newIssuedQuantity = Frequencyitem;\r\n      } else if (ordertype === 'Total') {\r\n        newIssuedQuantity = totalquantity;\r\n      }\r\n\r\n     const now = new Date()\r\n     const formattedTime = format(now, \"HH:mm:ss\");\r\n     const newdate = format(new Date(), \"yyyy-MM-dd\");\r\n     \r\n      setissuedquatity(newIssuedQuantity);\r\n    \r\n      setdummy(prev => ({\r\n        ...prev,\r\n        totalquantity: totalquantity,\r\n        issuedquantity: newIssuedQuantity,\r\n        ordertype: ordertype,\r\n        requesttype: requesttype,\r\n        requesttime: `${newdate},${formattedTime}`\r\n      }));\r\n    }, [ordertype, totalquantity]);\r\n    \r\n\r\n    const handlenurserequestdrug = ()=>{\r\n      const postdata = {\r\n        ...dummy\r\n      }\r\n\r\n      if(issuedquantity > 0){\r\n\r\n      axios.post(`${UrlLink}DrugAdminstrations/insert_nurse_request_drugs`,\r\n    postdata)\r\n    .then((response)=>{\r\n      console.log(response)\r\n      setisChecked(false)\r\n      setissuedquatity('')\r\n      settotalquantity('')\r\n      setordertype('')\r\n      if (dummy.length === 0){\r\n        setisprintopen(true)\r\n      }\r\n    })\r\n    .catch((error)=>{\r\n      console.log(error)\r\n    })\r\n  }else{\r\n    alert(\"Please Enter Request Quantity\")\r\n  }\r\n\r\n    };\r\n\r\n    useEffect(()=>{\r\n      axios.get(`${UrlLink}ipregistration/get_barcode_for_inhouse_pharmacy`)\r\n      .then((response)=>{\r\n        console.log(response.data)\r\n        const data = response.data\r\n        setprescriptioncode(data)\r\n      })\r\n      .catch((error)=>{\r\n        console.log(error)\r\n      })\r\n    },[])\r\n\r\n\r\n    // const handlePrint = useReactToPrint({\r\n    //   content: () => document.getElementById('reactprintcontentprescrib'),\r\n    //   onBeforePrint: () => {\r\n    //     console.log('Before');\r\n    //   },\r\n    //   onAfterPrint: async () => {\r\n    //     setPdfBlob(null);\r\n    //     console.log('After');\r\n    //     const printdata = document.getElementById('reactprintcontentprescrib');\r\n    //     console.log('printdata', printdata);\r\n  \r\n    //     try {\r\n  \r\n    //       // if (printdata) {\r\n    //       //   const contentWidth = printdata.offsetWidth;\r\n    //       //   const padding = 20; \r\n    //       //   const pdfWidth = contentWidth + 2 * padding;\r\n    //       //   const pdfHeight = contentWidth * 1.5;\r\n    //       //   const pdf = new jsPDF({\r\n    //       //     unit: 'px',\r\n    //       //     format: [pdfWidth, pdfHeight],\r\n    //       //   });\r\n    //       //   // const barcodeImagecon1 = await toPng(printdata.querySelector('#get_imagecontent_1'));\r\n          \r\n           \r\n    //       //   const barcodeImage1 = await new Promise((resolve, reject) => {\r\n    //       //     const barcodeImg1 = new Image();\r\n    //       //     barcodeImg1.onload = () => resolve(barcodeImg1);\r\n    //       //     barcodeImg1.onerror = reject;\r\n    //       //     barcodeImg1.src = barcodeImagecon1;\r\n    //       //   });\r\n          \r\n    \r\n    //       //   // Append barcode image to the .Register_btn_con_barcode element\r\n    //       //   const barcodeContainer1 = printdata.querySelector('#get_imagecontent_1');\r\n    //       //   barcodeContainer1.innerHTML = ''; // Clear previous content\r\n    //       //   barcodeContainer1.appendChild(barcodeImage1);\r\n    //       //   // Append barcode image to the .Register_btn_con_barcode element\r\n    //       //   pdf.html(printdata, {\r\n    //       //     x: padding, // Set x-coordinate for content\r\n    //       //     y: padding, // Set y-coordinate for content\r\n    //       //     callback: () => {\r\n    //       //       const generatedPdfBlob = pdf.output('blob');\r\n    //       //       setPdfBlob(generatedPdfBlob);\r\n    //       //       console.log('generatedPdfBlob', generatedPdfBlob)\r\n    //       //       // setIsPrintButtonVisible(true)\r\n    //       //     },\r\n  \r\n    //       //   });\r\n    //       // } else {\r\n    //       //   throw new Error('Unable to get the target element');\r\n    //       // }\r\n    //       setpreview(false)\r\n    //     } catch (error) {\r\n    //       console.error('Error generating PDF:', error);\r\n    //     }\r\n    //   }\r\n    // });\r\n\r\n\r\n    console.log('prescriptionData,hdudfhiordoigtrfiotgrouigouierhdujredhyolh', prescriptionData)\r\n    const forprintdata = () =>{\r\n\r\n      return(\r\n        <div className=\"billing-invoice\" id='reactprintcontentprescrib'>\r\n        <div className=\"New_billlling_invoice_head\">\r\n          <div className=\"new_billing_logo_con\">\r\n            <img src={clinicLogo} alt=\"Medical logo\" />\r\n          </div>\r\n          <div className=\"new_billing_address_1 \">\r\n            {/* <span>{ClinicDetails.concern_name}</span> */}\r\n            <div>\r\n                  <span >{ClinicDetails.door_no},</span>\r\n                  </div>\r\n            <div>\r\n              <span >{ClinicDetails?.door_no + ',' + ClinicDetails.street + ',' + ClinicDetails.area + ',' + ClinicDetails.city + ',' + ClinicDetails.state + '-' + ClinicDetails.pincode}</span>\r\n            </div>\r\n            <div>\r\n              <span>{ClinicDetails.phone_no + ' , '}</span>\r\n              <span>{ClinicDetails.ClinicLandLineNo + ' , '}</span>\r\n              <span>{ClinicDetails.email}</span>\r\n            </div>\r\n  \r\n          </div>\r\n  \r\n        </div>\r\n        <div className=\"Register_btn_con\" style={{ color: 'hsl(33,100%,50%)', fontWeight: 600 }}>\r\n          Patient Preview\r\n        </div>\r\n  \r\n        <div className=\"new_billing_address\">\r\n        <div className='Register_btn_con_barcode_prescrib' id=\"get_imagecontent_1\">\r\n          {/* <Barcode value={ prescriptioncode ||''} lineColor=\"black\" height={40} width={0.9} fontSize={12} /> */}\r\n        </div>\r\n          <div className=\"new_billing_address_2\">\r\n            <div className=\"new_billing_div\">\r\n              <label>Patient Name <span>:</span></label>\r\n              <span>{IP_DoctorWorkbenchNavigation?.PatientName}</span>\r\n            </div>\r\n            <div className=\"new_billing_div\">\r\n              <label>Patient ID <span>:</span></label>\r\n              <span>{IP_DoctorWorkbenchNavigation?.PatientId}</span>\r\n            </div>\r\n            <div className=\"new_billing_div\">\r\n              <label>Age <span>:</span></label>\r\n              <span>{IP_DoctorWorkbenchNavigation?.Age}</span>\r\n            </div>\r\n            <div className=\"new_billing_div\">\r\n              <label>Gender <span>:</span></label>\r\n              <span>{IP_DoctorWorkbenchNavigation?.Gender}</span>\r\n            </div>\r\n            {/* <div className=\"new_billing_div\">\r\n                      <label>Next Appointment <span>:</span></label>\r\n                      <span>{selectedVital[2]?.Next_Appointment}</span>\r\n                  </div> */}\r\n  \r\n          </div>\r\n          <div className=\"new_billing_address_2\">\r\n            \r\n            <div className=\"new_billing_div\">\r\n              <label>Date <span>:</span></label>\r\n              <span>{currdate}</span>\r\n            </div>\r\n            <div className=\"new_billing_div\">\r\n              <label>Room No <span>:</span></label>\r\n              <span>{IP_DoctorWorkbenchNavigation?.RoomNo} /{IP_DoctorWorkbenchNavigation?.RoomType}-{IP_DoctorWorkbenchNavigation?.WardName}</span>\r\n            </div>\r\n  \r\n            {/* <div className=\"new_billing_div\">\r\n                      <label>Date <span>:</span></label>\r\n                      <span>{Billing_date}</span>\r\n                  </div> */}\r\n            <div className=\"new_billing_div\">\r\n              <label> Attender No <span>:</span></label>\r\n              <span>{IP_DoctorWorkbenchNavigation?.AttenderMobileNo}</span>\r\n            </div>\r\n            <div className=\"new_billing_div\">\r\n              <label> Patient No <span>:</span></label>\r\n              <span>{IP_DoctorWorkbenchNavigation?.PatientPhoneNo}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n  \r\n        \r\n        <div className=\"Register_btn_con\" style={{ color: 'hsl(33,100%,50%)', fontWeight: 600 }}>\r\n          Prescription\r\n        </div>\r\n        <div className=\"new_billing_invoice_detials summa_table_for_priscribtion\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>S.No</th>\r\n                <th>Generic Name</th>\r\n                <th>Item Name</th>\r\n                {/* <th>Medicine</th> */}\r\n                <th>Dose</th>\r\n                <th>Route</th>\r\n                {/* <th>Frequency</th> */}\r\n                {/* <th>Duration</th> */}\r\n                <th>Qty</th>\r\n                {/* <th>Instruction</th> */}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n  \r\n              {prescriptionData.map((medicine, index) => {\r\n                return (\r\n                  <tr key={index}>\r\n                    <td>{index + 1}</td>\r\n                    <td>{medicine.GenericName}</td>\r\n                    <td>{medicine.MedicineName}</td>\r\n                    {/* <td>{medicine.Medicine}</td> */}\r\n                    <td>{medicine.Dosage}</td>\r\n                    <td>{medicine.Route}</td>\r\n                    {/* <td>{medicine.Frequency}</td> */}\r\n                    {/* <td>{medicine.Duration}</td> */}\r\n                    <td>{medicine.RequestQuantity}</td>\r\n                    {/* <td>{medicine.Instruction}</td> */}\r\n                  </tr>\r\n                )\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n  \r\n  \r\n        <div className=\"new_billing_invoice_detials \" style={{ paddingBottom: '10px', height: '70px' }}>\r\n  \r\n          <div className=\"invoice_detials_total_1 neww_invoicedetials\">\r\n            \r\n            <div className=\"total_con_bill\">\r\n              <div className=\"bill_body\">\r\n                <label>Doctor Name <span>:</span></label>\r\n                <span>{IP_DoctorWorkbenchNavigation?.PrimaryDoctor}</span>\r\n              </div>\r\n              <div className=\"bill_body\">\r\n                <label> Doctor sign <span>:</span></label>\r\n                <img src={doctorsign} alt=\"sign\"\r\n                  style={{ width: '90px', height: '40px', marginLeft: '50px' }}\r\n                />\r\n              </div>\r\n              {/* <div className=\"bill_body\">\r\n                          <label>Net Amount <span>:</span></label>\r\n                          <span>{initialState.totalNetAmount}</span>\r\n                      </div> */}\r\n  \r\n            </div>\r\n          </div>\r\n         \r\n  \r\n        </div>\r\n        \r\n\r\n          \r\n\r\n      </div>\r\n      )\r\n    }\r\n\r\n\r\n    \r\n  return (\r\n    <>\r\n\r\n    <div className=\"Main_container_app\">\r\n      <div className=\"\">\r\n                    <div className=\"RegisterType\">\r\n                        {[\"Request\", \"Approve\"].map((p, ind) => (\r\n                            <div className=\"registertypeval\" key={ind}>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    id={p}\r\n                                    name=\"pagetype\"\r\n                                    checked={pagetype === p}\r\n                                    onChange={(e) => setpagetype(e.target.value)}\r\n                                    value={p}\r\n                                />\r\n                                <label htmlFor={p}>\r\n                                    {p}\r\n                                </label>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n      </div>\r\n          {isprintopen ?\r\n          <>\r\n     { pagetype === 'Request' && <ReactGrid columns={commonColumns} RowData={issueddrugs} />}\r\n       \r\n     {pagetype === 'Approve' && \r\n          <ReactGrid columns={dynamicColumns} RowData={issueddrugs} />\r\n          }\r\n            <div className=\"RegisFormcon\">\r\n\r\n\r\n\r\n        {isChecked && pagetype === 'Request'?(\r\n        <>\r\n       \r\n       <div className=\"RegisForm_1\">\r\n                    <label>\r\n                    Order Type <span>:</span>\r\n                    </label>\r\n                    <select\r\n                    name=\"RequestType\"\r\n                    value={requesttype}\r\n                    onChange={((e)=>setrequesttype(e.target.value))}\r\n                    >\r\n                    {/* <option value=\"\">Select</option> */}\r\n                    <option value=\"Inhouse\">In House</option>\r\n                    <option value=\"Outsourced\">Out Source</option>\r\n                    <option value=\"Replacement\">Replacement</option>\r\n                  </select>\r\n                  </div>\r\n              \r\n                  <div className=\"RegisForm_1\">\r\n                    <label>\r\n                      Quantity <span>:</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"number\"\r\n                      onKeyDown={blockInvalidChar}\r\n                      value={totalquantity}\r\n                      readOnly\r\n                     \r\n                    />\r\n                  </div>\r\n                  \r\n                  <div className=\"RegisForm_1\">\r\n                    <label>\r\n                    Request Type <span>:</span>\r\n                    </label>\r\n                    <select\r\n                    name=\"RequestType\"\r\n                    value={ordertype}\r\n                    onChange={((e)=>setordertype(e.target.value))}\r\n                    >\r\n                    <option value=\"\">Select</option>\r\n                    <option value=\"Total\">Total</option>\r\n                    <option value=\"Daily\">Daily</option>\r\n                  </select>\r\n\r\n                    \r\n                  </div>\r\n                  <div className=\"RegisForm_1\">\r\n                    <label>\r\n                    Request Quantity <span>:</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"number\"\r\n                      onKeyDown={blockInvalidChar}\r\n                      value={issuedquantity}\r\n                      readOnly\r\n                    \r\n                    />\r\n\r\n                    \r\n                  </div>\r\n\r\n                <div\r\n                  style={{\r\n                    display: \"grid\",\r\n                    placeItems: \"center\",\r\n                    width: \"100%\",\r\n                  }}\r\n                >\r\n                  <button className=\"btn-add\" onClick={()=>handlenurserequestdrug()}>\r\n                    Add\r\n                  </button>\r\n                </div>\r\n\r\n \r\n\r\n        </>\r\n        \r\n        ):null}\r\n\r\n        \r\n      </div> \r\n      \r\n      </>: forprintdata() }\r\n        {/* {isprintopen?null:<button onClick={handlePrint} className=\"print_button\" >\r\n            Print\r\n          </button>} */}\r\n\r\n          </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Ip_DrugAdministrationRequest"],"names":["Ip_DrugAdministrationRequest","issueddrugs","setissueddrugs","useState","isChecked","setisChecked","isChecked1","setisChecked1","ClinicDetails","setClinicDetails","selectedVital","setSelectedVital","Savedata","setsavedata","prescriptionData","setPrescriptionData","clinicLogo","setClinicLogo","doctorsign","setDoctorSign","isprintopen","setisprintopen","totalquantity","settotalquantity","requesttype","setrequesttype","issuedquantity","setissuedquatity","prescriptioncode","setprescriptioncode","dummy","setdummy","page","setPage","pagetype","setpagetype","column","setcolumn","ordertype","setordertype","selectedDate","setselectedDate","pdfBlob","setPdfBlob","length","Math","ceil","preview","setpreview","UrlLink","useSelector","state","_state$userRecord","userRecord","blockInvalidChar","e","includes","key","preventDefault","_state$userRecord2","UserData","IP_DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","useEffect","axios","get","concat","location","then","response","record","data","console","log","catch","error","firstClinic","Clinic_Logo","RegistrationId","map","item","index","id","Date","toISOString","split","currdate","format","commonColumns","name","renderCell","params","_jsx","Button","className","onClick","handleChange","row","children","EditIcon","dynamicColumns","_Fragment","handleStatusChange","post","CheckCircleOutlineIcon","handleStatusChange1","ImCancelCircle","Quantity","newIssuedQuantity","_dummy$","Frequencyitem","FrequencyTime","now","formattedTime","newdate","prev","requesttime","_jsxs","p","ind","type","checked","onChange","target","value","htmlFor","ReactGrid","columns","RowData","onKeyDown","readOnly","style","display","placeItems","width","handlenurserequestdrug","postdata","alert","src","alt","door_no","street","area","city","pincode","phone_no","ClinicLandLineNo","email","color","fontWeight","PatientName","PatientId","Age","Gender","RoomNo","RoomType","WardName","AttenderMobileNo","PatientPhoneNo","medicine","GenericName","MedicineName","Dosage","Route","RequestQuantity","paddingBottom","height","PrimaryDoctor","marginLeft"],"sourceRoot":""}