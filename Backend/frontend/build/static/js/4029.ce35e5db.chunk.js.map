{"version":3,"file":"static/js/4029.ce35e5db.chunk.js","mappings":"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","sources":["IP_Workbench/Nurse/Labtest.jsx"],"sourcesContent":["\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport ReactGrid from \"../../OtherComponent/ReactGrid/ReactGrid\";\r\nimport ToastAlert from \"../../OtherComponent/ToastContainer/ToastAlert\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { FaTrash } from 'react-icons/fa';\r\nimport ToggleButton from \"@mui/material/ToggleButton\";\r\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\r\nimport ModelContainer from \"../../OtherComponent/ModelContainer/ModelContainer\";\r\n\r\n\r\nconst LabTest = () => {\r\n    const UrlLink = useSelector((state) => state.userRecord?.UrlLink);\r\n    const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n    const toast = useSelector((state) => state.userRecord?.toast);\r\n    const dispatchvalue = useDispatch();\r\n    const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n    console.log(\"IP_DoctorWorkbenchNavigation\", IP_DoctorWorkbenchNavigation);\r\n    const [type, setType] = useState(\"Addtest\");\r\n    const [viewreportind, setviewreportind] = useState([]);\r\n    const [viewreportfav, setviewreportfav] = useState([]);\r\n    const [LabEntry, setLabEntry] = useState({\r\n        reporttime: \"\",\r\n        reportdate: \"\"\r\n    });\r\n    const [file, setfile] = useState(null);\r\n    console.log(\"viewreportind\", viewreportind);\r\n    console.log(UrlLink)\r\n    const handlePageChange = (event, newType) => {\r\n        if (newType !== null && newType !== type) {\r\n            setType(newType);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Define the params object to include RegistrationId\r\n        const params = {\r\n            Register_Id: IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n            RegisterType: \"IP\"\r\n        };\r\n\r\n        axios.get(`${UrlLink}OP/lab_report_details_view`, { params })\r\n            .then((res) => {\r\n                console.log(\"Response Lab Report:\", res.data);\r\n                console.log(\"Individual Tests:\", res.data.individual_tests);\r\n\r\n                // Update state with individual and favorite tests if they exist\r\n                setviewreportind(res.data.individual_tests || []);\r\n                setviewreportfav(res.data.favourite_tests || []);\r\n                const rawReportDate = res.data.lab_report_entry.report_date;\r\n                const dateObject = new Date(rawReportDate);\r\n                const formattedDateYYYYMMDD = dateObject.toISOString().split('T')[0]; // \"YYYY-MM-DD\"\r\n                // const formattedDateDDMMYYYY = dateObject.toLocaleDateString('en-GB'); // \"DD-MM-YYYY\"\r\n\r\n                // Extract and format report_time\r\n                const rawReportTime = res.data.lab_report_entry.report_time;\r\n                const formattedTime = rawReportTime.substring(0, 5); // \"HH:mm\"\r\n                const File = res.data.lab_report_entry.reportfile;\r\n                setfile(File);\r\n\r\n                setviewreportind(res.data.individual_tests || []);\r\n                setviewreportfav(res.data.favourite_tests || []);\r\n                setLabEntry({\r\n                    reporttime: formattedTime,\r\n                    reportdate: formattedDateYYYYMMDD // Use this for \"DD-MM-YYYY\"\r\n                });\r\n\r\n                console.log(\"Formatted Date (YYYY-MM-DD):\", formattedDateYYYYMMDD);\r\n                // console.log(\"Formatted Date (DD-MM-YYYY):\", formattedDateDDMMYYYY);\r\n                console.log(\"Formatted Time:\", formattedTime);\r\n            })\r\n            .catch((err) => {\r\n                console.error(\"Error fetching lab report details:\", err);\r\n            });\r\n    }, [UrlLink, IP_DoctorWorkbenchNavigation?.RegistrationId]);\r\n\r\n\r\n\r\n\r\n    const Selectedfileview = (fileval) => {\r\n        console.log(\"fileval\", fileval);\r\n        if (fileval) {\r\n            let tdata = {\r\n                Isopen: false,\r\n                content: null,\r\n                type: \"image/jpg\",\r\n            };\r\n            if (\r\n                [\"data:image/jpeg;base64\", \"data:image/jpg;base64\"].includes(\r\n                    fileval?.split(\",\")[0]\r\n                )\r\n            ) {\r\n                tdata = {\r\n                    Isopen: true,\r\n                    content: fileval,\r\n                    type: \"image/jpeg\",\r\n                };\r\n            } else if (fileval?.split(\",\")[0] === \"data:image/png;base64\") {\r\n                tdata = {\r\n                    Isopen: true,\r\n                    content: fileval,\r\n                    type: \"image/png\",\r\n                };\r\n            } else if (fileval?.split(\",\")[0] === \"data:application/pdf;base64\") {\r\n                tdata = {\r\n                    Isopen: true,\r\n                    content: fileval,\r\n                    type: \"application/pdf\",\r\n                };\r\n            }\r\n\r\n            dispatchvalue({ type: \"modelcon\", value: tdata });\r\n        } else {\r\n            const tdata = {\r\n                message: \"There is no file to view.\",\r\n                type: \"warn\",\r\n            };\r\n            dispatchvalue({ type: \"toast\", value: tdata });\r\n        }\r\n    };\r\n\r\n\r\n    const viewreportIndColumns = [\r\n\r\n        {\r\n            key: \"id\",\r\n            name: \"S.No\",\r\n            frozen: true,\r\n\r\n        },\r\n        {\r\n            key: \"test_name\",\r\n            name: \"Test Name\",\r\n            frozen: true,\r\n        },\r\n        {\r\n            key: \"category_type\",\r\n            name: \"Category Type\",\r\n        },\r\n\r\n        {\r\n            key: \"value\",\r\n            name: \"Value\"\r\n\r\n        },\r\n        {\r\n            key: \"description\",\r\n            name: \"Description\"\r\n        },\r\n        {\r\n            key: \"status\",\r\n            name: \"Status\"\r\n        }\r\n\r\n\r\n    ];\r\n    const viewreportFavColumns = [\r\n\r\n        {\r\n            key: \"id\",\r\n            name: \"S.No\",\r\n            frozen: true,\r\n\r\n        },\r\n        {\r\n            key: \"favouriteName\",\r\n            name: \"Favourite Name\"\r\n\r\n        },\r\n        {\r\n            key: \"testName\",\r\n            name: \"Test Name\",\r\n        },\r\n        {\r\n            key: \"category_type\",\r\n            name: \"Category Type\",\r\n        },\r\n\r\n        {\r\n            key: \"value\",\r\n            name: \"Value\"\r\n\r\n        },\r\n        {\r\n            key: \"description\",\r\n            name: \"Description\"\r\n        },\r\n        {\r\n            key: \"status\",\r\n            name: \"Status\"\r\n        }\r\n\r\n\r\n    ];\r\n\r\n\r\n\r\n\r\n    //   ------------------------addtest\r\n    const [LabQueue, setLabQueue] = useState({\r\n        LabQueueId: \"\",\r\n        IndivitualArr: \"\",\r\n        FavouritesArr: \"\",\r\n\r\n    });\r\n    const [testType, setTestType] = useState(\"Individual\");\r\n    const [activetestnames, setActivetestnames] = useState([]);\r\n    const [FavTest, setFavTest] = useState([]);\r\n    const [indivitualChecked, setIndivitualChecked] = useState([]);\r\n    const [FavouriteChecked, setFavouriteChecked] = useState([]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(`${UrlLink}Masters/Test_Names_link_LabTest`)\r\n            .then((response) => {\r\n                setActivetestnames(response.data);\r\n\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }, [UrlLink]);\r\n\r\n    useEffect(() => {\r\n        axios.get(`${UrlLink}Masters/Favourites_Names_link`)\r\n            .then((response) => {\r\n                setFavTest(response.data);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }, [UrlLink]);\r\n\r\n    const handleIndividualCheckboxChange = (id, Test_Name) => {\r\n        // console.log(\"testType\", id, Test_Name, testType);\r\n        // Check if the individual test is already in any favorite test's TestDetails\r\n        const isDuplicateInFavorites = FavouriteChecked.some(favorite =>\r\n            favorite.TestDetails.some(testDetail => testDetail.TestCode === id)\r\n        );\r\n\r\n        if (isDuplicateInFavorites) {\r\n            const tdata = {\r\n                message: \"Already Selected The Testname in Favourites .\",\r\n                type: \"warn\",\r\n            }\r\n            dispatchvalue({ type: \"toast\", value: tdata });\r\n            return;\r\n        }\r\n        // console.log('indivitualChecked aishfniensi387 :', indivitualChecked)\r\n        const isChecked = indivitualChecked.some(item => item.id === id);\r\n        // console.log(isChecked)\r\n        if (isChecked) {\r\n            const newCheckedState = indivitualChecked.filter(item => item.id !== id);\r\n            setIndivitualChecked(newCheckedState);\r\n        } else {\r\n            const newCheckedState = [...indivitualChecked, { id, Test_Name, testType }];\r\n            setIndivitualChecked(newCheckedState);\r\n        }\r\n    };\r\n\r\n    const handleFavoriteCheckboxChange = (key, FavouriteName, Current_Amount, TestDetails) => {\r\n        // console.log(\"Change detected:\", key, FavouriteName, Current_Amount, TestDetails, testType);\r\n\r\n        // Extract TestCodes from TestDetails\r\n        const testCodesFromDetails = TestDetails.map(testDetail => testDetail.TestCode);\r\n        // console.log(\"TestCodes from TestDetails:\", testCodesFromDetails);\r\n\r\n        // Check if any TestCode in TestDetails is already selected in indivitualChecked\r\n        const hasDuplicate = testCodesFromDetails.some(TestCode =>\r\n            indivitualChecked.some(individual => individual.id === TestCode)\r\n        );\r\n\r\n        if (hasDuplicate) {\r\n            const tdata = {\r\n                message: \"Already Some Testname  Selected Indivitual .\",\r\n                type: \"warn\",\r\n            }\r\n            dispatchvalue({ type: \"toast\", value: tdata });\r\n            return; // Prevent adding duplicate\r\n        }\r\n\r\n        const isChecked = FavouriteChecked.some(item => item.key === key);\r\n        if (isChecked) {\r\n            const newCheckedState = FavouriteChecked.filter(item => item.key !== key);\r\n            setFavouriteChecked(newCheckedState);\r\n        } else {\r\n            // Ensure testType is included in the object\r\n            const newCheckedState = [\r\n                ...FavouriteChecked,\r\n                {\r\n                    key,\r\n                    FavouriteName,\r\n                    Current_Amount,\r\n                    TestDetails,\r\n                    testType  // Add testType here\r\n                }\r\n            ];\r\n            setFavouriteChecked(newCheckedState);\r\n        }\r\n    };\r\n\r\n\r\n    const transformFavouriteData = (FavouriteChecked) => {\r\n        return FavouriteChecked.flatMap((favourite, favIndex) =>\r\n            favourite.TestDetails.map((testDetail, testIndex) => ({\r\n                FavouriteName: favourite.FavouriteName,\r\n                TestCode: testDetail.TestCode,\r\n                TestName: testDetail.TestName,\r\n                id: `${favIndex + 1}-${testIndex + 1}`,  // Unique key based on indexes\r\n            }))\r\n        );\r\n    };\r\n\r\n\r\n    const transformFavouriteData1 = (indivitualChecked) => {\r\n        return indivitualChecked.map((indivitual, ind) => ({\r\n            TestCode: indivitual.id,\r\n            TestName: indivitual.Test_Name,\r\n            id: ind + 1,  // Ensure unique key for each row\r\n        }));\r\n    };\r\n\r\n    const handleRemoveIndivitualRow = (row) => {\r\n        // console.log(\"row123\", row);\r\n\r\n        // Filter out the row that needs to be removed\r\n        const newCheckedState = indivitualChecked.filter(item => item.id !== row.TestCode);\r\n\r\n        // Update the state with the new array\r\n        setIndivitualChecked(newCheckedState);\r\n    };\r\n\r\n\r\n    const IndivitualColumns = [\r\n\r\n        {\r\n            key: \"id\",\r\n            name: \"S.No\",\r\n            frozen: true,\r\n\r\n        },\r\n        {\r\n            key: \"TestCode\",\r\n            name: \"Test Code\",\r\n\r\n        },\r\n\r\n        {\r\n            key: \"TestName\",\r\n            name: \"Test Name\",\r\n\r\n        },\r\n        {\r\n            key: \"Action\",\r\n            name: \"Action\",\r\n            renderCell: (params) => (\r\n                <Button\r\n                    className=\"cell_btn\"\r\n                    onClick={() => handleRemoveIndivitualRow(params.row)}\r\n                >\r\n                    <FaTrash className=\"check_box_clrr_cancell\" />\r\n                </Button>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const FavouritesColumns = [\r\n        {\r\n            key: \"id\",\r\n            name: \"S.No \",\r\n            frozen: true,\r\n        },\r\n        {\r\n            key: \"FavouriteName\",\r\n            name: \"Favourite Name\",\r\n\r\n        },\r\n        {\r\n            key: \"TestCode\",\r\n            name: \"Test Code\",\r\n        },\r\n        {\r\n            key: \"TestName\",\r\n            name: \"Test Name\",\r\n        },\r\n    ];\r\n    const transformedFavouriteData = transformFavouriteData(FavouriteChecked);\r\n    const transformedFavouriteData1 = transformFavouriteData1(indivitualChecked);\r\n\r\n    const [IsLabQueueGet, setIsLabQueueGet] = useState(false);\r\n    const [LabQueueDatas, setLabQueueDatas] = useState([]);\r\n\r\n\r\n\r\n\r\n    const handleSubmitSelectedTest = () => {\r\n        if (indivitualChecked.length > 0 || FavouriteChecked.length > 0) {\r\n            const data = {\r\n                LabQueueId: LabQueue.LabQueueId,\r\n                IndivitualArr: indivitualChecked || [],\r\n                FavouritesArr: FavouriteChecked || [],\r\n                created_by: userRecord?.username || \"\",\r\n                Register_Id: IP_DoctorWorkbenchNavigation?.pk || \"\",\r\n                RegisterType: \"IP\"\r\n            };\r\n            // console.log(\"data\", data);\r\n            axios.post(`${UrlLink}OP/Lab_Request_Detailslink`, data)\r\n                .then((res) => {\r\n                    const resData = res.data;\r\n                    const type = Object.keys(resData)[0];\r\n                    const message = Object.values(resData)[0];\r\n                    const tdata = {\r\n                        message: message,\r\n                        type: type,\r\n                    };\r\n                    dispatchvalue({ type: \"toast\", value: tdata });\r\n                    setIsLabQueueGet((prev) => !prev);\r\n                    setLabQueue({\r\n                        LabQueueId: \"\",\r\n                        IndivitualArr: \"\",\r\n                        FavouritesArr: \"\",\r\n                    });\r\n                    setIndivitualChecked([]);\r\n                    setFavouriteChecked([]);\r\n\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n        else {\r\n            const tdata = {\r\n                message: \"Please Select TestNames Or Favourites Names.\",\r\n                type: \"warn\",\r\n            }\r\n            dispatchvalue({ type: \"toast\", value: tdata });\r\n        }\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        // Define the params object to include RegistrationId\r\n        const params = {\r\n            Register_Id: IP_DoctorWorkbenchNavigation.pk,\r\n            RegisterType: \"IP\"\r\n        };\r\n\r\n        axios.get(`${UrlLink}OP/Lab_Request_Detailslink`, { params })\r\n            .then((res) => {\r\n                const ress = res.data;\r\n                // console.log(\"response1234\", ress);\r\n                // Sorting the data\r\n                const sortedData = ress.sort((a, b) => {\r\n                    if (a.TestType === \"Individual\" && b.TestType !== \"Individual\") {\r\n                        return -1; // a comes before b\r\n                    } else if (a.TestType !== \"Individual\" && b.TestType === \"Individual\") {\r\n                        return 1; // b comes before a\r\n                    }\r\n                    return 0; // no change\r\n                });\r\n                setLabQueueDatas(sortedData);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }, [IsLabQueueGet, UrlLink, IP_DoctorWorkbenchNavigation?.RegistrationId]);\r\n\r\n\r\n\r\n    const LabColumn = [\r\n        {\r\n            key: \"id\",\r\n            name: \"S.No \",\r\n            frozen: true,\r\n        },\r\n        {\r\n            key: \"TestType\",\r\n            name: \"Test Type\",\r\n\r\n            renderCell: (params) => (\r\n\r\n                <>\r\n                    {/* {console.log(params)} */}\r\n                    {\r\n                        params?.row?.TestType === \"Individual\" ? (\r\n                            <>\r\n                                {params?.row?.TestType}\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                {`${params?.row?.FavouriteName} - \r\n                             \r\n                             (${params?.row?.TestType})`}\r\n                            </>\r\n                        )\r\n                    }\r\n                </>\r\n\r\n            ),\r\n        },\r\n        {\r\n            key: \"TestName\",\r\n            name: \"Test Name\",\r\n\r\n            renderCell: (params) => (\r\n\r\n                <>\r\n                    {/* {console.log(params)} */}\r\n                    {\r\n                        params?.row?.TestType === \"Individual\" ? (\r\n                            <>\r\n                                {params?.row?.TestName}\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                {params.row.TestName}\r\n\r\n                            </>\r\n                        )\r\n                    }\r\n                </>\r\n\r\n            ),\r\n        },\r\n    ];\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"for\" style={{ width: '100%' }}>\r\n                <div style={{ width: \"100%\", display: \"grid\", placeItems: \"center\" }}>\r\n                    <ToggleButtonGroup\r\n                        value={type}\r\n                        exclusive\r\n                        onChange={handlePageChange}\r\n                        aria-label=\"Platform\"\r\n                    >\r\n                        <ToggleButton\r\n                            value=\"Addtest\"\r\n                            style={{\r\n                                height: \"30px\",\r\n                                width: \"180px\",\r\n                                backgroundColor:\r\n                                    type === \"Addtest\"\r\n                                        ? \"var(--selectbackgroundcolor)\"\r\n                                        : \"inherit\",\r\n                            }}\r\n                            className=\"togglebutton_container\"\r\n                        >\r\n                            Add Test\r\n                        </ToggleButton>\r\n                        <ToggleButton\r\n                            value=\"ViewReport\"\r\n                            style={{\r\n                                backgroundColor:\r\n                                    type === \"ViewReport\"\r\n                                        ? \"var(--selectbackgroundcolor)\"\r\n                                        : \"inherit\",\r\n                                width: \"180px\",\r\n                                height: \"30px\",\r\n                            }}\r\n                            className=\"togglebutton_container\"\r\n                        >\r\n                            View Report\r\n                        </ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </div>\r\n\r\n                <br></br>\r\n                <br></br>\r\n                {type === \"Addtest\" && (\r\n                    <>\r\n\r\n\r\n                        <div className=\"RegisFormcon_1\">\r\n                            <div className=\"RegisForm_1\">\r\n                                <label style={{ fontSize: '20px' }}>\r\n                                    Test Type <span>:</span>\r\n                                </label>\r\n                                <select\r\n                                    name=\"testType\"\r\n                                    value={testType}\r\n                                    autoComplete=\"off\"\r\n                                    onChange={(e) => setTestType(e.target.value)}\r\n                                >\r\n                                    <option value=\"Individual\">Individual</option>\r\n                                    <option value=\"Favourites\">Favourites</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                        <br></br>\r\n\r\n                        {testType === \"Individual\" ? (\r\n                            <div className='displayuseraccess'>\r\n                                {activetestnames.map((item, indx) => (\r\n                                    <div key={indx} className='displayuseraccess_child' style={{ marginLeft: \"80px\" }}>\r\n\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id={item.id}\r\n                                            checked={indivitualChecked.some(checkedItem => checkedItem.id === item.id)}\r\n                                            onChange={() => handleIndividualCheckboxChange(item.id, item.Test_Name)}\r\n\r\n                                        />\r\n                                        <label htmlFor={item.id} className='par_acc_lab'>{item.Test_Name}</label>\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        ) : (\r\n                            <div className='displayuseraccess'>\r\n                                {FavTest.map((item) => (\r\n\r\n                                    <div key={item.id} className='displayuseraccess_child'>\r\n\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id={item.id}\r\n                                            checked={FavouriteChecked.some(checkedItem => checkedItem.key === item.id)}\r\n                                            onChange={() => handleFavoriteCheckboxChange(\r\n                                                item.id,\r\n                                                item.FavouriteName,\r\n                                                item.Current_Amount,\r\n                                                item.TestName,\r\n\r\n                                            )}\r\n\r\n                                        />\r\n                                        <label htmlFor={item.id} className='par_acc_lab'>{item.FavouriteName}</label>\r\n                                        {item.TestName.map((child, ind1) => (\r\n                                            <div key={ind1} style={{ marginLeft: \"20px\", marginTop: '5px' }}>\r\n                                                <label htmlFor={child.TestCode} className='chi_acc_lab'>{child.TestName}</label><br />\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        )}\r\n\r\n                        {transformedFavouriteData1.length > 0 && (\r\n                            <>\r\n                                <div className=\"DivCenter_container\">\r\n                                    <span>Selected Individual TestName</span>\r\n                                </div>\r\n                                <div className=\"Main_container_app\">\r\n                                    <ReactGrid columns={IndivitualColumns} RowData={transformedFavouriteData1} />\r\n                                </div>\r\n\r\n                            </>\r\n                        )}\r\n                        <br></br>\r\n\r\n                        {transformedFavouriteData.length > 0 && (\r\n                            <>\r\n                                <div className=\"DivCenter_container\">\r\n                                    <span>Selected Favourites Name</span>\r\n                                </div>\r\n                                <div className=\"Main_container_app\">\r\n                                    <ReactGrid columns={FavouritesColumns} RowData={transformedFavouriteData} />\r\n                                </div>\r\n                            </>\r\n                        )}\r\n\r\n                        <div className=\"Main_container_Btn\">\r\n                            <button onClick={handleSubmitSelectedTest}>\r\n                                save\r\n                            </button>\r\n                        </div>\r\n\r\n                        {LabQueueDatas.length > 0 && (\r\n                            <>\r\n                                <div className=\"Main_container_app\">\r\n                                    <ReactGrid columns={LabColumn} RowData={LabQueueDatas} />\r\n                                </div>\r\n                            </>\r\n                        )}\r\n                    </>\r\n                )}\r\n                <br></br>\r\n\r\n                {type === \"ViewReport\" && (\r\n                    <>\r\n                        <div className=\"RegisFormcon_1\">\r\n                            <div className=\"RegisForm_1\">\r\n                                <label htmlFor=\"ReportDate\">\r\n                                    Report Date <span>:</span>\r\n                                </label>\r\n                                <input\r\n                                    type=\"date\"\r\n                                    id=\"reportdate\"\r\n                                    name=\"reportdate\"\r\n                                    value={LabEntry.reportdate}\r\n                                    readOnly\r\n                                />\r\n                            </div>\r\n                            <div className=\"RegisForm_1\">\r\n                                <label htmlFor=\"ReportTime\">\r\n                                    Report Time <span>:</span>\r\n                                </label>\r\n                                <input\r\n                                    type=\"time\"\r\n                                    id=\"reporttime\"\r\n                                    name=\"reporttime\"\r\n                                    value={LabEntry.reporttime}\r\n                                    readOnly\r\n                                />\r\n                            </div>\r\n                            <div className=\"RegisForm_1\">\r\n                                <button\r\n                                    className=\"fileviewbtn\"\r\n                                    onClick={() => Selectedfileview(file)}\r\n                                >\r\n                                    View\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <br />\r\n\r\n\r\n                        {viewreportind.length > 0 ? (\r\n                            <>\r\n                                <div className=\"common_center_tag\">\r\n                                    <span>Individual Test</span>\r\n                                </div>\r\n                                <br />\r\n                                <div className=\"Main_container_app\">\r\n                                    <ReactGrid columns={viewreportIndColumns} RowData={viewreportind} />\r\n                                </div>\r\n                            </>\r\n                        ) : null}\r\n                        <br />\r\n\r\n                        {viewreportfav.length > 0 ? (\r\n                            <>\r\n\r\n                                <div className=\"common_center_tag\">\r\n                                    <span>Favourites Test</span>\r\n                                </div>\r\n                                <br />\r\n                                <div className=\"Main_container_app\">\r\n\r\n                                    <ReactGrid columns={viewreportFavColumns} RowData={viewreportfav} />\r\n                                </div>\r\n                            </>\r\n                        ) : null}\r\n\r\n                        {/* Show \"No data available\" if both arrays are empty */}\r\n                        {viewreportind.length === 0 && viewreportfav.length === 0 && (\r\n                            <div className=\"DivCenter_container\">\r\n                                No Test was complete during the previous visit.\r\n                            </div>\r\n                        )}\r\n                    </>\r\n                )}\r\n\r\n\r\n\r\n\r\n            </div>\r\n\r\n\r\n            <ModelContainer />\r\n\r\n            <ToastAlert Message={toast.message} Type={toast.type} />\r\n\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LabTest;\r\n"],"names":["LabTest","UrlLink","useSelector","state","_state$userRecord","userRecord","_state$userRecord2","UserData","toast","_state$userRecord3","dispatchvalue","useDispatch","IP_DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","console","log","type","setType","useState","viewreportind","setviewreportind","viewreportfav","setviewreportfav","LabEntry","setLabEntry","reporttime","reportdate","file","setfile","useEffect","params","Register_Id","RegistrationId","RegisterType","axios","get","concat","then","res","data","individual_tests","favourite_tests","rawReportDate","lab_report_entry","report_date","formattedDateYYYYMMDD","Date","toISOString","split","formattedTime","report_time","substring","File","reportfile","catch","err","error","LabQueue","setLabQueue","LabQueueId","IndivitualArr","FavouritesArr","testType","setTestType","activetestnames","setActivetestnames","FavTest","setFavTest","indivitualChecked","setIndivitualChecked","FavouriteChecked","setFavouriteChecked","response","IndivitualColumns","key","name","frozen","renderCell","_jsx","Button","className","onClick","row","newCheckedState","filter","item","id","TestCode","handleRemoveIndivitualRow","children","FaTrash","transformedFavouriteData","flatMap","favourite","favIndex","TestDetails","map","testDetail","testIndex","FavouriteName","TestName","transformFavouriteData","transformedFavouriteData1","indivitual","ind","Test_Name","transformFavouriteData1","IsLabQueueGet","setIsLabQueueGet","LabQueueDatas","setLabQueueDatas","pk","sortedData","sort","a","b","TestType","LabColumn","_params$row","_params$row2","_params$row3","_params$row4","_Fragment","_params$row5","_params$row6","_jsxs","style","width","display","placeItems","ToggleButtonGroup","value","exclusive","onChange","handlePageChange","event","newType","ToggleButton","height","backgroundColor","fontSize","autoComplete","e","target","indx","marginLeft","checked","some","checkedItem","handleIndividualCheckboxChange","favorite","message","htmlFor","handleFavoriteCheckboxChange","Current_Amount","individual","child","ind1","marginTop","length","ReactGrid","columns","RowData","handleSubmitSelectedTest","created_by","username","post","resData","Object","keys","values","prev","readOnly","fileval","tdata","Isopen","content","includes","Selectedfileview","ModelContainer","ToastAlert","Message","Type"],"sourceRoot":""}