{"version":3,"file":"static/js/8113.68926d29.chunk.js","mappings":"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","sources":["IP_Workbench/Nurse/IP_NurseMlc.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ReactGrid from \"../../OtherComponent/ReactGrid/ReactGrid\";\r\nimport axios from \"axios\";\r\nimport ToastAlert from \"../../OtherComponent/ToastContainer/ToastAlert\";\r\nimport { IconButton } from \"@mui/material\";\r\nimport VisibilityIcon from \"@mui/icons-material/Visibility\";\r\n\r\nconst IP_NurseMlc = () => {\r\n  const dispatch = useDispatch();\r\n  const UrlLink = useSelector((state) => state.userRecord?.UrlLink);\r\n  const toast = useSelector((state) => state.userRecord?.toast);\r\n  const IP_DoctorWorkbenchNavigation = useSelector(\r\n    (state) => state.Frontoffice?.IP_DoctorWorkbenchNavigation\r\n  );\r\n  console.log(IP_DoctorWorkbenchNavigation, \"IP_DoctorWorkbenchNavigation\");\r\n\r\n  const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n\r\n  const formatLabel = (label) => {\r\n    if (/[a-z]/.test(label) && /[A-Z]/.test(label) && !/\\d/.test(label)) {\r\n      return label\r\n        .replace(/([a-z])([A-Z])/g, \"$1 $2\")\r\n        .replace(/^./, (str) => str.toUpperCase());\r\n    } else {\r\n      return label;\r\n    }\r\n  };\r\n\r\n  const [Mlc, setMlc] = useState({\r\n    MlcNo: \"\",\r\n    MlcInfoDate: \"\",\r\n    MlcInfoTime: \"\",\r\n    InformedBy: \"\",\r\n    MlcSendTime: \"\",\r\n    Reason: \"\",\r\n    Type: \"\",\r\n    PoliceStationName: \"\",\r\n    ConsultantName: \"\",\r\n    RmoName: \"\",\r\n    MlcCopyReceiveTime: \"\",\r\n    ReceivedBySister: \"\",\r\n    ReceptionStaffName: \"\",\r\n    InchargeName: \"\",\r\n    Remarks: \"\",\r\n  });\r\n\r\n  const [gridData, setGridData] = useState([]);\r\n  const [IsGetData, setIsGetData] = useState(false);\r\n\r\n  const [IsViewMode, setIsViewMode] = useState(false);\r\n\r\n  const MlcColumns = [\r\n    {\r\n      key: \"id\",\r\n      name: \"S.No\",\r\n      frozen: true,\r\n    },\r\n    { key: \"VisitId\", name: \"VisitId\", frozen: true },\r\n    { key: \"PrimaryDoctorName\", name: \"Doctor Name\", frozen: true },\r\n\r\n    {\r\n      key: \"Date\",\r\n      name: \"Date\",\r\n      frozen: true,\r\n    },\r\n    {\r\n      key: \"Time\",\r\n      name: \"Time\",\r\n      frozen: true,\r\n    },\r\n\r\n    {\r\n      key: \"view\",\r\n      frozen: true,\r\n      name: \"View\",\r\n      renderCell: (params) => (\r\n        <IconButton onClick={() => handleView(params.row)}>\r\n          <VisibilityIcon />\r\n        </IconButton>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const handleView = (data) => {\r\n    setMlc({\r\n      MlcNo: data.MlcNo || \"\",\r\n      MlcInfoDate: data.MlcInfoDate || \"\",\r\n      MlcInfoTime: data.MlcInfoTime || \"\",\r\n      InformedBy: data.InformedBy || \"\",\r\n      MlcSendTime: data.MlcSendTime || \"\",\r\n      Reason: data.Reason || \"\",\r\n      Type: data.Type || \"\",\r\n      PoliceStationName: data.PoliceStationName || \"\",\r\n      ConsultantName: data.ConsultantName || \"\",\r\n      RmoName: data.RmoName || \"\",\r\n      MlcCopyReceiveTime: data.MlcCopyReceiveTime || \"\",\r\n      ReceivedBySister: data.ReceivedBySister || \"\",\r\n      ReceptionStaffName: data.ReceptionStaffName || \"\",\r\n      InchargeName: data.InchargeName || \"\",\r\n      Remarks: data.Remarks || \"\",\r\n    });\r\n    setIsViewMode(true);\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setMlc({\r\n      MlcNo: \"\",\r\n      MlcInfoDate: \"\",\r\n      MlcInfoTime: \"\",\r\n      InformedBy: \"\",\r\n      MlcSendTime: \"\",\r\n      Reason: \"\",\r\n      Type: \"\",\r\n      PoliceStationName: \"\",\r\n      ConsultantName: \"\",\r\n      RmoName: \"\",\r\n      MlcCopyReceiveTime: \"\",\r\n      ReceivedBySister: \"\",\r\n      ReceptionStaffName: \"\",\r\n      InchargeName: \"\",\r\n      Remarks: \"\",\r\n    });\r\n    setIsViewMode(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`${UrlLink}Ip_Workbench/IP_Mlc_Details_Link`, {\r\n        params: {\r\n          RegistrationId: IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n          Type: \"Nurse\",\r\n        },\r\n      })\r\n      .then((res) => {\r\n        const ress = res.data;\r\n        console.log(ress);\r\n        setGridData(ress);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, [UrlLink, IP_DoctorWorkbenchNavigation, IsGetData]);\r\n\r\n  const handleMlcChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setMlc((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    console.log(IP_DoctorWorkbenchNavigation?.RegistrationId);\r\n\r\n    const senddata = {\r\n      ...Mlc,\r\n      RegistrationId: IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n      Createdby: userRecord?.username,\r\n      // Type:'Nurse'\r\n    };\r\n\r\n    console.log(senddata, \"senddata\");\r\n\r\n    axios\r\n      .post(`${UrlLink}Ip_Workbench/IP_Mlc_Details_Link`, senddata)\r\n      .then((res) => {\r\n        const [type, message] = [\r\n          Object.keys(res.data)[0],\r\n          Object.values(res.data)[0],\r\n        ];\r\n        dispatch({ type: \"toast\", value: { message, type } });\r\n        setIsGetData((prev) => !prev);\r\n        handleClear();\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  return (\r\n    <div className=\"new-patient-registration-form\">\r\n      <br />\r\n      <div className=\"form-section5\">\r\n        <br />\r\n\r\n        <div className=\"RegisFormcon_1\">\r\n          {[\r\n            { label: \"MLC No\", id: \"MlcNo\", type: \"text\" },\r\n            { label: \"MLC Info Date\", id: \"MlcInfoDate\", type: \"date\" },\r\n            { label: \"MLC Info Time\", id: \"MlcInfoTime\", type: \"time\" },\r\n            { label: \"Informed By\", id: \"InformedBy\", type: \"text\" },\r\n            { label: \"MLC Send Time\", id: \"MlcSendTime\", type: \"time\" },\r\n            { label: \"Reason\", id: \"Reason\", type: \"text\" },\r\n            {\r\n              label: \"Police Station Name\",\r\n              id: \"PoliceStationName\",\r\n              type: \"text\",\r\n            },\r\n            { label: \"Consultant Name\", id: \"ConsultantName\", type: \"text\" },\r\n            { label: \"RMO Name\", id: \"RmoName\", type: \"text\" },\r\n            {\r\n              label: \"MLC Copy Receive Time\",\r\n              id: \"MlcCopyReceiveTime\",\r\n              type: \"time\",\r\n            },\r\n            {\r\n              label: \"Received By Sister\",\r\n              id: \"ReceivedBySister\",\r\n              type: \"text\",\r\n            },\r\n            {\r\n              label: \"Reception Staff Name\",\r\n              id: \"ReceptionStaffName\",\r\n              type: \"text\",\r\n            },\r\n            { label: \"Incharge Name\", id: \"InchargeName\", type: \"text\" },\r\n            { label: \"Remarks\", id: \"Remarks\", type: \"textarea\" },\r\n          ].map((input) => (\r\n            <div className=\"RegisForm_1\" key={input.id}>\r\n              <label htmlFor={input.id}>\r\n                {input.label} <span>:</span>\r\n              </label>\r\n              {input.type === \"textarea\" ? (\r\n                <textarea\r\n                  id={input.id}\r\n                  name={input.id}\r\n                  onChange={handleMlcChange}\r\n                  value={Mlc[input.id]}\r\n                  required\r\n                  readOnly={IsViewMode}\r\n                />\r\n              ) : (\r\n                <input\r\n                  type={input.type}\r\n                  id={input.id}\r\n                  name={input.id}\r\n                  onChange={handleMlcChange}\r\n                  value={Mlc[input.id]}\r\n                  required\r\n                  readOnly={IsViewMode}\r\n                />\r\n              )}\r\n            </div>\r\n          ))}\r\n\r\n          <div className=\"RegisForm_1\">\r\n            <label htmlFor=\"Type\">\r\n              Type <span>:</span>\r\n            </label>\r\n            <select\r\n              id=\"Type\"\r\n              name=\"Type\"\r\n              onChange={handleMlcChange}\r\n              value={Mlc.Type}\r\n              required\r\n              readOnly={IsViewMode}\r\n            >\r\n              <option value=\"online\" readOnly={IsViewMode}>\r\n                Online\r\n              </option>\r\n              <option value=\"driver\" readOnly={IsViewMode}>\r\n                Driver\r\n              </option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"Main_container_Btn\">\r\n        {IsViewMode && <button onClick={handleClear}>Clear</button>}\r\n        {!IsViewMode && <button onClick={handleSubmit}>Submit</button>}\r\n      </div>\r\n\r\n      {gridData.length >= 0 && (\r\n        <ReactGrid columns={MlcColumns} RowData={gridData} />\r\n      )}\r\n\r\n      <ToastAlert Message={toast.message} Type={toast.type} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IP_NurseMlc;\r\n"],"names":["IP_NurseMlc","dispatch","useDispatch","UrlLink","useSelector","state","_state$userRecord","userRecord","toast","_state$userRecord2","IP_DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","console","log","_state$userRecord3","UserData","Mlc","setMlc","useState","MlcNo","MlcInfoDate","MlcInfoTime","InformedBy","MlcSendTime","Reason","Type","PoliceStationName","ConsultantName","RmoName","MlcCopyReceiveTime","ReceivedBySister","ReceptionStaffName","InchargeName","Remarks","gridData","setGridData","IsGetData","setIsGetData","IsViewMode","setIsViewMode","MlcColumns","key","name","frozen","renderCell","params","_jsx","IconButton","onClick","handleView","row","children","VisibilityIcon","data","handleClear","useEffect","axios","get","concat","RegistrationId","then","res","ress","catch","err","handleMlcChange","e","value","target","prev","_jsxs","className","label","id","type","map","input","htmlFor","onChange","required","readOnly","handleSubmit","senddata","Createdby","username","post","message","Object","keys","values","length","ReactGrid","columns","RowData","ToastAlert","Message"],"sourceRoot":""}