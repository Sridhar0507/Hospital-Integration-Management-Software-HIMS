{"version":3,"file":"static/js/256.a7c40f8b.chunk.js","mappings":"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","sources":["DoctorWorkBench/vitals.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import { format } from \"date-fns\";\r\nimport ReactGrid from '../OtherComponent/ReactGrid/ReactGrid';\r\nimport axios from 'axios';\r\nimport ToastAlert from '../OtherComponent/ToastContainer/ToastAlert';\r\nimport { IconButton } from '@mui/material';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\n\r\n\r\n\r\nconst Vitals = () => {\r\n    const dispatch = useDispatch();\r\n    const UrlLink = useSelector(state => state.userRecord?.UrlLink);\r\n    const toast = useSelector(state => state.userRecord?.toast);\r\n    const DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.DoctorWorkbenchNavigation);\r\n    console.log(DoctorWorkbenchNavigation,'DoctorWorkbenchNavigation');\r\n\r\n    const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n\r\n    \r\n    const formatLabel = (label) => {\r\n\r\n        if (/[a-z]/.test(label) && /[A-Z]/.test(label) && !/\\d/.test(label)) {\r\n            return label\r\n                .replace(/([a-z])([A-Z])/g, \"$1 $2\")\r\n                .replace(/^./, (str) => str.toUpperCase());\r\n        } else {\r\n            return label;\r\n        }\r\n    };\r\n\r\n   \r\n    const [VitalFormData, setVitalFormData] = useState({\r\n       \r\n        Temperature: \"\",\r\n        PulseRate: \"\",\r\n        SPO2: \"\",\r\n        HeartRate: \"\",\r\n        RespiratoryRate: \"\",\r\n        SBP: \"\",\r\n        DBP: \"\",\r\n        Height: \"\",\r\n        Weight: \"\",\r\n        BMI: \"\",\r\n        WC: \"\",\r\n        HC: \"\",\r\n        BSL:'',\r\n        Painscore:\"\",\r\n        ETCO2: \"\",\r\n        BreathSounds: \"\",\r\n        // Date: \"\",\r\n        // Time: \"\",\r\n    });\r\n\r\n\r\n    const [gridData, setGridData] = useState([])\r\n    const [IsGetData, setIsGetData] = useState(false)\r\n\r\n    const [IsViewMode, setIsViewMode] = useState(false)\r\n  \r\n    useEffect(() => {\r\n        if (VitalFormData.Weight && VitalFormData.Height) {\r\n          const parsedWeight = parseFloat(VitalFormData.Weight);\r\n          const parsedHeight = parseFloat(VitalFormData.Height) / 100; // Convert cm to m\r\n          const calculatedBMI = (\r\n            parsedWeight /\r\n            (parsedHeight * parsedHeight)\r\n          ).toFixed(2);\r\n      \r\n          setVitalFormData((prev) => ({\r\n            ...prev,\r\n            BMI: calculatedBMI,\r\n          }));\r\n        }\r\n      }, [VitalFormData.Weight, VitalFormData.Height]);\r\n      \r\n    const VitalsFormColumns = [\r\n        {\r\n            key: 'id',\r\n            name: 'S.No',\r\n            frozen: true\r\n        },\r\n        { key: 'PrimaryDoctorId', name: 'Doctor Id',frozen: true },\r\n        { key: 'PrimaryDoctorName', name: 'Doctor Name',frozen: true },\r\n      \r\n        {\r\n            key: 'Date',\r\n            name: 'Date',\r\n            frozen: true\r\n        },\r\n        {\r\n            key: 'Time',\r\n            name: 'Time',\r\n            frozen: true\r\n        },\r\n       \r\n       \r\n       \r\n        {\r\n            key: 'view',\r\n            frozen: true,\r\n            name: 'View',\r\n            renderCell: (params) => (\r\n              <IconButton onClick={() => handleView(params.row)}>\r\n                <VisibilityIcon />\r\n              </IconButton>\r\n            ),\r\n          },\r\n        \r\n    ]\r\n// Handle setting the form data when viewing\r\nconst handleView = (data) => {\r\n    setVitalFormData({\r\n        Temperature: data.Temperature || '',\r\n        PulseRate: data.PulseRate || '',\r\n        SPO2: data.SPO2 || '',\r\n        HeartRate: data.HeartRate || '',\r\n        RespiratoryRate: data.RespiratoryRate || '',\r\n        SBP: data.SBP || '',\r\n        DBP: data.DBP || '',\r\n        Height: data.Height || '',\r\n        Weight: data.Weight || '',\r\n        BMI: data.BMI || '',\r\n        WC: data.WC || '',\r\n        HC: data.HC || '',\r\n        BSL: data.BSL || '',\r\n        Painscore: data.Painscore || '',\r\n        ETCO2: data.EtCO2 || '',\r\n        BreathSounds: data.BreathSounds || '',\r\n        // Date: data.Date || '',\r\n        // Time: data.Time || '',\r\n        // Createdby: data.Createdby || '',\r\n    });\r\n    setIsViewMode(true);\r\n};\r\n\r\n\r\n// Handle clearing the form and resetting the view mode\r\nconst handleClear = () => {\r\nsetVitalFormData({\r\n    Temperature: '',\r\n    PulseRate: '',\r\n    SPO2: '',\r\n    HeartRate: '',\r\n    RespiratoryRate: '',\r\n    SBP: '',\r\n    DBP: '',\r\n    Height: '',\r\n    Weight: '',\r\n    BMI: '',\r\n    WC: '',\r\n    HC: '',\r\n    BSL: '',\r\n    Painscore:'',\r\n    ETCO2:'',\r\n    BreathSounds:'',\r\n    // Date: '',\r\n    // Time: '',\r\n    // Createdby: '',\r\n});\r\nsetIsViewMode(false);\r\n};\r\n  \r\n\r\n    useEffect(() => {\r\n        axios.get(`${UrlLink}OP/Vitals_Form_Details_Link`,{params:{RegistrationId:DoctorWorkbenchNavigation?.pk}})\r\n            .then((res) => {\r\n                const ress = res.data\r\n                console.log(ress)\r\n                setGridData(ress)\r\n    \r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            })\r\n      }, [UrlLink,DoctorWorkbenchNavigation,IsGetData])\r\n    \r\n    \r\n\r\n\r\n      const HandleOnChange = (e) => {\r\n        const { name, value } = e.target;\r\n        const formattedValue = value.trim();\r\n        setVitalFormData((prevFormData) => ({\r\n            ...prevFormData,\r\n            [name]: formattedValue,\r\n        }));\r\n    };\r\n\r\n\r\n    const handleVitalFormSubmit = () => {\r\n        \r\n        console.log(DoctorWorkbenchNavigation?.pk);\r\n        \r\n        const senddata={\r\n            ...VitalFormData,\r\n            RegistrationId:DoctorWorkbenchNavigation?.pk,\r\n            Createdby:userRecord?.username,\r\n            Type:'Doctor'\r\n            \r\n        }\r\n\r\n        console.log(senddata,'senddata');\r\n        \r\n        axios.post(`${UrlLink}OP/Vitals_Form_Details_Link`, senddata)\r\n        .then((res) => {\r\n            const [type, message] = [Object.keys(res.data)[0], Object.values(res.data)[0]];\r\n            dispatch({ type: 'toast', value: { message, type } });\r\n            setIsGetData(prev => !prev);\r\n            handleClear();\r\n            })\r\n            .catch((err) => console.log(err));\r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <div className='new-patient-registration-form'>\r\n            <br />\r\n                <div className=\"RegisFormcon_1\" >\r\n\r\n                    \r\n                    {\r\n                        Object.keys(VitalFormData).map((p, index) =>\r\n                        (\r\n                            <div className='RegisForm_1' key={p}>\r\n                                <label htmlFor={`${p}_${index}`}>\r\n                                    {formatLabel(p)} <span>:</span>\r\n                                </label>\r\n                                {\r\n                                    (\r\n                                        <input\r\n                                            id={`${p}_${index}`}\r\n                                            autoComplete='off'\r\n                                            type={p === 'Date' ? 'date' : p === 'Time' ? 'time' : 'text'}\r\n                                            name={p}\r\n                                            value={VitalFormData[p]}\r\n                                            onChange={HandleOnChange}\r\n                                        />\r\n                                    )\r\n                                }\r\n                            </div>\r\n\r\n                        ))\r\n                    }\r\n                </div>\r\n                <br />\r\n\r\n                <div className=\"Main_container_Btn\">\r\n            \r\n                    {IsViewMode && (\r\n                        <button onClick={handleClear}>Clear</button>\r\n                    )}\r\n                    {!IsViewMode && (\r\n                        <button onClick={handleVitalFormSubmit}>Submit</button>\r\n                    )}\r\n                </div>\r\n                <br />\r\n\r\n\r\n                {gridData.length >= 0 &&\r\n                    <ReactGrid columns={VitalsFormColumns} RowData={gridData} />\r\n                }\r\n            \r\n            <ToastAlert Message={toast.message} Type={toast.type} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Vitals"],"names":["Vitals","dispatch","useDispatch","UrlLink","useSelector","state","_state$userRecord","userRecord","toast","_state$userRecord2","DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","console","log","_state$userRecord3","UserData","VitalFormData","setVitalFormData","useState","Temperature","PulseRate","SPO2","HeartRate","RespiratoryRate","SBP","DBP","Height","Weight","BMI","WC","HC","BSL","Painscore","ETCO2","BreathSounds","gridData","setGridData","IsGetData","setIsGetData","IsViewMode","setIsViewMode","useEffect","parsedWeight","parseFloat","parsedHeight","calculatedBMI","toFixed","prev","VitalsFormColumns","key","name","frozen","renderCell","params","_jsx","IconButton","onClick","handleView","row","children","VisibilityIcon","data","EtCO2","handleClear","axios","get","concat","RegistrationId","pk","then","res","ress","catch","err","HandleOnChange","e","value","target","formattedValue","trim","prevFormData","_jsxs","className","Object","keys","map","p","index","htmlFor","label","test","replace","str","toUpperCase","id","autoComplete","type","onChange","handleVitalFormSubmit","senddata","Createdby","username","Type","post","message","values","length","ReactGrid","columns","RowData","ToastAlert","Message"],"sourceRoot":""}