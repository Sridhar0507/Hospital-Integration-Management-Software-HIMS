{"version":3,"file":"static/js/5982.b18bff93.chunk.js","mappings":"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","sources":["IP_Workbench/Nurse/IPM/IP_VentilatorSettings.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ReactGrid from '../../../OtherComponent/ReactGrid/ReactGrid';\r\nimport axios from 'axios';\r\nimport ToastAlert from '../../../OtherComponent/ToastContainer/ToastAlert';\r\nimport { IconButton } from '@mui/material';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\n\r\n\r\n\r\nconst IP_VentilatorSettings = () => {\r\n    const dispatch = useDispatch();\r\n    const UrlLink = useSelector(state => state.userRecord?.UrlLink);\r\n    const toast = useSelector(state => state.userRecord?.toast);\r\n    const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n    console.log(IP_DoctorWorkbenchNavigation,'IP_DoctorWorkbenchNavigation');\r\n\r\n    const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n\r\n    \r\n    const formatLabel = (label) => {\r\n\r\n        if (/[a-z]/.test(label) && /[A-Z]/.test(label) && !/\\d/.test(label)) {\r\n            return label\r\n                .replace(/([a-z])([A-Z])/g, \"$1 $2\")\r\n                .replace(/^./, (str) => str.toUpperCase());\r\n        } else {\r\n            return label;\r\n        }\r\n    };\r\n\r\n   \r\n\r\n    const [Ventilator, setVentilator] = useState({\r\n       \r\n        Mode: \"\",\r\n        BreathsPerMin: \"\",\r\n        PressSupport: \"\",\r\n        PeakPress: \"\",\r\n        Peep: \"\",\r\n        MeanPress: \"\",\r\n        MV: \"\",\r\n        ITV: \"\",\r\n        ETV: \"\",\r\n        F2O2: \"\",\r\n        VentilatorAssociatedPneumonia: \"\",\r\n        Status: \"\",\r\n        Remarks: \"\",\r\n    });\r\n\r\n\r\n    const [gridData, setGridData] = useState([])\r\n    const [IsGetData, setIsGetData] = useState(false)\r\n\r\n    const [IsViewMode, setIsViewMode] = useState(false)\r\n  \r\n    \r\n      \r\n    const VentilatorColumns = [\r\n        {\r\n            key: 'id',\r\n            name: 'S.No',\r\n            frozen: true\r\n        },\r\n        { key: 'PrimaryDoctorName', name: 'Doctor Name',frozen: true },\r\n      \r\n        {\r\n            key: 'CurrDate',\r\n            name: 'Date',\r\n            frozen: true\r\n        },\r\n        {\r\n            key: 'CurrTime',\r\n            name: 'Time',\r\n            frozen: true\r\n        },\r\n       \r\n       \r\n       \r\n        {\r\n            key: 'view',\r\n            frozen: true,\r\n            name: 'View',\r\n            renderCell: (params) => (\r\n              <IconButton onClick={() => handleView(params.row)}>\r\n                <VisibilityIcon />\r\n              </IconButton>\r\n            ),\r\n        },\r\n\r\n        { key: 'Mode', name: 'Mode'},\r\n        { key: 'BreathsPerMin', name: 'Breaths PerMin'},\r\n        { key: 'PressSupport', name: 'Press Support'},\r\n        { key: 'PeakPress', name: 'Peak Press'},\r\n        { key: 'Peep', name: 'Peep'},\r\n        { key: 'MeanPress', name: 'Mean Press'},\r\n        { key: 'Mv', name: 'Mv'},\r\n        { key: 'Itv', name: 'Itv'},\r\n        { key: 'Etv', name: 'Etv'},\r\n        { key: 'F2o2', name: 'F2o2'},\r\n        { key: 'VentilatorAssociatedPneumonia', name: 'Ventilator Associated Pneumonia'},\r\n        { key: 'Status', name: 'Status'},\r\n        { key: 'Remarks', name: 'Remarks'},\r\n\r\n        \r\n    ]\r\n\r\n     // Handle setting the form data when viewing\r\n     const handleView = (data) => {\r\n        setVentilator({\r\n            Mode: data.Mode || '',\r\n            BreathsPerMin: data.BreathsPerMin || '',\r\n            PressSupport: data.PressSupport || '',\r\n            PeakPress: data.PeakPress || '',\r\n            Peep: data.Peep || '',\r\n            MeanPress: data.MeanPress || '',\r\n            MV: data.Mv || '',\r\n            ITV: data.Itv || '',\r\n            ETV: data.Etv || '',\r\n            F2O2: data.F2o2 || '',\r\n            Status: data.Status || '',\r\n            Remarks: data.Remarks || '',\r\n            VentilatorAssociatedPneumonia: data.VentilatorAssociatedPneumonia || '',\r\n            \r\n        });\r\n        setIsViewMode(true);\r\n    };\r\n    \r\n  \r\n  // Handle clearing the form and resetting the view mode\r\n  const handleClear = () => {\r\n    setVentilator({\r\n        Mode: '',\r\n        BreathsPerMin: '',\r\n        PressSupport: '',\r\n        PeakPress: '',\r\n        Peep: '',\r\n        MeanPress: '',\r\n        MV: '',\r\n        ITV: '',\r\n        ETV: '',\r\n        F2O2: '',\r\n        Status: '',\r\n        Remarks: '',\r\n        VentilatorAssociatedPneumonia: '',\r\n       \r\n    });\r\n    setIsViewMode(false);\r\n};\r\n\r\n  \r\n\r\n    useEffect(() => {\r\n        axios.get(`${UrlLink}Ip_Workbench/IP_Ventilator_Details_Link`,{params:{RegistrationId:IP_DoctorWorkbenchNavigation?.RegistrationId,Type: 'Nurse'}})\r\n            .then((res) => {\r\n                const ress = res.data\r\n                console.log(ress)\r\n                setGridData(ress)\r\n    \r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            })\r\n      }, [UrlLink,IP_DoctorWorkbenchNavigation,IsGetData])\r\n    \r\n    \r\n\r\n\r\n      const HandleOnChange = (e) => {\r\n        const { name, value } = e.target;\r\n        const formattedValue = value.trim();\r\n        setVentilator((prevFormData) => ({\r\n            ...prevFormData,\r\n            [name]: formattedValue,\r\n        }));\r\n    };\r\n\r\n\r\n    const handleSubmit = () => {\r\n        \r\n        console.log(IP_DoctorWorkbenchNavigation?.RegistrationId);\r\n        \r\n        const senddata={\r\n            ...Ventilator,\r\n            RegistrationId:IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n            Createdby:userRecord?.username,\r\n            \r\n            \r\n        }\r\n\r\n        console.log(senddata,'senddata');\r\n        \r\n        axios.post(`${UrlLink}Ip_Workbench/IP_Ventilator_Details_Link`, senddata)\r\n        .then((res) => {\r\n            const [type, message] = [Object.keys(res.data)[0], Object.values(res.data)[0]];\r\n            dispatch({ type: 'toast', value: { message, type } });\r\n            setIsGetData(prev => !prev);\r\n            handleClear();\r\n            })\r\n        .catch((err) => console.log(err));\r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n                <div className=\"RegisFormcon_1\" >\r\n\r\n                    \r\n                    {\r\n                        Object.keys(Ventilator).map((p, index) =>\r\n                        (\r\n                            <div className='RegisForm_1' key={p}>\r\n                                <label htmlFor={`${p}_${index}`}>\r\n                                    {p === \"MV\" ? (\r\n                                        \"MV (L/min)\"\r\n                                    ): p === \"ITV\" ? (\r\n                                        \"ITV (ml)\"\r\n                                      ) : p === \"ETV\" ? (\r\n                                        \"ETV (ml)\"\r\n                                      ) : p ==='PressSupport'?(\r\n                                        <span>PRESS Support (cmH<sub>2</sub>O)</span>\r\n                                      ):p==='F2O2'?(\r\n                                        <span> F<sub>2</sub>O<sub>2</sub></span>\r\n                                      ): p ==='PeakPress' ?(\r\n                                        <span>Peak PRESS (cmH<sub>2</sub>O)</span>\r\n                                      ): p ==='Peep' ?(\r\n                                        <span>PEEP (cmH<sub>2</sub>O)</span>\r\n                                      ): p ==='MeanPress' ?(\r\n                                        <span>Mean PRESS (cmH<sub>2</sub>O)</span>\r\n                                      ): (\r\n                                        formatLabel(p)\r\n                                      )} \r\n                                    \r\n                                    <span>:</span>\r\n                                </label>\r\n                                {p === 'Mode' ? (\r\n                                <select\r\n                                    id={`${p}_${index}`}\r\n                                    name={p}\r\n                                    value={Ventilator[p]}\r\n                                    onChange={HandleOnChange}\r\n                                    readOnly={IsViewMode}\r\n                                    >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"VAC\">VAC</option>\r\n                                    <option value=\"PAV\">PAV</option>\r\n                                    <option value=\"PSV\">PSV</option>\r\n                                    <option value=\"SIMV\">SIMV</option>\r\n                                </select>\r\n                            ) : p === 'VentilatorAssociatedPneumonia' ? (\r\n                                <select\r\n                                    id={`${p}_${index}`}\r\n                                    name={p}\r\n                                    value={Ventilator[p]}\r\n                                    onChange={HandleOnChange}\r\n                                    readOnly={IsViewMode}\r\n                                    >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"Yes\">Yes</option>\r\n                                    <option value=\"No\">No</option>\r\n                                </select>\r\n                            ) : p === 'Status' ? (\r\n                                <select\r\n                                    id={`${p}_${index}`}\r\n                                    name={p}\r\n                                    value={Ventilator[p]}\r\n                                    onChange={HandleOnChange}\r\n                                    readOnly={IsViewMode}\r\n                                    >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"PatientReintubated\">Patient Reintubated</option>\r\n                                    <option value=\"PatientExtubated\">Patient Extubated</option>\r\n                                    <option value=\"Dead\">Dead</option>\r\n                                </select>\r\n                            ) : p === 'Remarks' ? (\r\n                                <textarea\r\n                                    id={`${p}_${index}`}\r\n                                    name={p}\r\n                                    value={Ventilator[p]}\r\n                                    onChange={HandleOnChange}\r\n                                    readOnly={IsViewMode}\r\n                                    placeholder='Enter your remarks here'\r\n                                />\r\n                            ):(\r\n                                <input\r\n                                id={`${p}_${index}`}\r\n                                autoComplete='off'\r\n                                type={p === 'Date' ? 'date' : p === 'Time' ? 'time' : 'number'}\r\n                                name={p}\r\n                                value={Ventilator[p]}\r\n                                onChange={HandleOnChange}\r\n                                readOnly={IsViewMode}\r\n                                />\r\n                            )}\r\n                            </div>\r\n\r\n                        ))\r\n                    }\r\n                </div>\r\n                <div className=\"Main_container_Btn\">\r\n            \r\n                    {IsViewMode && (\r\n                        <button onClick={handleClear}>Clear</button>\r\n                    )}\r\n                    {!IsViewMode && (\r\n                        <button onClick={handleSubmit}>Submit</button>\r\n                    )}\r\n                </div>\r\n\r\n                {gridData.length >= 0 &&\r\n                    <ReactGrid columns={VentilatorColumns} RowData={gridData} />\r\n                }\r\n            \r\n            <ToastAlert Message={toast.message} Type={toast.type} />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default IP_VentilatorSettings;"],"names":["IP_VentilatorSettings","dispatch","useDispatch","UrlLink","useSelector","state","_state$userRecord","userRecord","toast","_state$userRecord2","IP_DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","console","log","_state$userRecord3","UserData","Ventilator","setVentilator","useState","Mode","BreathsPerMin","PressSupport","PeakPress","Peep","MeanPress","MV","ITV","ETV","F2O2","VentilatorAssociatedPneumonia","Status","Remarks","gridData","setGridData","IsGetData","setIsGetData","IsViewMode","setIsViewMode","VentilatorColumns","key","name","frozen","renderCell","params","_jsx","IconButton","onClick","handleView","row","children","VisibilityIcon","data","Mv","Itv","Etv","F2o2","handleClear","useEffect","axios","get","concat","RegistrationId","Type","then","res","ress","catch","err","HandleOnChange","e","value","target","formattedValue","trim","prevFormData","_jsxs","_Fragment","className","Object","keys","map","p","index","htmlFor","label","test","replace","str","toUpperCase","id","onChange","readOnly","placeholder","autoComplete","type","handleSubmit","senddata","Createdby","username","post","message","values","prev","length","ReactGrid","columns","RowData","ToastAlert","Message"],"sourceRoot":""}