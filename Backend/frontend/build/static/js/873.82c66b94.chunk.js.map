{"version":3,"file":"static/js/873.82c66b94.chunk.js","mappings":"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","sources":["IP_Workbench/Nurse/IP_NurseSurgicalHistory.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import { format } from \"date-fns\";\r\nimport ReactGrid from '../../OtherComponent/ReactGrid/ReactGrid';\r\nimport axios from 'axios';\r\nimport ToastAlert from '../../OtherComponent/ToastContainer/ToastAlert';\r\nimport { IconButton } from '@mui/material';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\n\r\n\r\n\r\nconst IP_NurseSurgicalHistory = () => {\r\n    const dispatch = useDispatch();\r\n    const UrlLink = useSelector(state => state.userRecord?.UrlLink);\r\n    const toast = useSelector(state => state.userRecord?.toast);\r\n    const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n    console.log(IP_DoctorWorkbenchNavigation,'IP_DoctorWorkbenchNavigation');\r\n\r\n    const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n\r\n    \r\n    const formatLabel = (label) => {\r\n\r\n        if (/[a-z]/.test(label) && /[A-Z]/.test(label) && !/\\d/.test(label)) {\r\n            return label\r\n                .replace(/([a-z])([A-Z])/g, \"$1 $2\")\r\n                .replace(/^./, (str) => str.toUpperCase());\r\n        } else {\r\n            return label;\r\n        }\r\n    };\r\n\r\n   \r\n\r\n    const [SurgicalHistory, setSurgicalHistory] = useState({\r\n       \r\n        SurgicalProcedure: \"\",\r\n        DateOfSurgery: \"\",\r\n        PostOpDate: \"\",\r\n        MajorSurgicalEvents: \"\",\r\n        BloodProductsTransfusedDuringSurgery: \"\",\r\n        NoOfBags: \"\",\r\n        AnyAdverseReactions: \"\",\r\n        Remarks: \"\",\r\n       \r\n    });\r\n\r\n\r\n    const [gridData, setGridData] = useState([])\r\n    const [IsGetData, setIsGetData] = useState(false)\r\n\r\n    const [IsViewMode, setIsViewMode] = useState(false)\r\n  \r\n    const SurgicalHistoryColumns = [\r\n        {\r\n            key: 'id',\r\n            name: 'S.No',\r\n            frozen: true\r\n        },\r\n        { key: 'VisitId', name: 'VisitId',frozen: true },\r\n        { key: 'PrimaryDoctorId', name: 'Doctor Id',frozen: true },\r\n        { key: 'PrimaryDoctorName', name: 'Doctor Name',frozen: true },\r\n      \r\n        {\r\n            key: 'Date',\r\n            name: 'Date',\r\n            frozen: true\r\n        },\r\n        {\r\n            key: 'Time',\r\n            name: 'Time',\r\n            frozen: true\r\n        },\r\n       \r\n        \r\n       \r\n        {\r\n            key: 'view',\r\n            frozen: true,\r\n            name: 'View',\r\n            renderCell: (params) => (\r\n              <IconButton onClick={() => handleView(params.row)}>\r\n                <VisibilityIcon />\r\n              </IconButton>\r\n            ),\r\n          },\r\n        \r\n    ]\r\n\r\n     // Handle setting the form data when viewing\r\n     const handleView = (data) => {\r\n        setSurgicalHistory({\r\n            SurgicalProcedure: data.SurgicalProcedure || '',\r\n            DateOfSurgery: data.DateOfSurgery || '',\r\n            PostOpDate: data.PostOpDate || '',\r\n            MajorSurgicalEvents: data.MajorSurgicalEvents || '',\r\n            BloodProductsTransfusedDuringSurgery: data.BloodProductsTransfusedDuringSurgery || '',\r\n            NoOfBags: data.NoOfBags || '',\r\n            AnyAdverseReactions: data.AnyAdverseReactions || '',\r\n            Remarks: data.Remarks || '',\r\n           \r\n            // Createdby: data.Createdby || '',\r\n        });\r\n        setIsViewMode(true);\r\n    };\r\n    \r\n  \r\n  // Handle clearing the form and resetting the view mode\r\n  const handleClear = () => {\r\n    setSurgicalHistory({\r\n        SurgicalProcedure: '',\r\n        DateOfSurgery: '',\r\n        PostOpDate: '',\r\n        MajorSurgicalEvents: '',\r\n        BloodProductsTransfusedDuringSurgery: '',\r\n        NoOfBags: '',\r\n        AnyAdverseReactions: '',\r\n        Remarks: '',\r\n        \r\n    });\r\n    setIsViewMode(false);\r\n};\r\n\r\n  \r\n\r\n    useEffect(() => {\r\n        axios.get(`${UrlLink}Ip_Workbench/IP_SurgicalHistory_Details_Link`,{params:{RegistrationId:IP_DoctorWorkbenchNavigation?.RegistrationId}})\r\n            .then((res) => {\r\n                const ress = res.data\r\n                console.log(ress)\r\n                setGridData(ress)\r\n    \r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            })\r\n      }, [UrlLink,IP_DoctorWorkbenchNavigation,IsGetData])\r\n    \r\n    \r\n\r\n\r\n      const HandleOnChange = (e) => {\r\n        const { name, value } = e.target;\r\n        \r\n        setSurgicalHistory((prevFormData) => ({\r\n            ...prevFormData,\r\n            [name]: value,\r\n        }));\r\n    };\r\n    \r\n\r\n    // const handleVitalFormSubmit = () => {\r\n        \r\n    //     console.log(IP_DoctorWorkbenchNavigation?.RegistrationId);\r\n        \r\n    //     const senddata={\r\n    //         ...SurgicalHistory,\r\n    //         RegistrationId:IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n    //         Createdby:userRecord?.username,\r\n            \r\n    //     }\r\n\r\n    //     console.log(senddata,'senddata');\r\n        \r\n    //     axios.post(`${UrlLink}Ip_Workbench/IP_SurgicalHistory_Details_Link`, senddata)\r\n    //     .then((res) => {\r\n    //         const [type, message] = [Object.keys(res.data)[0], Object.values(res.data)[0]];\r\n    //         dispatch({ type: 'toast', value: { message, type } });\r\n    //         setIsGetData(prev => !prev);\r\n    //         handleClear();\r\n    //         })\r\n    //         .catch((err) => console.log(err));\r\n        \r\n    // }\r\n\r\n\r\n    return (\r\n        <>\r\n          <div className=\"RegisFormcon_1\" >\r\n\r\n              \r\n            {\r\n                Object.keys(SurgicalHistory).map((p, index) =>\r\n                (\r\n                  <div className='RegisForm_1' key={p}>\r\n                    <label htmlFor={`${p}_${index}`}>\r\n                        {formatLabel(p)} <span>:</span>\r\n                    </label>\r\n                    {p === 'DateOfSurgery' ? (\r\n                        <input\r\n                            id={`${p}_${index}`}\r\n                            autoComplete='off'\r\n                            type='date'\r\n                            name={p}\r\n                            value={SurgicalHistory[p]}\r\n                            onChange={HandleOnChange}\r\n                            readOnly={IsViewMode}\r\n\r\n                        />\r\n                    ) : p === 'BloodProductsTransfusedDuringSurgery' ? (\r\n                        <select\r\n                            id={`${p}_${index}`}\r\n                            name={p}\r\n                            value={SurgicalHistory[p]}\r\n                            onChange={HandleOnChange}\r\n                            readOnly={IsViewMode}\r\n\r\n                        >\r\n                            <option value=''>Select</option>\r\n                            <option value='WholeBlood'>Whole Blood</option>\r\n                            <option value='Plasma'>Plasma</option>\r\n                            <option value='Platelets'>Platelets</option>\r\n                            <option value='RBCs'>RBCs</option>\r\n                        </select>\r\n                    ) : p === 'AnyAdverseReactions' ? (\r\n                        <div>\r\n                            <input\r\n                                type='radio'\r\n                                id={`${p}_yes_${index}`}\r\n                                name={p}\r\n                                value='Yes'\r\n                                checked={SurgicalHistory[p] === 'Yes'}\r\n                                onChange={HandleOnChange}\r\n                                readOnly={IsViewMode}\r\n\r\n                            />\r\n                            <label htmlFor={`${p}_yes_${index}`}>Yes</label>\r\n                            \r\n                            <input\r\n                                type='radio'\r\n                                id={`${p}_no_${index}`}\r\n                                name={p}\r\n                                value='No'\r\n                                checked={SurgicalHistory[p] === 'No'}\r\n                                onChange={HandleOnChange}\r\n                                readOnly={IsViewMode}\r\n\r\n                            />\r\n                            <label htmlFor={`${p}_no_${index}`}>No</label>\r\n                        </div>\r\n                    ) : p === 'Remarks' ? (\r\n                        <textarea\r\n                            id={`${p}_${index}`}\r\n                            name={p}\r\n                            value={SurgicalHistory[p]}\r\n                            onChange={HandleOnChange}\r\n                            readOnly={IsViewMode}\r\n\r\n                        />\r\n                    ) : (\r\n                        <input\r\n                            id={`${p}_${index}`}\r\n                            autoComplete='off'\r\n                            type='text'\r\n                            name={p}\r\n                            value={SurgicalHistory[p]}\r\n                            onChange={HandleOnChange}\r\n                            readOnly={IsViewMode}\r\n\r\n                        />\r\n                    )}\r\n                  </div>\r\n              \r\n                ))\r\n            }\r\n          </div>\r\n          <div className=\"Main_container_Btn\">\r\n      \r\n              {IsViewMode && (\r\n                  <button onClick={handleClear}>Clear</button>\r\n              )}\r\n              {/* {!IsViewMode && (\r\n                  <button onClick={handleVitalFormSubmit}>Submit</button>\r\n              )} */}\r\n          </div>\r\n\r\n          {gridData.length >= 0 &&\r\n              <ReactGrid columns={SurgicalHistoryColumns} RowData={gridData} />\r\n          }\r\n      \r\n        <ToastAlert Message={toast.message} Type={toast.type} />\r\n\r\n      </>\r\n    )\r\n}\r\n\r\n\r\nexport default IP_NurseSurgicalHistory;"],"names":["IP_NurseSurgicalHistory","useDispatch","UrlLink","useSelector","state","_state$userRecord","userRecord","toast","_state$userRecord2","IP_DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","console","log","_state$userRecord3","UserData","SurgicalHistory","setSurgicalHistory","useState","SurgicalProcedure","DateOfSurgery","PostOpDate","MajorSurgicalEvents","BloodProductsTransfusedDuringSurgery","NoOfBags","AnyAdverseReactions","Remarks","gridData","setGridData","IsGetData","setIsGetData","IsViewMode","setIsViewMode","SurgicalHistoryColumns","key","name","frozen","renderCell","params","_jsx","IconButton","onClick","handleView","row","children","VisibilityIcon","data","useEffect","axios","get","concat","RegistrationId","then","res","ress","catch","err","HandleOnChange","e","value","target","prevFormData","_jsxs","_Fragment","className","Object","keys","map","p","index","htmlFor","label","test","replace","str","toUpperCase","id","autoComplete","type","onChange","readOnly","checked","handleClear","length","ReactGrid","columns","RowData","ToastAlert","Message","message","Type"],"sourceRoot":""}