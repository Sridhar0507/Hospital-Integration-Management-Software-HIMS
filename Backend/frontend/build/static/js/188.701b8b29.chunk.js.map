{"version":3,"file":"static/js/188.701b8b29.chunk.js","mappings":"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","sources":["IP_Workbench/Doctor/IP_Doc_DAMA.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n// import { format } from \"date-fns\";\r\nimport ReactGrid from '../../OtherComponent/ReactGrid/ReactGrid';\r\nimport axios from 'axios';\r\nimport ToastAlert from '../../OtherComponent/ToastContainer/ToastAlert';\r\nimport { IconButton } from '@mui/material';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\n\r\n\r\nconst IP_Doc_DAMA = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const UrlLink = useSelector(state => state.userRecord?.UrlLink);\r\n    const toast = useSelector(state => state.userRecord?.toast);\r\n    const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n    console.log(IP_DoctorWorkbenchNavigation,'IP_DoctorWorkbenchNavigation');\r\n\r\n    const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n\r\n    \r\n    const formatLabel = (label) => {\r\n\r\n        if (/[a-z]/.test(label) && /[A-Z]/.test(label) && !/\\d/.test(label)) {\r\n            return label\r\n                .replace(/([a-z])([A-Z])/g, \"$1 $2\")\r\n                .replace(/^./, (str) => str.toUpperCase());\r\n        } else {\r\n            return label;\r\n        }\r\n    };\r\n\r\n\r\n    // const [Dama, setDama] = useState({\r\n    //     BroughtDead: false,\r\n    //     BroughtDeadDate: \"\",\r\n    //     BroughtDeadTime: \"\",\r\n\r\n    //     HigherCenter: false,\r\n    //     HigherCenterDate: \"\",\r\n    //     HigherCenterTime: \"\",\r\n\r\n    //     NonAvailabilityOfConsultant: false,\r\n    //     NonAvailabilityOfConsultantDate: \"\",\r\n    //     NonAvailabilityOfConsultantTime: \"\",\r\n\r\n    //     NonAvailabilityOfIcuBed: false,\r\n    //     NonAvailabilityOfIcuBedDate: \"\",\r\n    //     NonAvailabilityOfIcuBedTime: \"\",\r\n\r\n    //     ToxicPatientsOrRelatives: false,\r\n    //     ToxicPatientsOrRelativesDate: \"\",\r\n    //     ToxicPatientsOrRelativesTime: \"\",\r\n\r\n    //     DrunkPatients: false,\r\n    //     DrunkPatientsDate: \"\",\r\n    //     DrunkPatientsTime: \"\",\r\n\r\n    //     RelativesNotAvailable: false,\r\n    //     RelativesNotAvailableDate: \"\",\r\n    //     RelativesNotAvailableTime: \"\",\r\n\r\n    //     TransferredtoCOVIDcentre: false,\r\n    //     TransferredtoCOVIDcentreDate: \"\",\r\n    //     TransferredtoCOVIDcentreTime: \"\",\r\n\r\n    //     Absconded: false,\r\n    //     AbscondedDate: \"\",\r\n    //     AbscondedTime: \"\",\r\n\r\n    //     DamaNonAffordable: false,\r\n    //     DamaNonAffordableDate: \"\",\r\n    //     DamaNonAffordableTime: \"\",\r\n\r\n    //     DamaRelativesNotWish: false,\r\n    //     DamaRelativesNotWishDate: \"\",\r\n    //     DamaRelativesNotWishTime: \"\",\r\n\r\n    //     DamaInsuranceOrCashless: false,\r\n    //     DamaInsuranceOrCashlessDate: \"\",\r\n    //     DamaInsuranceOrCashlessTime: \"\",\r\n\r\n      \r\n\r\n    // });\r\n\r\n\r\n    const initialDamaState = {\r\n        BroughtDead: false,\r\n        BroughtDeadDate: \"\",\r\n        BroughtDeadTime: \"\",\r\n    \r\n        HigherCenter: false,\r\n        HigherCenterDate: \"\",\r\n        HigherCenterTime: \"\",\r\n    \r\n        NonAvailabilityOfConsultant: false,\r\n        NonAvailabilityOfConsultantDate: \"\",\r\n        NonAvailabilityOfConsultantTime: \"\",\r\n    \r\n        NonAvailabilityOfIcuBed: false,\r\n        NonAvailabilityOfIcuBedDate: \"\",\r\n        NonAvailabilityOfIcuBedTime: \"\",\r\n    \r\n        ToxicPatientsOrRelatives: false,\r\n        ToxicPatientsOrRelativesDate: \"\",\r\n        ToxicPatientsOrRelativesTime: \"\",\r\n    \r\n        DrunkPatients: false,\r\n        DrunkPatientsDate: \"\",\r\n        DrunkPatientsTime: \"\",\r\n    \r\n        RelativesNotAvailable: false,\r\n        RelativesNotAvailableDate: \"\",\r\n        RelativesNotAvailableTime: \"\",\r\n    \r\n        TransferredtoCOVIDcentre: false,\r\n        TransferredtoCOVIDcentreDate: \"\",\r\n        TransferredtoCOVIDcentreTime: \"\",\r\n    \r\n        Absconded: false,\r\n        AbscondedDate: \"\",\r\n        AbscondedTime: \"\",\r\n    \r\n        DamaNonAffordable: false,\r\n        DamaNonAffordableDate: \"\",\r\n        DamaNonAffordableTime: \"\",\r\n    \r\n        DamaRelativesNotWish: false,\r\n        DamaRelativesNotWishDate: \"\",\r\n        DamaRelativesNotWishTime: \"\",\r\n    \r\n        DamaInsuranceOrCashless: false,\r\n        DamaInsuranceOrCashlessDate: \"\",\r\n        DamaInsuranceOrCashlessTime: \"\",\r\n    };\r\n    \r\n    const [Dama, setDama] = useState(initialDamaState);\r\n    const [OtherReasons, setOtherReasons] = useState(\"\");\r\n    \r\n    \r\n    // const [OtherReasons, setOtherReasons] = useState(\"\");\r\n\r\n    const [gridData, setGridData] = useState([])\r\n    \r\n    const [IsGetData, setIsGetData] = useState(false)\r\n    console.log(gridData);\r\n\r\n    const [IsViewMode, setIsViewMode] = useState(false)\r\n  \r\n\r\n    const DamaColumns = [\r\n        {\r\n            key: 'id',\r\n            name: 'S.No',\r\n            frozen: true\r\n        },\r\n        { key: 'VisitId', name: 'VisitId',frozen: true },\r\n        { key: 'PrimaryDoctorName', name: 'Doctor Name',frozen: true },\r\n      \r\n        {\r\n            key: 'Date',\r\n            name: 'Date',\r\n            frozen: true\r\n        },\r\n        {\r\n            key: 'Time',\r\n            name: 'Time',\r\n            frozen: true\r\n        },\r\n       \r\n        {\r\n            key: 'Type',\r\n            name: 'Type',\r\n            frozen: true\r\n        },\r\n       \r\n       \r\n        {\r\n            key: 'view',\r\n            frozen: true,\r\n            name: 'View',\r\n            renderCell: (params) => (\r\n              <IconButton onClick={() => handleView(params.row)}>\r\n                <VisibilityIcon />\r\n              </IconButton>\r\n            ),\r\n          },\r\n        \r\n    ]\r\n\r\n    const handleView = (data) => {\r\n        setDama(prevState => ({\r\n            ...prevState,\r\n            BroughtDead: data.BroughtDead ?? prevState.BroughtDead,\r\n            BroughtDeadDate: data.BroughtDeadDate ?? prevState.BroughtDeadDate,\r\n            BroughtDeadTime: data.BroughtDeadTime ?? prevState.BroughtDeadTime,\r\n    \r\n            HigherCenter: data.HigherCenter ?? prevState.HigherCenter,\r\n            HigherCenterDate: data.HigherCenterDate ?? prevState.HigherCenterDate,\r\n            HigherCenterTime: data.HigherCenterTime ?? prevState.HigherCenterTime,\r\n    \r\n            NonAvailabilityOfConsultant: data.NonAvailabilityOfConsultant ?? prevState.NonAvailabilityOfConsultant,\r\n            NonAvailabilityOfConsultantDate: data.NonAvailabilityOfConsultantDate ?? prevState.NonAvailabilityOfConsultantDate,\r\n            NonAvailabilityOfConsultantTime: data.NonAvailabilityOfConsultantTime ?? prevState.NonAvailabilityOfConsultantTime,\r\n    \r\n            NonAvailabilityOfIcuBed: data.NonAvailabilityOfIcuBed ?? prevState.NonAvailabilityOfIcuBed,\r\n            NonAvailabilityOfIcuBedDate: data.NonAvailabilityOfIcuBedDate ?? prevState.NonAvailabilityOfIcuBedDate,\r\n            NonAvailabilityOfIcuBedTime: data.NonAvailabilityOfIcuBedTime ?? prevState.NonAvailabilityOfIcuBedTime,\r\n    \r\n            ToxicPatientsOrRelatives: data.ToxicPatientsOrRelatives ?? prevState.ToxicPatientsOrRelatives,\r\n            ToxicPatientsOrRelativesDate: data.ToxicPatientsOrRelativesDate ?? prevState.ToxicPatientsOrRelativesDate,\r\n            ToxicPatientsOrRelativesTime: data.ToxicPatientsOrRelativesTime ?? prevState.ToxicPatientsOrRelativesTime,\r\n    \r\n            DrunkPatients: data.DrunkPatients ?? prevState.DrunkPatients,\r\n            DrunkPatientsDate: data.DrunkPatientsDate ?? prevState.DrunkPatientsDate,\r\n            DrunkPatientsTime: data.DrunkPatientsTime ?? prevState.DrunkPatientsTime,\r\n    \r\n            RelativesNotAvailable: data.RelativesNotAvailable ?? prevState.RelativesNotAvailable,\r\n            RelativesNotAvailableDate: data.RelativesNotAvailableDate ?? prevState.RelativesNotAvailableDate,\r\n            RelativesNotAvailableTime: data.RelativesNotAvailableTime ?? prevState.RelativesNotAvailableTime,\r\n    \r\n            TransferredtoCOVIDcentre: data.TransferredtoCOVIDcentre ?? prevState.TransferredtoCOVIDcentre,\r\n            TransferredtoCOVIDcentreDate: data.TransferredtoCOVIDcentreDate ?? prevState.TransferredtoCOVIDcentreDate,\r\n            TransferredtoCOVIDcentreTime: data.TransferredtoCOVIDcentreTime ?? prevState.TransferredtoCOVIDcentreTime,\r\n    \r\n            Absconded: data.Absconded ?? prevState.Absconded,\r\n            AbscondedDate: data.AbscondedDate ?? prevState.AbscondedDate,\r\n            AbscondedTime: data.AbscondedTime ?? prevState.AbscondedTime,\r\n    \r\n            DamaNonAffordable: data.DamaNonAffordable ?? prevState.DamaNonAffordable,\r\n            DamaNonAffordableDate: data.DamaNonAffordableDate ?? prevState.DamaNonAffordableDate,\r\n            DamaNonAffordableTime: data.DamaNonAffordableTime ?? prevState.DamaNonAffordableTime,\r\n    \r\n            DamaRelativesNotWish: data.DamaRelativesNotWish ?? prevState.DamaRelativesNotWish,\r\n            DamaRelativesNotWishDate: data.DamaRelativesNotWishDate ?? prevState.DamaRelativesNotWishDate,\r\n            DamaRelativesNotWishTime: data.DamaRelativesNotWishTime ?? prevState.DamaRelativesNotWishTime,\r\n    \r\n            DamaInsuranceOrCashless: data.DamaInsuranceOrCashless ?? prevState.DamaInsuranceOrCashless,\r\n            DamaInsuranceOrCashlessDate: data.DamaInsuranceOrCashlessDate ?? prevState.DamaInsuranceOrCashlessDate,\r\n            DamaInsuranceOrCashlessTime: data.DamaInsuranceOrCashlessTime ?? prevState.DamaInsuranceOrCashlessTime,\r\n        }));\r\n    \r\n        setOtherReasons(data.OtherReasons ?? \"\");\r\n        setIsViewMode(true);\r\n    };\r\n    \r\n    \r\n    const handleClear = () => {\r\n        setDama(initialDamaState);\r\n        setOtherReasons(\"\");\r\n        setIsViewMode(false);\r\n    };\r\n    \r\n\r\n    useEffect(() => {\r\n        axios.get(`${UrlLink}Ip_Workbench/IP_Dama_Details_Link`,{params:{RegistrationId:IP_DoctorWorkbenchNavigation?.RegistrationId,Type: 'Nurse'}})\r\n            .then((res) => {\r\n                const ress = res.data\r\n                console.log(ress)\r\n                setGridData(ress)\r\n    \r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            })\r\n      }, [UrlLink,IP_DoctorWorkbenchNavigation,IsGetData])\r\n    \r\n    \r\n\r\n\r\n    const damaKeys = Object.keys(Dama).filter(key => key !== 'OtherReasons');\r\n    const getLabelName = (key) => {\r\n        switch (key) {\r\n            case 'HigherCenter':\r\n                return 'Higher Center For Further Investigation & Treatment';\r\n            case 'NonAvailabilityOfIcuBed':\r\n                return 'Non Availability Of ICU Bed';\r\n            case 'RelativesNotAvailable':\r\n                return 'Relatives Not Available (Unknown Patients)';\r\n            case 'TransferredtoCOVIDcentre':\r\n                return 'Transferred to COVID centre';\r\n            default:\r\n                return key.replace(/([A-Z])/g, ' $1');\r\n        }\r\n    };\r\n\r\n\r\n    const handleDamaChange = (e) => {\r\n        const { name, type, checked, value } = e.target;\r\n        setDama(prev => ({\r\n            ...prev,\r\n            [name]: type === 'checkbox' ? checked : value,\r\n        }));\r\n    };\r\n\r\n    const handleOtherReasonsChange = (e) => {\r\n        setOtherReasons(e.target.value);\r\n    };\r\n\r\n\r\n    const handleSubmit = () => {\r\n        \r\n        console.log(IP_DoctorWorkbenchNavigation?.RegistrationId);\r\n        \r\n        const senddata={\r\n            ...Dama,\r\n            OtherReasons,\r\n            RegistrationId:IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n            Createdby:userRecord?.username,\r\n            Type:'Nurse'\r\n            \r\n        }\r\n\r\n        console.log(senddata,'senddata');\r\n        \r\n        axios.post(`${UrlLink}Ip_Workbench/IP_Dama_Details_Link`, senddata)\r\n        .then((res) => {\r\n            const [type, message] = [Object.keys(res.data)[0], Object.values(res.data)[0]];\r\n            dispatch({ type: 'toast', value: { message, type } });\r\n            setIsGetData(prev => !prev);\r\n            handleClear();\r\n            })\r\n            .catch((err) => console.log(err));\r\n        \r\n    }\r\n\r\n\r\n   \r\n  return (\r\n    <>\r\n        <div className=\"Main_container_app\">\r\n            <div className=\"form-section5\">\r\n                <div className=\"common_center_tag\">\r\n                    <h3>Transfer To (capture with date & time) & Reason</h3>\r\n                </div><br />\r\n\r\n                <div>\r\n                    {damaKeys.map((key) => (\r\n                        !key.includes('Date') && !key.includes('Time') && (\r\n                            <div key={key} className=\"RegisFormcon_1 gap_align\">\r\n                                <div className=\"RegisForm_1 size_align\">\r\n                                    <label htmlFor={key}>{getLabelName(key)}</label>\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        id={key}\r\n                                        name={key}\r\n                                        checked={Dama[key]}\r\n                                        onChange={handleDamaChange}\r\n                                        readOnly={IsViewMode}\r\n\r\n                                    />\r\n                                </div><br />\r\n                                <div className=\"RegisForm_1 width_align\">\r\n                                    <label htmlFor={`${key}Date`}> Date</label>\r\n                                    <input\r\n                                        type=\"date\"\r\n                                        id={`${key}Date`}\r\n                                        name={`${key}Date`}\r\n                                        value={Dama[`${key}Date`]}\r\n                                        onChange={handleDamaChange}\r\n                                        readOnly={IsViewMode}\r\n\r\n                                    />\r\n                                </div><br />\r\n                                <div className=\"RegisForm_1 width_align\">\r\n                                    <label htmlFor={`${key}Time`}>Time</label>\r\n                                    <input\r\n                                        type=\"time\"\r\n                                        id={`${key}Time`}\r\n                                        name={`${key}Time`}\r\n                                        value={Dama[`${key}Time`]}\r\n                                        onChange={handleDamaChange}\r\n                                        readOnly={IsViewMode}\r\n\r\n                                    />\r\n                                </div><br />\r\n                            </div>\r\n                        )\r\n                    ))}\r\n                </div><br />\r\n\r\n                <div className=\"RegisForm_1 gap_align\">\r\n                    <div className=\"RegisFormcon_1\">\r\n                        <label htmlFor=\"OtherReasons\">Other Reasons</label>\r\n                        <textarea\r\n                            id=\"OtherReasons\"\r\n                            name=\"OtherReasons\"\r\n                            value={OtherReasons}\r\n                            onChange={handleOtherReasonsChange}\r\n                            readOnly={IsViewMode}\r\n                            style={{ width: '100%' }} // Adjust if needed\r\n                        />\r\n                    </div><br />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"Main_container_Btn\">\r\n                {IsViewMode ? (\r\n                    <button onClick={handleClear}>Clear</button>\r\n                ) : (\r\n                    <button onClick={handleSubmit}>Submit</button>\r\n                )}\r\n            </div>\r\n\r\n            {gridData.length > 0 && (\r\n                <ReactGrid columns={DamaColumns} RowData={gridData} />\r\n            )}\r\n\r\n            <ToastAlert Message={toast.message} Type={toast.type} />\r\n        </div>\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default IP_Doc_DAMA;"],"names":["IP_Doc_DAMA","dispatch","useDispatch","UrlLink","useSelector","state","_state$userRecord","userRecord","toast","_state$userRecord2","IP_DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","console","log","_state$userRecord3","UserData","initialDamaState","BroughtDead","BroughtDeadDate","BroughtDeadTime","HigherCenter","HigherCenterDate","HigherCenterTime","NonAvailabilityOfConsultant","NonAvailabilityOfConsultantDate","NonAvailabilityOfConsultantTime","NonAvailabilityOfIcuBed","NonAvailabilityOfIcuBedDate","NonAvailabilityOfIcuBedTime","ToxicPatientsOrRelatives","ToxicPatientsOrRelativesDate","ToxicPatientsOrRelativesTime","DrunkPatients","DrunkPatientsDate","DrunkPatientsTime","RelativesNotAvailable","RelativesNotAvailableDate","RelativesNotAvailableTime","TransferredtoCOVIDcentre","TransferredtoCOVIDcentreDate","TransferredtoCOVIDcentreTime","Absconded","AbscondedDate","AbscondedTime","DamaNonAffordable","DamaNonAffordableDate","DamaNonAffordableTime","DamaRelativesNotWish","DamaRelativesNotWishDate","DamaRelativesNotWishTime","DamaInsuranceOrCashless","DamaInsuranceOrCashlessDate","DamaInsuranceOrCashlessTime","Dama","setDama","useState","OtherReasons","setOtherReasons","gridData","setGridData","IsGetData","setIsGetData","IsViewMode","setIsViewMode","DamaColumns","key","name","frozen","renderCell","params","_jsx","IconButton","onClick","handleView","row","children","VisibilityIcon","data","_data$OtherReasons","prevState","_data$BroughtDead","_data$BroughtDeadDate","_data$BroughtDeadTime","_data$HigherCenter","_data$HigherCenterDat","_data$HigherCenterTim","_data$NonAvailability","_data$NonAvailability2","_data$NonAvailability3","_data$NonAvailability4","_data$NonAvailability5","_data$NonAvailability6","_data$ToxicPatientsOr","_data$ToxicPatientsOr2","_data$ToxicPatientsOr3","_data$DrunkPatients","_data$DrunkPatientsDa","_data$DrunkPatientsTi","_data$RelativesNotAva","_data$RelativesNotAva2","_data$RelativesNotAva3","_data$TransferredtoCO","_data$TransferredtoCO2","_data$TransferredtoCO3","_data$Absconded","_data$AbscondedDate","_data$AbscondedTime","_data$DamaNonAffordab","_data$DamaNonAffordab2","_data$DamaNonAffordab3","_data$DamaRelativesNo","_data$DamaRelativesNo2","_data$DamaRelativesNo3","_data$DamaInsuranceOr","_data$DamaInsuranceOr2","_data$DamaInsuranceOr3","handleClear","useEffect","axios","get","concat","RegistrationId","Type","then","res","ress","catch","err","damaKeys","Object","keys","filter","getLabelName","replace","handleDamaChange","e","type","checked","value","target","prev","_Fragment","_jsxs","className","map","includes","htmlFor","id","onChange","readOnly","style","width","handleSubmit","senddata","Createdby","username","post","message","values","length","ReactGrid","columns","RowData","ToastAlert","Message"],"sourceRoot":""}