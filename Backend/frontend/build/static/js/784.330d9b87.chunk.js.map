{"version":3,"file":"static/js/784.330d9b87.chunk.js","mappings":"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","sources":["DoctorWorkBench/LabTest.jsx"],"sourcesContent":["\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport ReactGrid from \"../OtherComponent/ReactGrid/ReactGrid\";\r\nimport ToastAlert from \"../OtherComponent/ToastContainer/ToastAlert\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport Button from \"@mui/material/Button\";\r\nimport { FaTrash } from 'react-icons/fa';\r\n\r\n\r\nconst LabTest = () => {\r\n    const UrlLink = useSelector((state) => state.userRecord?.UrlLink);\r\n    const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n    const toast = useSelector((state) => state.userRecord?.toast);\r\n    const dispatchvalue = useDispatch();\r\n    const DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.DoctorWorkbenchNavigation);\r\n\r\n\r\n    const [LabQueue, setLabQueue] = useState({\r\n        LabQueueId: \"\",\r\n        IndivitualArr: \"\",\r\n        FavouritesArr: \"\",\r\n\r\n    });\r\n    const [testType, setTestType] = useState(\"Individual\");\r\n    const [activetestnames, setActivetestnames] = useState([]);\r\n    const [FavTest, setFavTest] = useState([]);\r\n    const [indivitualChecked, setIndivitualChecked] = useState([]);\r\n    const [FavouriteChecked, setFavouriteChecked] = useState([]);\r\n    console.log(\"indivitualChecked\", indivitualChecked);\r\n    console.log(\"FavouriteChecked\", FavouriteChecked);\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(`${UrlLink}Masters/Test_Names_link_LabTest`)\r\n            .then((response) => {\r\n                setActivetestnames(response.data);\r\n\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }, [UrlLink]);\r\n\r\n    useEffect(() => {\r\n        axios.get(`${UrlLink}Masters/Favourites_Names_link`)\r\n            .then((response) => {\r\n                setFavTest(response.data);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }, [UrlLink]);\r\n\r\n    const handleIndividualCheckboxChange = (id, Test_Name) => {\r\n        console.log(\"testType\", id, Test_Name, testType);\r\n        // Check if the individual test is already in any favorite test's TestDetails\r\n        const isDuplicateInFavorites = FavouriteChecked.some(favorite =>\r\n            favorite.TestDetails.some(testDetail => testDetail.TestCode === id)\r\n        );\r\n\r\n        if (isDuplicateInFavorites) {\r\n            const tdata = {\r\n                message: \"Already Selected The Testname in Favourites .\",\r\n                type: \"warn\",\r\n            }\r\n            dispatchvalue({ type: \"toast\", value: tdata });\r\n            return;\r\n        }\r\n        console.log('indivitualChecked aishfniensi387 :', indivitualChecked)\r\n        const isChecked = indivitualChecked.some(item => item.id === id);\r\n        console.log(isChecked)\r\n        if (isChecked) {\r\n            const newCheckedState = indivitualChecked.filter(item => item.id !== id);\r\n            setIndivitualChecked(newCheckedState);\r\n        } else {\r\n            const newCheckedState = [...indivitualChecked, { id, Test_Name, testType }];\r\n            setIndivitualChecked(newCheckedState);\r\n        }\r\n    };\r\n\r\n    const handleFavoriteCheckboxChange = (key, FavouriteName, Current_Amount, TestDetails) => {\r\n        console.log(\"Change detected:\", key, FavouriteName, Current_Amount, TestDetails, testType);\r\n\r\n        // Extract TestCodes from TestDetails\r\n        const testCodesFromDetails = TestDetails.map(testDetail => testDetail.TestCode);\r\n        console.log(\"TestCodes from TestDetails:\", testCodesFromDetails);\r\n\r\n        // Check if any TestCode in TestDetails is already selected in indivitualChecked\r\n        const hasDuplicate = testCodesFromDetails.some(TestCode =>\r\n            indivitualChecked.some(individual => individual.id === TestCode)\r\n        );\r\n\r\n        if (hasDuplicate) {\r\n            const tdata = {\r\n                message: \"Already Some Testname  Selected Indivitual .\",\r\n                type: \"warn\",\r\n            }\r\n            dispatchvalue({ type: \"toast\", value: tdata });\r\n            return; // Prevent adding duplicate\r\n        }\r\n\r\n        const isChecked = FavouriteChecked.some(item => item.key === key);\r\n        if (isChecked) {\r\n            const newCheckedState = FavouriteChecked.filter(item => item.key !== key);\r\n            setFavouriteChecked(newCheckedState);\r\n        } else {\r\n            // Ensure testType is included in the object\r\n            const newCheckedState = [\r\n                ...FavouriteChecked,\r\n                {\r\n                    key,\r\n                    FavouriteName,\r\n                    Current_Amount,\r\n                    TestDetails,\r\n                    testType  // Add testType here\r\n                }\r\n            ];\r\n            setFavouriteChecked(newCheckedState);\r\n        }\r\n    };\r\n\r\n\r\n    const transformFavouriteData = (FavouriteChecked) => {\r\n        return FavouriteChecked.flatMap((favourite, favIndex) =>\r\n            favourite.TestDetails.map((testDetail, testIndex) => ({\r\n                FavouriteName: favourite.FavouriteName,\r\n                TestCode: testDetail.TestCode,\r\n                TestName: testDetail.TestName,\r\n                id: `${favIndex + 1}-${testIndex + 1}`,  // Unique key based on indexes\r\n            }))\r\n        );\r\n    };\r\n\r\n\r\n    const transformFavouriteData1 = (indivitualChecked) => {\r\n        return indivitualChecked.map((indivitual, ind) => ({\r\n            TestCode: indivitual.id,\r\n            TestName: indivitual.Test_Name,\r\n            id: ind + 1,  // Ensure unique key for each row\r\n        }));\r\n    };\r\n\r\n    const handleRemoveIndivitualRow = (row) => {\r\n        console.log(\"row123\", row);\r\n\r\n        // Filter out the row that needs to be removed\r\n        const newCheckedState = indivitualChecked.filter(item => item.id !== row.TestCode);\r\n\r\n        // Update the state with the new array\r\n        setIndivitualChecked(newCheckedState);\r\n    };\r\n\r\n\r\n    const IndivitualColumns = [\r\n\r\n        {\r\n            key: \"id\",\r\n            name: \"S.No\",\r\n            frozen: true,\r\n\r\n        },\r\n        {\r\n            key: \"TestCode\",\r\n            name: \"Test Code\",\r\n            frozen: true,\r\n        },\r\n\r\n        {\r\n            key: \"TestName\",\r\n            name: \"Test Name\",\r\n            frozen: true,\r\n        },\r\n        {\r\n            key: \"Action\",\r\n            name: \"Action\",\r\n            renderCell: (params) => (\r\n                <Button\r\n                    className=\"cell_btn\"\r\n                    onClick={() => handleRemoveIndivitualRow(params.row)}\r\n                >\r\n                    <FaTrash className=\"check_box_clrr_cancell\" />\r\n                </Button>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const FavouritesColumns = [\r\n        {\r\n            key: \"id\",\r\n            name: \"S.No \",\r\n            frozen: true,\r\n        },\r\n        {\r\n            key: \"FavouriteName\",\r\n            name: \"Favourite Name\",\r\n            frozen: true,\r\n        },\r\n        {\r\n            key: \"TestCode\",\r\n            name: \"Test Code\",\r\n        },\r\n        {\r\n            key: \"TestName\",\r\n            name: \"Test Name\",\r\n        },\r\n    ];\r\n    const transformedFavouriteData = transformFavouriteData(FavouriteChecked);\r\n    const transformedFavouriteData1 = transformFavouriteData1(indivitualChecked);\r\n\r\n    const [IsLabQueueGet, setIsLabQueueGet] = useState(false);\r\n    const [LabQueueDatas, setLabQueueDatas] = useState([]);\r\n    const [ViewTest, setViewTest] = useState([]);\r\n    const [View, setView] = useState(false);\r\n\r\n\r\n\r\n    const handleSubmitSelectedTest = () => {\r\n        if (indivitualChecked.length > 0 || FavouriteChecked.length > 0) {\r\n            const data = {\r\n                LabQueueId: LabQueue.LabQueueId,\r\n                IndivitualArr: indivitualChecked || [],\r\n                FavouritesArr: FavouriteChecked || [],\r\n                created_by: userRecord?.username || \"\",\r\n                Register_Id: DoctorWorkbenchNavigation?.RegistrationId || \"\",\r\n            };\r\n            console.log(\"data\", data);\r\n            axios.post(`${UrlLink}OP/Lab_Request_Detailslink`, data)\r\n                .then((res) => {\r\n                    const resData = res.data;\r\n                    const type = Object.keys(resData)[0];\r\n                    const message = Object.values(resData)[0];\r\n                    const tdata = {\r\n                        message: message,\r\n                        type: type,\r\n                    };\r\n                    dispatchvalue({ type: \"toast\", value: tdata });\r\n                    setIsLabQueueGet((prev) => !prev);\r\n                    setLabQueue({\r\n                        LabQueueId: \"\",\r\n                        IndivitualArr: \"\",\r\n                        FavouritesArr: \"\",\r\n                    });\r\n                    setIndivitualChecked([]);\r\n                    setFavouriteChecked([]);\r\n\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n        else {\r\n            const tdata = {\r\n                message: \"Please Select TestNames Or Favourites Names.\",\r\n                type: \"warn\",\r\n            }\r\n            dispatchvalue({ type: \"toast\", value: tdata });\r\n        }\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        // Define the params object to include RegistrationId\r\n        const params = {\r\n            Register_Id: DoctorWorkbenchNavigation.RegistrationId\r\n        };\r\n\r\n        axios.get(`${UrlLink}OP/Lab_Request_Detailslink`, { params })\r\n            .then((res) => {\r\n                const ress = res.data;\r\n                console.log(\"response1234\", ress);\r\n                // Sorting the data\r\n                const sortedData = ress.sort((a, b) => {\r\n                    if (a.TestType === \"Individual\" && b.TestType !== \"Individual\") {\r\n                        return -1; // a comes before b\r\n                    } else if (a.TestType !== \"Individual\" && b.TestType === \"Individual\") {\r\n                        return 1; // b comes before a\r\n                    }\r\n                    return 0; // no change\r\n                });\r\n                setLabQueueDatas(sortedData);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }, [IsLabQueueGet, UrlLink, DoctorWorkbenchNavigation.RegistrationId]);\r\n\r\n    const handleviewFavouriteTestnames = (params) => {\r\n        console.log(\"paramsview\", params.row.TestNames);\r\n        setView(true);\r\n\r\n        setViewTest(params.row.TestNames);\r\n    };\r\n\r\n\r\n\r\n    const LabColumn = [\r\n        {\r\n            key: \"Index\",\r\n            name: \"S.No \",\r\n            frozen: true,\r\n        },\r\n        {\r\n            key: \"TestType\",\r\n            name: \"Test Type\",\r\n            frozen: true,\r\n            renderCell: (params) => (\r\n\r\n                <>\r\n                    {console.log(params)}\r\n                    {\r\n                        params.row.TestType == \"Individual\" ? (\r\n                            <>\r\n                                {params.row.TestType}\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                {`${params.row.FavouriteName} - \r\n                             \r\n                             (${params.row.TestType})`}\r\n                            </>\r\n                        )\r\n                    }\r\n                </>\r\n\r\n            ),\r\n        },\r\n        {\r\n            key: \"TestName\",\r\n            name: \"Test Name\",\r\n\r\n            renderCell: (params) => (\r\n\r\n                <>\r\n                    {console.log(params)}\r\n                    {\r\n                        params.row.TestType == \"Individual\" ? (\r\n                            <>\r\n                                {params.row.TestName}\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <Button\r\n                                    className=\"cell_btn\"\r\n                                    onClick={() => handleviewFavouriteTestnames(params)}\r\n                                >\r\n                                    <VisibilityIcon className=\"check_box_clrr_cancell\" />\r\n                                </Button>\r\n                            </>\r\n                        )\r\n                    }\r\n                </>\r\n\r\n            ),\r\n        },\r\n    ];\r\n    const ViewTestcolumn = [\r\n        {\r\n            key: \"Index\",\r\n            name: \"S.No \",\r\n            frozen: true,\r\n        },\r\n        {\r\n            key: \"TestName\",\r\n            name: \"Test Name\",\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <>\r\n            <div className=\"common_center_tag\">\r\n                <span>Lab Test Name</span>\r\n            </div>\r\n\r\n            <div className=\"RegisFormcon_1\">\r\n                <div className=\"RegisForm_1\">\r\n                    <label style={{ fontSize: '20px' }}>\r\n                        Test Type <span>:</span>\r\n                    </label>\r\n                    <select\r\n                        name=\"testType\"\r\n                        value={testType}\r\n                        autoComplete=\"off\"\r\n                        onChange={(e) => setTestType(e.target.value)}\r\n                    >\r\n                        <option value=\"Individual\">Individual</option>\r\n                        <option value=\"Favourites\">Favourites</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n            {testType === \"Individual\" ? (\r\n                <div className='displayuseraccess'>\r\n                    {activetestnames.map((item, indx) => (\r\n                        <div key={indx} className='displayuseraccess_child' style={{ marginLeft: \"80px\" }}>\r\n                            {console.log('item', item)}\r\n                            {console.log('indivitualChecked indivitualChecked', indivitualChecked)}\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                id={item.id}\r\n                                checked={indivitualChecked.some(checkedItem => checkedItem.id === item.id)}\r\n                                onChange={() => handleIndividualCheckboxChange(item.id, item.Test_Name)}\r\n\r\n                            />\r\n                            <label htmlFor={item.id} className='par_acc_lab'>{item.Test_Name}</label>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            ) : (\r\n                <div className='displayuseraccess'>\r\n                    {FavTest.map((item) => (\r\n\r\n                        <div key={item.id} className='displayuseraccess_child'>\r\n                            {console.log(item)}\r\n                            {console.log(FavouriteChecked)}\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                id={item.id}\r\n                                checked={FavouriteChecked.some(checkedItem => checkedItem.key === item.id)}\r\n                                onChange={() => handleFavoriteCheckboxChange(\r\n                                    item.id,\r\n                                    item.FavouriteName,\r\n                                    item.Current_Amount,\r\n                                    item.TestName,\r\n\r\n                                )}\r\n\r\n                            />\r\n                            <label htmlFor={item.id} className='par_acc_lab'>{item.FavouriteName}</label>\r\n                            {item.TestName.map((child, ind1) => (\r\n                                <div key={ind1} style={{ marginLeft: \"20px\", marginTop: '5px' }}>\r\n                                    <label htmlFor={child.TestCode} className='chi_acc_lab'>{child.TestName}</label><br />\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n\r\n            {transformedFavouriteData1.length > 0 && (\r\n                <>\r\n                    <div className=\"common_center_tag\">\r\n                        <span>Selected Individual TestName</span>\r\n                    </div>\r\n                    <ReactGrid columns={IndivitualColumns} RowData={transformedFavouriteData1} />\r\n                </>\r\n            )}\r\n\r\n            {transformedFavouriteData.length > 0 && (\r\n                <>\r\n                    <div className=\"common_center_tag\">\r\n                        <span>Selected Favourites Name</span>\r\n                    </div>\r\n                    <ReactGrid columns={FavouritesColumns} RowData={transformedFavouriteData} />\r\n                </>\r\n            )}\r\n\r\n            <div className=\"Main_container_Btn\">\r\n                <button onClick={handleSubmitSelectedTest}>\r\n                    save\r\n                </button>\r\n            </div>\r\n\r\n            {LabQueueDatas.length > 0 && (\r\n                <>\r\n                    {console.log(\"ss\", LabQueueDatas)}\r\n                    <ReactGrid columns={LabColumn} RowData={LabQueueDatas} />\r\n                </>\r\n            )}\r\n\r\n            {View && ViewTest.length > 0 && (\r\n                <>\r\n                    {/* {console.log(\"ss\", LabQueueDatas)} */}\r\n                    <ReactGrid columns={ViewTestcolumn} RowData={ViewTest} />\r\n                </>\r\n            )}\r\n\r\n\r\n\r\n\r\n            <ToastAlert Message={toast.message} Type={toast.type} />\r\n\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LabTest;\r\n"],"names":["LabTest","UrlLink","useSelector","state","_state$userRecord","userRecord","_state$userRecord2","UserData","toast","_state$userRecord3","dispatchvalue","useDispatch","DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","LabQueue","setLabQueue","useState","LabQueueId","IndivitualArr","FavouritesArr","testType","setTestType","activetestnames","setActivetestnames","FavTest","setFavTest","indivitualChecked","setIndivitualChecked","FavouriteChecked","setFavouriteChecked","console","log","useEffect","axios","get","concat","then","response","data","catch","err","IndivitualColumns","key","name","frozen","renderCell","params","_jsx","Button","className","onClick","row","newCheckedState","filter","item","id","TestCode","handleRemoveIndivitualRow","children","FaTrash","transformedFavouriteData","flatMap","favourite","favIndex","TestDetails","map","testDetail","testIndex","FavouriteName","TestName","transformFavouriteData","transformedFavouriteData1","indivitual","ind","Test_Name","transformFavouriteData1","IsLabQueueGet","setIsLabQueueGet","LabQueueDatas","setLabQueueDatas","ViewTest","setViewTest","View","setView","Register_Id","RegistrationId","res","ress","sortedData","sort","a","b","TestType","LabColumn","_jsxs","_Fragment","TestNames","handleviewFavouriteTestnames","VisibilityIcon","style","fontSize","value","autoComplete","onChange","e","target","indx","marginLeft","type","checked","some","checkedItem","handleIndividualCheckboxChange","favorite","message","isChecked","htmlFor","handleFavoriteCheckboxChange","Current_Amount","testCodesFromDetails","individual","child","ind1","marginTop","length","ReactGrid","columns","RowData","handleSubmitSelectedTest","created_by","username","post","resData","Object","keys","values","prev","ToastAlert","Message","Type"],"sourceRoot":""}