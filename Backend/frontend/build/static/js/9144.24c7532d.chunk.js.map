{"version":3,"file":"static/js/9144.24c7532d.chunk.js","mappings":"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","sources":["DoctorWorkBench/OP_Sheet.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport ToastAlert from \"../OtherComponent/ToastContainer/ToastAlert\";\r\nimport { IconButton } from '@mui/material';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport ReactGrid from '../OtherComponent/ReactGrid/ReactGrid';\r\n\r\nconst OP_Sheet = () => {\r\n\r\n  const UrlLink = useSelector((state) => state.userRecord?.UrlLink);\r\n  const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n  const toast = useSelector((state) => state.userRecord?.toast);\r\n  // const UsercreatePatientdata = useSelector(state => state.userRecord?.UsercreatePatientdata);\r\n  const DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.DoctorWorkbenchNavigation);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  const [OpSheet, setOpSheet] = useState({\r\n    PresentComplaints: \"\",\r\n    PastHistory: \"\",\r\n    Allergies: \"\",\r\n    Diagnosis: \"\",\r\n    Treatment: \"\",\r\n  });\r\n\r\n  console.log(\"opshett\", OpSheet);\r\n\r\n\r\n  const [gridData, setGridData] = useState([]);\r\n  const [IsGetData, setIsGetData] = useState(false)\r\n  const [IsViewMode, setIsViewMode] = useState(false)\r\n\r\n\r\n\r\n  const OPSheetcolumns = [\r\n    { key: 'id', name: 'S.No', frozen: true },\r\n    { key: 'VisitId', name: 'VisitId', frozen: true },\r\n    { key: 'PrimaryDoctorId', name: 'Doctor Id', frozen: true },\r\n    { key: 'PrimaryDoctorName', name: 'Doctor Name', frozen: true },\r\n    { key: 'Date', name: 'Date', frozen: true },\r\n    { key: 'Time', name: 'Time', frozen: true },\r\n    { key: 'PresentComplaints', name: 'Present Complaints' },\r\n    { key: 'PastHistory', name: 'Past History' },\r\n    { key: 'Allergies', name: 'Allergies' },\r\n    { key: 'Diagnosis', name: 'Diagnosis' },\r\n    { key: 'Treatment', name: 'Treatment' },\r\n    {\r\n      key: 'view',\r\n      name: 'View',\r\n      frozen: true,\r\n      renderCell: (params) => (\r\n        <IconButton onClick={() => handleView(params.row)}>\r\n          <VisibilityIcon />\r\n        </IconButton>\r\n      ),\r\n    },\r\n  ];\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    axios.get(`${UrlLink}Workbench/Workbench_OP_Sheet_Details`, { params: { RegistrationId: DoctorWorkbenchNavigation?.pk } })\r\n      .then((res) => {\r\n        const ress = res.data\r\n        console.log(res);\r\n        setGridData(ress)\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n  }, [IsGetData, UrlLink])\r\n\r\n\r\n  const handleView = (data) => {\r\n    setOpSheet({\r\n      PresentComplaints: data.PresentComplaints || '',\r\n      PastHistory: data.PastHistory || '',\r\n      Allergies: data.Allergies || '',\r\n      Diagnosis: data.Diagnosis || '',\r\n      Treatment: data.Treatment || '',\r\n    });\r\n    setIsViewMode(true);\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setOpSheet({\r\n      PresentComplaints: '',\r\n      PastHistory: '',\r\n      Allergies: '',\r\n      Diagnosis: '',\r\n      Treatment: '',\r\n    });\r\n    setIsViewMode(false);\r\n  };\r\n\r\n\r\n  const handleMlcChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setOpSheet((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n\r\n  const handleSubmit = () => {\r\n    const filledFormData = Object.fromEntries(\r\n      Object.entries(OpSheet).filter(([_, value]) => value.trim() !== '')\r\n    );\r\n\r\n    if (Object.keys(filledFormData).length === 0) {\r\n      dispatch({\r\n        type: 'toast',\r\n        value: { message: 'Please provide at least one field.', type: 'warn' },\r\n      });\r\n      return; // Exit the function early if no fields are filled\r\n    }\r\n\r\n    const data = {\r\n      ...filledFormData,\r\n      RegistrationId: DoctorWorkbenchNavigation?.pk,\r\n\r\n      // PatientId: UsercreatePatientdata?.PatientId?.id,\r\n      // PatientName: `${UsercreatePatientdata?.PatientId?.FirstName || ''} ${UsercreatePatientdata?.PatientId?.MiddleName || ''} ${UsercreatePatientdata?.PatientId?.SurName || ''}`,\r\n      created_by: userRecord?.username || '',\r\n    };\r\n\r\n    console.log(data, 'data ');\r\n\r\n    axios\r\n      .post(`${UrlLink}Workbench/Workbench_OP_Sheet_Details`, data)\r\n      .then((res) => {\r\n        const [type, message] = [Object.keys(res.data)[0], Object.values(res.data)[0]];\r\n        dispatch({ type: 'toast', value: { message, type } });\r\n        setIsGetData(prev => !prev);\r\n        handleClear();\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"form-section5\">\r\n        <div className=\"common_center_tag\">\r\n          <h3>Dr Shree Vijay Phadke - OP</h3>\r\n        </div>\r\n        <br />\r\n        <div className=\"Otdoctor_intra_Con\">\r\n          {[\r\n            { id: \"PresentComplaints\", label: \"Present Complaints\" },\r\n            { id: \"PastHistory\", label: \"Past History\" },\r\n            { id: \"Allergies\", label: \"Allergies\" },\r\n            { id: \"Diagnosis\", label: \"Diagnosis\" },\r\n            { id: \"Treatment\", label: \"Treatment\" },\r\n          ].map((field, indx) => (\r\n            <div className=\"text_adjust_mt_Ot\" key={indx}>\r\n              <label htmlFor={field.id}>\r\n                {field.label} <span>:</span>\r\n              </label>\r\n              <textarea\r\n                id={field.id}\r\n                name={field.id}\r\n                value={OpSheet[field.id]}\r\n                onChange={handleMlcChange}\r\n              ></textarea>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"Main_container_Btn\">\r\n\r\n        {IsViewMode && (\r\n          <button onClick={handleClear}>Clear</button>\r\n        )}\r\n        {!IsViewMode && (\r\n          <button onClick={handleSubmit}>Submit</button>\r\n        )}\r\n      </div>\r\n\r\n      {gridData.length > 0 &&\r\n        <ReactGrid columns={OPSheetcolumns} RowData={gridData} />\r\n      }\r\n\r\n      <ToastAlert Message={toast.message} Type={toast.type} />\r\n\r\n\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OP_Sheet;\r\n"],"names":["OP_Sheet","UrlLink","useSelector","state","_state$userRecord","userRecord","_state$userRecord2","UserData","toast","_state$userRecord3","DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","dispatch","useDispatch","OpSheet","setOpSheet","useState","PresentComplaints","PastHistory","Allergies","Diagnosis","Treatment","console","log","gridData","setGridData","IsGetData","setIsGetData","IsViewMode","setIsViewMode","OPSheetcolumns","key","name","frozen","renderCell","params","_jsx","IconButton","onClick","handleView","row","children","VisibilityIcon","useEffect","axios","get","concat","RegistrationId","pk","then","res","ress","data","catch","err","handleClear","handleMlcChange","e","value","target","prev","_jsxs","_Fragment","className","id","label","map","field","indx","htmlFor","onChange","handleSubmit","filledFormData","Object","fromEntries","entries","filter","_ref","_","trim","keys","length","type","message","created_by","username","post","values","ReactGrid","columns","RowData","ToastAlert","Message","Type"],"sourceRoot":""}