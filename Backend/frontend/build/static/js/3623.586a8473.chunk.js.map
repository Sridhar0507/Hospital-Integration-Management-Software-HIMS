{"version":3,"file":"static/js/3623.586a8473.chunk.js","mappings":"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","sources":["IP_Workbench/Nurse/IPM/IP_BloodTransfusedRecord.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ReactGrid from '../../../OtherComponent/ReactGrid/ReactGrid';\r\nimport axios from 'axios';\r\nimport ToastAlert from '../../../OtherComponent/ToastContainer/ToastAlert';\r\nimport { IconButton } from '@mui/material';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\n\r\n\r\n\r\nconst IP_BloodTransfusedRecord = () => {\r\n    const dispatch = useDispatch();\r\n    const UrlLink = useSelector(state => state.userRecord?.UrlLink);\r\n    const toast = useSelector(state => state.userRecord?.toast);\r\n    const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n    console.log(IP_DoctorWorkbenchNavigation,'IP_DoctorWorkbenchNavigation');\r\n\r\n    const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n\r\n    \r\n    const formatLabel = (label) => {\r\n\r\n        if (/[a-z]/.test(label) && /[A-Z]/.test(label) && !/\\d/.test(label)) {\r\n            return label\r\n                .replace(/([a-z])([A-Z])/g, \"$1 $2\")\r\n                .replace(/^./, (str) => str.toUpperCase());\r\n        } else {\r\n            return label;\r\n        }\r\n    };\r\n\r\n   \r\n\r\n    const [BloodTransfusedRecord, setBloodTransfusedRecord] = useState({\r\n       \r\n        SourcedFrom: \"\",\r\n        GetAddress: \"\",\r\n        BloodGroup: \"\",\r\n        Type: \"\",\r\n        CompatabilityCheckDone: \"\",\r\n        PackNo: \"\",\r\n        ExpiryDate: \"\",\r\n        ExpiryStartTime: \"\",\r\n        ExpiryEndTime: \"\",\r\n        AnyAdverseReactions: \"\",\r\n        Remarks: \"\",\r\n\r\n\r\n    });\r\n\r\n\r\n    const [gridData, setGridData] = useState([])\r\n    const [IsGetData, setIsGetData] = useState(false)\r\n\r\n    const [IsViewMode, setIsViewMode] = useState(false)\r\n  \r\n    \r\n      \r\n    const BloodTransfusedRecordColumns = [\r\n        {\r\n            key: 'id',\r\n            name: 'S.No',\r\n            frozen: true\r\n        },\r\n        { key: 'PrimaryDoctorName', name: 'Doctor Name',frozen: true },\r\n      \r\n        {\r\n            key: 'CurrDate',\r\n            name: 'Date',\r\n            frozen: true\r\n        },\r\n        {\r\n            key: 'CurrTime',\r\n            name: 'Time',\r\n            frozen: true\r\n        },\r\n       \r\n       \r\n       \r\n        {\r\n            key: 'view',\r\n            frozen: true,\r\n            name: 'View',\r\n            renderCell: (params) => (\r\n              <IconButton onClick={() => handleView(params.row)}>\r\n                <VisibilityIcon />\r\n              </IconButton>\r\n            ),\r\n          },\r\n        { key: 'SourcedFrom', name: 'SourcedFrom' },\r\n        { key: 'GetAddress', name: 'Address' },\r\n        { key: 'BloodGroup', name: 'BloodGroup' },\r\n        { key: 'Type', name: 'Type' },\r\n        { key: 'CompatabilityCheckDone', name: 'CompatabilityCheckDone' },\r\n        { key: 'PackNo', name: 'PackNo' },\r\n        { key: 'ExpiryDate', name: 'ExpiryDate' },\r\n        { key: 'ExpiryStartTime', name: 'ExpiryStartTime' },\r\n        { key: 'ExpiryEndTime', name: 'ExpiryEndTime' },\r\n        { key: 'AnyAdverseReactions', name: 'AnyAdverseReactions' },\r\n        { key: 'Remarks', name: 'Remarks' },\r\n\r\n        \r\n    ]\r\n\r\n     // Handle setting the form data when viewing\r\n     const handleView = (data) => {\r\n        setBloodTransfusedRecord({\r\n            SourcedFrom: data.SourcedFrom || '',\r\n            GetAddress: data.GetAddress || '',\r\n            BloodGroup: data.BloodGroup || '',\r\n            Type: data.Type || '',\r\n            CompatabilityCheckDone: data.CompatabilityCheckDone || '',\r\n            PackNo: data.PackNo || '',\r\n            ExpiryDate: data.ExpiryDate || '',\r\n            ExpiryStartTime: data.ExpiryStartTime || '',\r\n            ExpiryEndTime: data.ExpiryEndTime || '',\r\n            AnyAdverseReactions: data.AnyAdverseReactions || '',\r\n            Remarks: data.Remarks || '',\r\n            \r\n            \r\n        });\r\n        setIsViewMode(true);\r\n    };\r\n    \r\n  \r\n  // Handle clearing the form and resetting the view mode\r\n  const handleClear = () => {\r\n    setBloodTransfusedRecord({\r\n        SourcedFrom: '',\r\n        GetAddress: '',\r\n        BloodGroup: '',\r\n        Type: '',\r\n        CompatabilityCheckDone: '',\r\n        PackNo: '',\r\n        ExpiryDate: '',\r\n        ExpiryStartTime: '',\r\n        ExpiryEndTime: '',\r\n        AnyAdverseReactions: '',\r\n        Remarks: '',\r\n       \r\n    });\r\n    setIsViewMode(false);\r\n};\r\n\r\n  \r\n\r\n    useEffect(() => {\r\n        axios.get(`${UrlLink}Ip_Workbench/IP_BloodTransfusedRecord_Details_Link`,{params:{RegistrationId:IP_DoctorWorkbenchNavigation?.RegistrationId,Type: 'Nurse'}})\r\n            .then((res) => {\r\n                const ress = res.data\r\n                console.log(ress)\r\n                setGridData(ress)\r\n    \r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            })\r\n      }, [UrlLink,IP_DoctorWorkbenchNavigation,IsGetData])\r\n    \r\n    \r\n\r\n\r\n      const HandleOnChange = (e) => {\r\n        const { name, value } = e.target;\r\n        const formattedValue = value.trim();\r\n        setBloodTransfusedRecord((prevFormData) => ({\r\n            ...prevFormData,\r\n            [name]: formattedValue,\r\n        }));\r\n    };\r\n\r\n\r\n    const handleSubmit = () => {\r\n        \r\n        console.log(IP_DoctorWorkbenchNavigation?.RegistrationId);\r\n        \r\n        const senddata={\r\n            ...BloodTransfusedRecord,\r\n            RegistrationId:IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n            Createdby:userRecord?.username,\r\n            \r\n            \r\n        }\r\n\r\n        console.log(senddata,'senddata');\r\n        \r\n        axios.post(`${UrlLink}Ip_Workbench/IP_BloodTransfusedRecord_Details_Link`, senddata)\r\n        .then((res) => {\r\n            const [type, message] = [Object.keys(res.data)[0], Object.values(res.data)[0]];\r\n            dispatch({ type: 'toast', value: { message, type } });\r\n            setIsGetData(prev => !prev);\r\n            handleClear();\r\n            })\r\n        .catch((err) => console.log(err));\r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n                <div className=\"RegisFormcon_1\">\r\n                {\r\n                    Object.keys(BloodTransfusedRecord).map((p, index) => (\r\n                        <div className='RegisForm_1' key={p}>\r\n                            {/* Static labels for each field */}\r\n                            {p === 'SourcedFrom' ? (\r\n                                <>\r\n                                    <label htmlFor={`${p}_${index}`}>Sourced From<span>:</span></label>\r\n                                    <select\r\n                                        id={`${p}_${index}`}\r\n                                        name={p}\r\n                                        value={BloodTransfusedRecord[p]}\r\n                                        onChange={HandleOnChange}\r\n                                        readOnly={IsViewMode}\r\n                                    >\r\n                                        <option value=\"\">Select</option>\r\n                                        <option value=\"Inhouse\">Inhouse</option>\r\n                                        <option value=\"Outsourced\">Outsourced</option>\r\n                                    </select>\r\n                                </>\r\n                            ) : p === 'BloodGroup' ? (\r\n                                <>\r\n                                    <label htmlFor={`${p}_${index}`}>Blood Group<span>:</span></label>\r\n                                    <select\r\n                                        id={`${p}_${index}`}\r\n                                        name={p}\r\n                                        value={BloodTransfusedRecord[p]}\r\n                                        onChange={HandleOnChange}\r\n                                        readOnly={IsViewMode}\r\n                                    >\r\n                                        <option value=\"\">Select</option>\r\n                                        {/* Blood Group Options */}\r\n                                        <option value=\"A+\">A+</option>\r\n                                        <option value=\"A-\">A-</option>\r\n                                        <option value=\"A1+\">A1+</option>\r\n                                        <option value=\"A1-\">A1-</option>\r\n                                        <option value=\"A1B+\">A1B+</option>\r\n                                        <option value=\"A1B-\">A1B-</option>\r\n                                        <option value=\"A2+\">A2+</option>\r\n                                        <option value=\"A2-\">A2-</option>\r\n                                        <option value=\"A2B+\">A2B+</option>\r\n                                        <option value=\"A2B-\">A2B-</option>\r\n                                        <option value=\"AB+\">AB+</option>\r\n                                        <option value=\"AB-\">AB-</option>\r\n                                        <option value=\"B+\">B+</option>\r\n                                        <option value=\"B-\">B-</option>\r\n                                        <option value=\"O+\">O+</option>\r\n                                        <option value=\"O-\">O-</option>\r\n                                        <option value=\"Bombay Blood\">Bombay Blood</option>\r\n                                        <option value=\"INRA\">INRA</option>\r\n                                    </select>\r\n                                </>\r\n                            ) : p === 'Type' ? (\r\n                                <>\r\n                                    <label htmlFor={`${p}_${index}`}>Blood Type<span>:</span></label>\r\n                                    <select\r\n                                        id={`${p}_${index}`}\r\n                                        name={p}\r\n                                        value={BloodTransfusedRecord[p]}\r\n                                        onChange={HandleOnChange}\r\n                                        readOnly={IsViewMode}\r\n                                    >\r\n                                        <option value=\"\">Select</option>\r\n                                        <option value=\"Whole Blood\">Whole Blood</option>\r\n                                        <option value=\"Plasma\">Plasma</option>\r\n                                        <option value=\"Platelets\">Platelets</option>\r\n                                        <option value=\"RBCs\">RBCs</option>\r\n                                    </select>\r\n                                </>\r\n                            ) : p === 'CompatabilityCheckDone' ? (\r\n                                <>\r\n                                    <label htmlFor={`${p}_${index}`}>Compatability Check Done<span>:</span></label>\r\n                                    <select\r\n                                        id={`${p}_${index}`}\r\n                                        name={p}\r\n                                        value={BloodTransfusedRecord[p]}\r\n                                        onChange={HandleOnChange}\r\n                                        readOnly={IsViewMode}\r\n                                    >\r\n                                        <option value=\"\">Select</option>\r\n                                        <option value=\"Yes\">Yes</option>\r\n                                        <option value=\"No\">No</option>\r\n                                    </select>\r\n                                </>\r\n                            ) : BloodTransfusedRecord.SourcedFrom === 'Outsourced' && p === 'GetAddress' ? (\r\n                                <>\r\n                                    <label htmlFor={`${p}_${index}`}>Address<span>:</span></label>\r\n                                    <textarea\r\n                                        id={`${p}_${index}`}\r\n                                        name={p}\r\n                                        value={BloodTransfusedRecord[p]}\r\n                                        onChange={HandleOnChange}\r\n                                        readOnly={IsViewMode}\r\n                                    />\r\n                                </>\r\n                            ) : p === 'AnyAdverseReactions' ? (\r\n                                <>\r\n                                    <label htmlFor={`${p}_${index}`}>Any Adverse Reactions<span>:</span></label>\r\n                                    <select\r\n                                        id={`${p}_${index}`}\r\n                                        name={p}\r\n                                        value={BloodTransfusedRecord[p]}\r\n                                        onChange={HandleOnChange}\r\n                                        readOnly={IsViewMode}\r\n                                    >\r\n                                        <option value=\"\">Select</option>\r\n                                        <option value=\"Yes\">Yes</option>\r\n                                        <option value=\"No\">No</option>\r\n                                    </select>\r\n                                </>\r\n                            ) : p === 'Remarks' ? (\r\n                                <>\r\n                                    <label htmlFor={`${p}_${index}`}>Remarks<span>:</span></label>\r\n                                    <textarea\r\n                                        id={`${p}_${index}`}\r\n                                        name={p}\r\n                                        value={BloodTransfusedRecord[p]}\r\n                                        onChange={HandleOnChange}\r\n                                        readOnly={IsViewMode}\r\n                                        placeholder='Enter your remarks here'\r\n                                    />\r\n                                </>\r\n                            ) : p === 'PackNo' ? (\r\n                                <>\r\n                                    <label htmlFor={`${p}_${index}`}>Pack No<span>:</span></label>\r\n                                    <input\r\n                                        id={`${p}_${index}`}\r\n                                        \r\n                                        name={p}\r\n                                        readOnly={IsViewMode}\r\n                                        value={BloodTransfusedRecord[p]}\r\n                                        onChange={HandleOnChange}\r\n                                    />\r\n                                </>\r\n                            ) : p === 'ExpiryDate' ? (\r\n                                <>\r\n                                    <label htmlFor={`${p}_${index}`}>Expiry Date<span>:</span></label>\r\n                                    <input\r\n                                        id={`${p}_${index}`}\r\n                                        type='date'\r\n                                        name={p}\r\n                                        readOnly={IsViewMode}\r\n                                        value={BloodTransfusedRecord[p]}\r\n                                        onChange={HandleOnChange}\r\n                                    />\r\n                                </>\r\n                            ) : p === 'ExpiryStartTime' ? (\r\n                                <>\r\n                                    <label htmlFor={`${p}_${index}`}>Start Time<span>:</span></label>\r\n                                    <input\r\n                                        id={`${p}_${index}`}\r\n                                        type='time'\r\n                                        name={p}\r\n                                        readOnly={IsViewMode}\r\n                                        value={BloodTransfusedRecord[p]}\r\n                                        onChange={HandleOnChange}\r\n                                    />\r\n                                </>\r\n                            ) : p === 'ExpiryEndTime' ? (\r\n                                <>\r\n                                    <label htmlFor={`${p}_${index}`}>End Time<span>:</span></label>\r\n                                    <input\r\n                                        id={`${p}_${index}`}\r\n                                        type='time'\r\n                                        name={p}\r\n                                        readOnly={IsViewMode}\r\n                                        value={BloodTransfusedRecord[p]}\r\n                                        onChange={HandleOnChange}\r\n                                    />\r\n                                </>\r\n                            ) :null}\r\n                        </div>\r\n                    ))\r\n                }\r\n\r\n                </div>\r\n\r\n                <div className=\"Main_container_Btn\">\r\n            \r\n                    {IsViewMode && (\r\n                        <button onClick={handleClear}>Clear</button>\r\n                    )}\r\n                    {!IsViewMode && (\r\n                        <button onClick={handleSubmit}>Submit</button>\r\n                    )}\r\n                </div>\r\n\r\n                {gridData.length >= 0 &&\r\n                    <ReactGrid columns={BloodTransfusedRecordColumns} RowData={gridData} />\r\n                }\r\n            \r\n            <ToastAlert Message={toast.message} Type={toast.type} />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default IP_BloodTransfusedRecord;"],"names":["IP_BloodTransfusedRecord","dispatch","useDispatch","UrlLink","useSelector","state","_state$userRecord","userRecord","toast","_state$userRecord2","IP_DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","console","log","_state$userRecord3","UserData","BloodTransfusedRecord","setBloodTransfusedRecord","useState","SourcedFrom","GetAddress","BloodGroup","Type","CompatabilityCheckDone","PackNo","ExpiryDate","ExpiryStartTime","ExpiryEndTime","AnyAdverseReactions","Remarks","gridData","setGridData","IsGetData","setIsGetData","IsViewMode","setIsViewMode","BloodTransfusedRecordColumns","key","name","frozen","renderCell","params","_jsx","IconButton","onClick","handleView","row","children","VisibilityIcon","data","handleClear","useEffect","axios","get","concat","RegistrationId","then","res","ress","catch","err","HandleOnChange","e","value","target","formattedValue","trim","prevFormData","_jsxs","_Fragment","className","Object","keys","map","p","index","htmlFor","id","onChange","readOnly","placeholder","type","handleSubmit","senddata","Createdby","username","post","message","values","prev","length","ReactGrid","columns","RowData","ToastAlert","Message"],"sourceRoot":""}