{"version":3,"file":"static/js/427.d5223832.chunk.js","mappings":"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","sources":["DoctorWorkBench/RadiologyTest.jsx"],"sourcesContent":["\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ReactGrid from \"../OtherComponent/ReactGrid/ReactGrid\";\r\nimport ToastAlert from \"../OtherComponent/ToastContainer/ToastAlert\";\r\nimport { FaTrash } from 'react-icons/fa';\r\nimport Button from \"@mui/material/Button\";\r\n\r\n\r\n\r\nconst RadiologyTest = () => {\r\n    const [IsTestNameGet, setIsTestNameGet] = useState(false);\r\n    const [TestNames, setTestNames] = useState([]);\r\n    const UrlLink = useSelector((state) => state.userRecord?.UrlLink);\r\n    const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n    const toast = useSelector((state) => state.userRecord?.toast);\r\n    const DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.DoctorWorkbenchNavigation);\r\n    const dispatchvalue = useDispatch();\r\n\r\n    useEffect(() => {\r\n        axios\r\n            .get(`${UrlLink}Masters/Radiology_details_link_view`)\r\n            .then((res) => {\r\n                const ress = res.data;\r\n                console.log(\"testnameasas\", ress);\r\n                setTestNames(ress);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }, [IsTestNameGet, UrlLink]);\r\n\r\n    const [CheckedTestName, setCheckedTestName] = useState([]);\r\n    const [SubtestNo, setSubtestNo] = useState([]);\r\n    console.log(\"CheckedTestName\", CheckedTestName);\r\n    console.log(\"SubtestNo\", SubtestNo);\r\n\r\n\r\n    const handleCheckboxChange = (Subtestid, SubTest_Code, SubTestName, Amount, testid, TestName, TestCode, Radiologyid, RadiologyName,SubTestType) => {\r\n        // Check if the current subtest is already checked by matching both SubTest_Code and testid\r\n        const isChecked = CheckedTestName.some(item => item.SubTest_Code === SubTest_Code && item.testid === testid);\r\n\r\n        if (isChecked) {\r\n            // If checked, remove it from the array\r\n            const newCheckedState = CheckedTestName.filter(item => !(item.SubTest_Code === SubTest_Code && item.testid === testid));\r\n            setCheckedTestName(newCheckedState);\r\n        } else {\r\n            // If not checked, add it to the array\r\n            const newCheckedState = [\r\n                ...CheckedTestName,\r\n                {\r\n                    Radiologyid,\r\n                    RadiologyName,\r\n                    testid,\r\n                    TestName,\r\n                    TestCode,\r\n                    Subtestid,\r\n                    SubTest_Code,\r\n                    TestCode,\r\n                    SubTestName,\r\n                    SubTestType,\r\n                    Amount,\r\n                }\r\n            ];\r\n            setCheckedTestName(newCheckedState);\r\n        }\r\n    };\r\n\r\n\r\n    const handleCheckboxSubtestNo = (Curr_Amount, testid, TestName, Radiologyid, RadiologyName, TestCode,SubTestType) => {\r\n        // console.log(\"Curr_Amount\", Curr_Amount);\r\n        // console.log(\"testid\", testid);\r\n        // console.log(\"TestName\", TestName);\r\n        // console.log(\"Radiologyid\", Radiologyid);\r\n        // console.log(\"RadiologyName\", RadiologyName);\r\n        // console.log(\"TestCode\", TestCode);\r\n        // console.log(\"SubTestType\",SubTestType);\r\n\r\n        const isChecked = SubtestNo.some(item => item.TestCode === TestCode);\r\n        if (isChecked) {\r\n            const newCheckedState = SubtestNo.filter(item => item.TestCode !== TestCode);\r\n            setSubtestNo(newCheckedState);\r\n        } else {\r\n            const newCheckedState = [...SubtestNo, { Radiologyid, RadiologyName, testid, TestName, Curr_Amount, TestCode,SubTestType }];\r\n            setSubtestNo(newCheckedState);\r\n        }\r\n    };\r\n\r\n    const handleRemoveTestName = (row) => {\r\n        // Remove from SubtestNo (if applicable)\r\n        const newSubtestNoState = SubtestNo.filter(\r\n            item => item.testid !== row.testid || item.Radiologyid !== row.Radiologyid\r\n        );\r\n        setSubtestNo(newSubtestNoState);\r\n    };\r\n    const handleRemoveTestName1 = (params) => {\r\n\r\n        const { row } = params; // Extract the row data from params\r\n\r\n\r\n        // Remove from CheckedTestName\r\n        const newCheckedState = CheckedTestName.filter(\r\n            item =>\r\n                item.Radiologyid !== row.Radiologyid ||\r\n                item.TestCode !== row.TestCode ||\r\n                item.SubTest_Code !== row.SubTest_Code\r\n        );\r\n        setCheckedTestName(newCheckedState);\r\n\r\n        // Remove from SubtestNo (if applicable)\r\n        const newSubtestNoState = SubtestNo.filter(\r\n            item =>\r\n                item.Radiologyid !== row.Radiologyid ||\r\n                item.TestCode !== row.TestCode\r\n        );\r\n        setSubtestNo(newSubtestNoState);\r\n    };\r\n\r\n\r\n\r\n\r\n    const IndivitualColumns = [\r\n\r\n        {\r\n            key: \"id\",\r\n            name: \"S.No\",\r\n            frozen: true,\r\n\r\n        },\r\n        {\r\n            key: \"TestCode\",\r\n            name: \"Test Code\",\r\n            frozen: true,\r\n        },\r\n        {\r\n            key: \"RadiologyName\",\r\n            name: \"Radiology Name\",\r\n            frozen: true,\r\n        },\r\n\r\n\r\n        {\r\n            key: \"TestName\",\r\n            name: \"Test Name\",\r\n            frozen: true,\r\n        },\r\n        {\r\n            key: \"Action\",\r\n            name: \"Action\",\r\n            renderCell: (params) => (\r\n                <Button\r\n                    className=\"cell_btn\"\r\n                    onClick={() => handleRemoveTestName(params.row)}\r\n                >\r\n                    <FaTrash className=\"check_box_clrr_cancell\" />\r\n                </Button>\r\n            ),\r\n        },\r\n    ];\r\n    const FavouritesColumns = [\r\n        {\r\n            key: \"id\",\r\n            name: \"S.No \",\r\n            frozen: true,\r\n        },\r\n        {\r\n            key: \"RadiologyName\",\r\n            name: \"RadiologyName\",\r\n            frozen: true,\r\n        },\r\n        {\r\n            key: \"TestCode\",\r\n            name: \"Test Code\",\r\n        },\r\n        {\r\n            key: \"TestName\",\r\n            name: \"Test Name\",\r\n        },\r\n        {\r\n            key: \"SubTestName\",\r\n            name: \"Sub TestName\",\r\n        },\r\n        {\r\n            key: \"Amount\",\r\n            name: \"Amount\",\r\n        },\r\n        {\r\n            key: \"Action\",\r\n            name: \"Action\",\r\n            renderCell: (params) => (\r\n                <Button\r\n                    className=\"cell_btn\"\r\n                    onClick={() => handleRemoveTestName1(params)}\r\n                >\r\n                    <FaTrash className=\"check_box_clrr_cancell\" />\r\n                </Button>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    const transformFavouriteData1 = (CheckedTestName) => {\r\n        return CheckedTestName.map((sutestyes, ind) => ({\r\n            Radiologyid: sutestyes.Radiologyid,\r\n            RadiologyName: sutestyes.RadiologyName,\r\n            TestCode: sutestyes.TestCode,\r\n            TestName: sutestyes.TestName,\r\n            testid: sutestyes.testid,\r\n            Subtestid: sutestyes.Subtestid, // Include subtestid\r\n            Amount: sutestyes.Amount,\r\n            SubTestName: sutestyes.SubTestName,\r\n            SubTest_Code: sutestyes.SubTest_Code,\r\n            id: ind + 1,  // Ensure unique key for each row\r\n        }));\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    const transformFavouriteData = (SubtestNo) => {\r\n        return SubtestNo.map((sutestno, ind) => ({\r\n            Radiologyid: sutestno.Radiologyid, // Correctly assign Radiologyid\r\n            RadiologyName: sutestno.RadiologyName,\r\n            TestCode: sutestno.TestCode,\r\n            TestName: sutestno.TestName,\r\n            testid: sutestno.testid, // Correctly assign testid\r\n            id: ind + 1,  // Ensure unique key for each row\r\n        }));\r\n    };\r\n\r\n    const transformedFavouriteData = transformFavouriteData1(CheckedTestName);\r\n    const transformedFavouriteData1 = transformFavouriteData(SubtestNo);\r\n\r\n    const [RadiologyTest, setRadiologyTest] = useState({\r\n        RadiologyTestId: \"\",\r\n        CheckedTestNameArr: \"\",\r\n        SubtestNoArr: \"\",\r\n    });\r\n    const [IsRadilogyGet, setIsRadilogyGet] = useState(false);\r\n    const [RadiologyGetNames, setRadiologyGetNames] = useState([]);\r\n\r\n    const handleSubmitRadiologyTest = () => {\r\n        if (CheckedTestName.length > 0 || SubtestNo.length > 0) {\r\n            const data = {\r\n                RadiologyTestId: RadiologyTest.RadiologyTestId,\r\n                CheckedTestNameArr: CheckedTestName,\r\n                SubtestNoArr: SubtestNo,\r\n                created_by: userRecord?.username || \"\",\r\n                Register_Id: DoctorWorkbenchNavigation?.RegistrationId || \"\",\r\n            };\r\n            console.log(\"data\", data);\r\n            axios.post(`${UrlLink}OP/Radiology_Request_Detailslink`, data)\r\n                .then((res) => {\r\n                    const resData = res.data;\r\n                    const type = Object.keys(resData)[0];\r\n                    const message = Object.values(resData)[0];\r\n                    const tdata = {\r\n                        message: message,\r\n                        type: type,\r\n                    };\r\n                    dispatchvalue({ type: \"toast\", value: tdata });\r\n                    setIsRadilogyGet((prev) => !prev);\r\n                    setRadiologyTest({\r\n\r\n                        RadiologyTestId: \"\",\r\n                        CheckedTestNameArr: [],\r\n                        SubtestNoArr: [],\r\n                    });\r\n                    setCheckedTestName([]);\r\n                    setSubtestNo([]);\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err);\r\n                });\r\n        }\r\n        else {\r\n            const tdata = {\r\n                message: \"Please Select TestNames .\",\r\n                type: \"warn\",\r\n            }\r\n            dispatchvalue({ type: \"toast\", value: tdata });\r\n        }\r\n    };\r\n\r\n    useEffect(()=>{\r\n        const params = {\r\n            Register_Id: DoctorWorkbenchNavigation.RegistrationId\r\n        };\r\n        axios.get(`${UrlLink}OP/Radiology_Request_Detailslink`,{params})\r\n        .then((res)=>{\r\n            const ress = res.data;\r\n            console.log(\"response111\",ress);\r\n            setRadiologyGetNames(ress);\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err);\r\n        });\r\n    },[IsRadilogyGet,UrlLink,DoctorWorkbenchNavigation.RegistrationId]);\r\n\r\n    return (\r\n\r\n        <>\r\n            <div className=\"common_center_tag\">\r\n                <span>Radiology TestName</span>\r\n            </div>\r\n            <div className='displayuseraccess'>\r\n                {TestNames.map((item) => (\r\n                    <div key={item.id} className='displayuseraccess_child'>\r\n                        <label htmlFor={item.id} style={{ fontSize: '20px', fontWeight: 'bold' }} className='par_acc_lab'>\r\n                            {item.RadiologyName}\r\n                        </label>\r\n                        {item.TestNames.filter(test => test.Types === \"No\").map((test) => (\r\n                            <div key={test.id} style={{ marginLeft: '20px', marginTop: '5px' }}>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    id={test.id}\r\n                                    onChange={() => handleCheckboxSubtestNo(test.Curr_Amount, test.id, test.TestName, item.id, item.RadiologyName, test.TestCode,test.Types )}\r\n                                    checked={SubtestNo.some(checkedItem => checkedItem.TestCode === test.TestCode)}\r\n\r\n                                    style={{ marginRight: '10px' }}\r\n                                />\r\n                                <label htmlFor={test.id} className='chi_acc_lab'>\r\n                                    {test.TestName}\r\n                                </label>\r\n                            </div>\r\n                        ))}\r\n                        {item.TestNames.filter(test => test.Types === \"Yes\").map((test) => (\r\n                            <div key={test.id} className='displayuseraccess_child'>\r\n                                <label htmlFor={test.id} style={{ fontSize: '16px', fontWeight: 'bold' }} className=\"par_acc_lab\">\r\n                                    {test.TestName}\r\n                                </label>\r\n                                {test.Sub_test_data && test.Sub_test_data.map((subTest) => (\r\n                                    <div key={subTest.id} style={{ marginLeft: '20px', marginTop: '5px' }}>\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            id={subTest.SubTest_Code}\r\n                                            onChange={() => handleCheckboxChange(subTest.id, subTest.SubTest_Code, subTest.SubTestName, subTest.Amount, test.id, test.TestName, test.TestCode, item.id, item.RadiologyName,test.Types)}\r\n                                            checked={CheckedTestName.some(checkedItem => checkedItem.SubTest_Code === subTest.SubTest_Code)}\r\n                                            style={{ marginRight: '10px' }}\r\n                                        />\r\n                                        <label htmlFor={subTest.SubTest_Code} style={{ fontSize: '16px', color: '#555' }}>\r\n                                            {subTest.SubTestName}\r\n                                        </label>\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            {transformedFavouriteData1.length > 0 && (\r\n                <>\r\n                    <div className=\"common_center_tag\">\r\n                        <span>Selected TestName</span>\r\n                    </div>\r\n                    <ReactGrid columns={IndivitualColumns} RowData={transformedFavouriteData1} />\r\n                </>\r\n            )}\r\n            {transformedFavouriteData.length > 0 && (\r\n                <>\r\n                    <div className=\"common_center_tag\">\r\n                        <span>Selected SubTest Name</span>\r\n                    </div>\r\n                    <ReactGrid columns={FavouritesColumns} RowData={transformedFavouriteData} />\r\n                </>\r\n            )}\r\n            <div className=\"Main_container_Btn\">\r\n                <button onClick={handleSubmitRadiologyTest}>\r\n\r\n                    save\r\n                </button>\r\n            </div>\r\n            <ToastAlert Message={toast.message} Type={toast.type} />\r\n        </>\r\n\r\n    );\r\n\r\n};\r\n\r\nexport default RadiologyTest;\r\n\r\n"],"names":["RadiologyTest","IsTestNameGet","setIsTestNameGet","useState","TestNames","setTestNames","UrlLink","useSelector","state","_state$userRecord","userRecord","_state$userRecord2","UserData","toast","_state$userRecord3","DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","dispatchvalue","useDispatch","useEffect","axios","get","concat","then","res","ress","data","console","log","catch","err","CheckedTestName","setCheckedTestName","SubtestNo","setSubtestNo","IndivitualColumns","key","name","frozen","renderCell","params","_jsx","Button","className","onClick","row","newSubtestNoState","filter","item","testid","Radiologyid","handleRemoveTestName","children","FaTrash","FavouritesColumns","newCheckedState","TestCode","SubTest_Code","handleRemoveTestName1","transformedFavouriteData","map","sutestyes","ind","RadiologyName","TestName","Subtestid","Amount","SubTestName","id","transformFavouriteData1","transformedFavouriteData1","sutestno","transformFavouriteData","setRadiologyTest","RadiologyTestId","CheckedTestNameArr","SubtestNoArr","IsRadilogyGet","setIsRadilogyGet","RadiologyGetNames","setRadiologyGetNames","Register_Id","RegistrationId","_jsxs","_Fragment","htmlFor","style","fontSize","fontWeight","test","Types","marginLeft","marginTop","type","onChange","handleCheckboxSubtestNo","Curr_Amount","SubTestType","some","checked","checkedItem","marginRight","Sub_test_data","subTest","handleCheckboxChange","color","length","ReactGrid","columns","RowData","handleSubmitRadiologyTest","created_by","username","post","resData","Object","keys","message","values","value","prev","ToastAlert","Message","Type"],"sourceRoot":""}