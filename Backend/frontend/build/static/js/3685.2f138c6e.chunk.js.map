{"version":3,"file":"static/js/3685.2f138c6e.chunk.js","mappings":"qNAQA,MAsSA,EAtS2BA,KACvB,MAAOC,EAAqBC,IAA0BC,EAAAA,EAAAA,UAAS,MACzDC,GAA+BC,EAAAA,EAAAA,KAAYC,IAAK,IAAAC,EAAA,OAAqB,QAArBA,EAAID,EAAME,mBAAW,IAAAD,OAAA,EAAjBA,EAAmBH,4BAA4B,IACnGK,GAAQJ,EAAAA,EAAAA,KAAYC,IAAK,IAAAI,EAAA,OAAoB,QAApBA,EAAIJ,EAAMK,kBAAU,IAAAD,OAAA,EAAhBA,EAAkBD,KAAK,IACpDG,GAAWP,EAAAA,EAAAA,KAAaC,IAAK,IAAAO,EAAA,OAAqB,QAArBA,EAAKP,EAAMK,kBAAU,IAAAE,OAAA,EAAhBA,EAAkBD,QAAQ,IAC5DE,GAAUT,EAAAA,EAAAA,KAAYC,IAAK,IAAAS,EAAA,OAAoB,QAApBA,EAAIT,EAAMK,kBAAU,IAAAI,OAAA,EAAhBA,EAAkBD,OAAO,IACxDE,GAAmBX,EAAAA,EAAAA,KAAYC,IAAK,IAAAW,EAAA,OAAqB,QAArBA,EAAIX,EAAME,mBAAW,IAAAS,OAAA,EAAjBA,EAAmBD,gBAAgB,IAC3EE,GAAqBb,EAAAA,EAAAA,KAAYC,IAAK,IAAAa,EAAA,OAAqB,QAArBA,EAAIb,EAAME,mBAAW,IAAAW,OAAA,EAAjBA,EAAmBD,kBAAkB,KAC9EE,EAASC,IAAclB,EAAAA,EAAAA,WAAS,IAEhCmB,EAAkBC,IAAuBpB,EAAAA,EAAAA,UAAS,CACrDqB,WAAY,KACZC,aAAc,GACdC,QAAS,KACTC,UAAW,GACXC,QAAS,KACTC,UAAW,GACXC,OAAQ,KACRC,SAAU,GACVC,OAAQ,KACRC,SAAU,GACVC,OAAQ,GACRC,MAAO,GACPC,GAAI,KAEFC,GAAgBC,EAAAA,EAAAA,OAatBC,EAAAA,EAAAA,YAAU,KACyC,IAA3CC,OAAOC,KAAKvB,GAAoBwB,QAEhCnB,EAAoB,CAChBC,WAAYN,EAAmBM,WAC/BC,aAAcP,EAAmBO,aACjCC,QAASR,EAAmBQ,QAC5BC,UAAWT,EAAmBS,UAC9BC,QAASV,EAAmBU,QAC5BC,UAAWX,EAAmBW,UAC9BC,OAAQZ,EAAmBY,OAC3BC,SAAUb,EAAmBa,SAC7BC,OAAQd,EAAmBc,OAC3BC,SAAUf,EAAmBe,SAC7BC,OAAQhB,EAAmBgB,OAC3BC,MAAOjB,EAAmBiB,MAC1BC,GAAIlB,EAAmBkB,IAG/B,GAED,CAAClB,KAEJqB,EAAAA,EAAAA,YAAU,KAENI,EAAAA,EAAMC,IAAI,GAADC,OAAI/B,EAAO,0EAAA+B,OAAqG,OAA5BzC,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8B0C,iBACtHC,MAAMC,IACH,MAAMC,EAAOD,EAAIE,KACjBhD,EAAuB+C,EAAK,IAG/BE,OAAOC,IACJlD,EAAuB,MACvBmD,QAAQC,IAAIF,EAAI,GAClB,GACP,CAACtC,EAASV,EAA8BgB,IA+J3C,OACImC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,gCAA+BD,SAAA,EAC1CE,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,OAAKD,UAAU,sBAAqBD,SAAC,0BAErCE,EAAAA,EAAAA,KAAA,UAEuB,OAAnB1D,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqB2D,YAAuD,KAAvB,OAAnB3D,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqB2D,UAAUlB,UAE7Da,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EAEIE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,sBAAqBD,SAAC,qBACrCE,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAACE,EAAAA,EAAS,CAACC,QAhIX,CACpB,CACIC,IAAK,WACLC,KAAM,WACNC,QAAQ,GAEZ,CACIF,IAAK,SACLC,KAAM,SACNC,QAAQ,GAGZ,CACIF,IAAK,gBACLC,KAAM,WAEV,CACID,IAAK,iBACLC,KAAM,YAEV,CACID,IAAK,eACLC,KAAM,iBAEV,CACID,IAAK,YACLC,KAAM,cAEV,CACID,IAAK,YACLC,KAAM,cAGV,CACID,IAAK,WACLC,KAAM,aAEV,CACID,IAAK,WACLC,KAAM,aAEV,CACID,IAAK,SACLC,KAAM,WAEV,CACID,IAAK,QACLC,KAAM,UAEV,CACID,IAAK,SACLC,KAAM,YA6E+CE,QAA4B,OAAnBjE,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqB2D,gBAK/ED,EAAAA,EAAAA,KAAA,OAAKD,UAAU,sBAAqBD,SAAC,oBACrCE,EAAAA,EAAAA,KAAA,UAEuB,OAAnB1D,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBkE,oBACrBR,EAAAA,EAAAA,KAACE,EAAAA,EAAS,CAACC,QApLJ,CACnB,CACIC,IAAK,WACLC,KAAM,WACNC,QAAQ,GAGZ,CACIF,IAAK,eACLC,KAAM,iBAEV,CACID,IAAK,YACLC,KAAM,cAEV,CACID,IAAK,YACLC,KAAM,cAGV,CACID,IAAK,WACLC,KAAM,aAEV,CACID,IAAK,WACLC,KAAM,aAEV,CACID,IAAK,SACLC,KAAM,WAEV,CACID,IAAK,QACLC,KAAM,UAEV,CACID,IAAK,SACLC,KAAM,YA8IsCE,QAA4B,OAAnBjE,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBkE,oBAEtER,EAAAA,EAAAA,KAAA,OAAKD,UAAU,sBAAqBD,SAAC,mBACrCE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,sBAAqBD,UAChCE,EAAAA,EAAAA,KAACS,EAAAA,IAAY,CAACV,UAAU,yBAAyBW,QAASA,KAAQhC,EAAc,CAAEiC,KAAM,mBAAoBC,MAAO,CAAED,KAAM,KAAME,KAAK,IAAS,OAEnJb,EAAAA,EAAAA,KAAA,OAAKD,UAAU,iBAAgBD,SAEvB,CAAC,eAAgB,YAAa,YAAa,WAAY,WAAY,SAAU,SAASgB,KAAI,CAACC,EAAOC,KAC9FpB,SAAAA,EAAAA,MAAA,OAAKG,UAAU,cAAaD,SAAA,EACxBF,EAAAA,EAAAA,MAAA,SAAOqB,QAAO,GAAA/B,OAAK6B,EAAK,KAAA7B,OAAI8B,GAAOlB,SAAA,EA/O1CoB,EAgPwBH,EA9OrC,QAAQI,KAAKD,IAAU,QAAQC,KAAKD,KAAW,KAAKC,KAAKD,GAClDA,EACFE,QAAQ,kBAAmB,SAC3BA,QAAQ,MAAOC,GAAQA,EAAIC,gBAEzBJ,IA0OiBlB,EAAAA,EAAAA,KAAA,QAAAF,SAAM,UAEVE,EAAAA,EAAAA,KAAA,SACIW,KAAK,OACLC,MAAOjD,EAAiBoD,GACxBQ,UAAQ,MARkBP,GA9OrCE,KAyPA,OAGTlB,EAAAA,EAAAA,KAAA,OAAKD,UAAU,qBAAoBD,UAC/BE,EAAAA,EAAAA,KAAA,UAAQU,QAzGHc,KACjB,GAAoB,OAAhB7D,QAAgB,IAAhBA,GAAAA,EAAkBc,GAAI,CACtB,MAAMgD,EAASC,OAAOC,OAAO,oCAC7B,GAAIF,EAAQ,CAGR,MAAMG,EAAa,CACfzC,eAA4C,OAA5B1C,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8B0C,eAC9Cd,OAAwB,OAAhBV,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBc,GAC1BoD,UAAmB,OAAR5E,QAAQ,IAARA,OAAQ,EAARA,EAAU6E,SACrBC,OAAQN,GAGZzC,EAAAA,EAAMgD,KAAK,GAAD9C,OAAI/B,EAAO,4CAA4CyE,GAC5DxC,MAAKC,IACFK,QAAQC,IAAIN,EAAIE,MAChB,MAAM0C,EAAS5C,EAAIE,KACnB,IAAI2C,EAAOrD,OAAOC,KAAKmD,GAAQ,GAE/B,MAAME,EAAQ,CACVC,QAFOvD,OAAOwD,OAAOJ,GAAQ,GAG7BtB,KAAMuB,GAEVxE,GAAW4E,IAASA,IACpB5D,EAAc,CAAEiC,KAAM,QAASC,MAAOuB,IACtCvE,EAAoB,CAChBC,WAAY,KACZC,aAAc,GACdC,QAAS,KACTC,UAAW,GACXC,QAAS,KACTC,UAAW,GACXC,OAAQ,KACRC,SAAU,GACVC,OAAQ,KACRC,SAAU,GACVC,OAAQ,GACRC,MAAO,GACPH,OAAQ,KAEZK,EAAc,CAAEiC,KAAM,qBAAsBC,MAAO,CAAC,GAAI,IAG3DpB,OAAMC,IACHC,QAAQC,IAAIF,EAAI,GAE5B,CACJ,KAAO,CAKHf,EAAc,CAAEiC,KAAM,QAASC,MAJjB,CACVwB,QAAS,iCACTzB,KAAM,SAId,GAmD0Cb,SAAC,6BAMnCzC,EAAiBwD,MACjBb,EAAAA,EAAAA,KAACuC,EAAAA,EAAiB,KAEtBvC,EAAAA,EAAAA,KAACwC,EAAAA,EAAU,CAACC,QAAS3F,EAAMsF,QAASM,KAAM5F,EAAM6D,SAEjD,C","sources":["IP_Workbench/Nurse/BedTransferRequest.jsx"],"sourcesContent":["import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ReactGrid from '../../OtherComponent/ReactGrid/ReactGrid';\r\nimport RoomDetialsSelect from '../../FrontOffice/Registration/RoomDetialsSelect';\r\nimport { IoBedOutline } from \"react-icons/io5\";\r\nimport ToastAlert from '../../OtherComponent/ToastContainer/ToastAlert';\r\n\r\nconst BedTransferRequest = () => {\r\n    const [CurrentPreviousRoom, setCurrentPreviousRoom] = useState(null)\r\n    const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n    const toast = useSelector(state => state.userRecord?.toast);\r\n    const UserData = useSelector((state) => state.userRecord?.UserData);\r\n    const UrlLink = useSelector(state => state.userRecord?.UrlLink);\r\n    const RegisterRoomShow = useSelector(state => state.Frontoffice?.RegisterRoomShow);\r\n    const SelectRoomRegister = useSelector(state => state.Frontoffice?.SelectRoomRegister);\r\n    const [getdata, setgetdata] = useState(false)\r\n\r\n    const [RoomdeditalsShow, setRoomdeditalsShow] = useState({\r\n        BuildingId: null,\r\n        BuildingName: \"\",\r\n        BlockId: null,\r\n        BlockName: \"\",\r\n        FloorId: null,\r\n        FloorName: \"\",\r\n        WardId: null,\r\n        WardName: \"\",\r\n        RoomId: null,\r\n        RoomName: \"\",\r\n        RoomNo: \"\",\r\n        BedNo: \"\",\r\n        id: \"\",\r\n    })\r\n    const dispatchvalue = useDispatch();\r\n    const formatLabel = (label) => {\r\n\r\n        if (/[a-z]/.test(label) && /[A-Z]/.test(label) && !/\\d/.test(label)) {\r\n            return label\r\n                .replace(/([a-z])([A-Z])/g, \"$1 $2\")\r\n                .replace(/^./, (str) => str.toUpperCase());\r\n        } else {\r\n            return label;\r\n        }\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        if (Object.keys(SelectRoomRegister).length !== 0) {\r\n\r\n            setRoomdeditalsShow({\r\n                BuildingId: SelectRoomRegister.BuildingId,\r\n                BuildingName: SelectRoomRegister.BuildingName,\r\n                BlockId: SelectRoomRegister.BlockId,\r\n                BlockName: SelectRoomRegister.BlockName,\r\n                FloorId: SelectRoomRegister.FloorId,\r\n                FloorName: SelectRoomRegister.FloorName,\r\n                WardId: SelectRoomRegister.WardId,\r\n                WardName: SelectRoomRegister.WardName,\r\n                RoomId: SelectRoomRegister.RoomId,\r\n                RoomName: SelectRoomRegister.RoomName,\r\n                RoomNo: SelectRoomRegister.RoomNo,\r\n                BedNo: SelectRoomRegister.BedNo,\r\n                id: SelectRoomRegister.id,\r\n            })\r\n\r\n        }\r\n\r\n    }, [SelectRoomRegister])\r\n\r\n    useEffect(() => {\r\n\r\n        axios.get(`${UrlLink}Frontoffice/get_ip_roomdetials_for_bedtransfer_details?RegistrationId=${IP_DoctorWorkbenchNavigation?.RegistrationId}`,)\r\n            .then((res) => {\r\n                const ress = res.data;\r\n                setCurrentPreviousRoom(ress);\r\n\r\n            })\r\n            .catch((err) => {\r\n                setCurrentPreviousRoom(null);\r\n                console.log(err);\r\n            });\r\n    }, [UrlLink, IP_DoctorWorkbenchNavigation, getdata]);\r\n\r\n    const RegisterColumn = [\r\n        {\r\n            key: \"DateTime\",\r\n            name: \"DateTime\",\r\n            frozen: true\r\n        },\r\n\r\n        {\r\n            key: \"BuildingName\",\r\n            name: \"Building Name\",\r\n        },\r\n        {\r\n            key: \"BlockName\",\r\n            name: \"Block Name\",\r\n        },\r\n        {\r\n            key: \"FloorName\",\r\n            name: \"Floor Name\",\r\n        },\r\n\r\n        {\r\n            key: \"WardName\",\r\n            name: \"Ward Name\",\r\n        },\r\n        {\r\n            key: \"RoomName\",\r\n            name: \"Room Name\",\r\n        },\r\n        {\r\n            key: \"RoomNo\",\r\n            name: \"Room No\",\r\n        },\r\n        {\r\n            key: \"BedNo\",\r\n            name: \"Bed No\",\r\n        },\r\n        {\r\n            key: \"RoomId\",\r\n            name: \"Room Id\",\r\n        },\r\n\r\n\r\n    ]\r\n    const RegisterColumn1 = [\r\n        {\r\n            key: \"DateTime\",\r\n            name: \"DateTime\",\r\n            frozen: true\r\n        },\r\n        {\r\n            key: \"Status\",\r\n            name: \"Status\",\r\n            frozen: true\r\n        },\r\n\r\n        {\r\n            key: \"Admitted_Date\",\r\n            name: \"In Time\",\r\n        },\r\n        {\r\n            key: \"Discharge_Date\",\r\n            name: \"Out Time\",\r\n        },\r\n        {\r\n            key: \"BuildingName\",\r\n            name: \"Building Name\",\r\n        },\r\n        {\r\n            key: \"BlockName\",\r\n            name: \"Block Name\",\r\n        },\r\n        {\r\n            key: \"FloorName\",\r\n            name: \"Floor Name\",\r\n        },\r\n\r\n        {\r\n            key: \"WardName\",\r\n            name: \"Ward Name\",\r\n        },\r\n        {\r\n            key: \"RoomName\",\r\n            name: \"Room Name\",\r\n        },\r\n        {\r\n            key: \"RoomNo\",\r\n            name: \"Room No\",\r\n        },\r\n        {\r\n            key: \"BedNo\",\r\n            name: \"Bed No\",\r\n        },\r\n        {\r\n            key: \"RoomId\",\r\n            name: \"Room Id\",\r\n        },\r\n\r\n\r\n    ]\r\n    const handlesubmit = () => {\r\n        if (RoomdeditalsShow?.id) {\r\n            const reason = window.prompt('Write an Reason For Bed Transfer')\r\n            if (reason) {\r\n\r\n\r\n                const submitdata = {\r\n                    RegistrationId: IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n                    RoomId: RoomdeditalsShow?.id,\r\n                    createdby: UserData?.username,\r\n                    Reason: reason\r\n                }\r\n\r\n                axios.post(`${UrlLink}Frontoffice/post_ip_bed_transfer_details`, submitdata)\r\n                    .then(res => {\r\n                        console.log(res.data);\r\n                        const resres = res.data;\r\n                        let typp = Object.keys(resres)[0];\r\n                        let mess = Object.values(resres)[0];\r\n                        const tdata = {\r\n                            message: mess,\r\n                            type: typp,\r\n                        };\r\n                        setgetdata(prev => !prev)\r\n                        dispatchvalue({ type: 'toast', value: tdata });\r\n                        setRoomdeditalsShow({\r\n                            BuildingId: null,\r\n                            BuildingName: \"\",\r\n                            BlockId: null,\r\n                            BlockName: \"\",\r\n                            FloorId: null,\r\n                            FloorName: \"\",\r\n                            WardId: null,\r\n                            WardName: \"\",\r\n                            RoomId: null,\r\n                            RoomName: \"\",\r\n                            RoomNo: \"\",\r\n                            BedNo: \"\",\r\n                            RoomId: \"\",\r\n                        })\r\n                        dispatchvalue({ type: 'SelectRoomRegister', value: {} })\r\n\r\n                    })\r\n                    .catch(err => {\r\n                        console.log(err);\r\n                    });\r\n            }\r\n        } else {\r\n            const tdata = {\r\n                message: 'Please select a Room To change',\r\n                type: 'warn',\r\n            };\r\n            dispatchvalue({ type: 'toast', value: tdata });\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='new-patient-registration-form'>\r\n                <br />\r\n                <div className='DivCenter_container'>Bed Transfer Request</div>\r\n\r\n                <br />\r\n                {\r\n                    CurrentPreviousRoom?.Roomsdata && CurrentPreviousRoom?.Roomsdata.length !== 0 &&\r\n                    (\r\n                        <>\r\n\r\n                            <div className='DivCenter_container'> Previous Room </div>\r\n                            <br />\r\n                            <ReactGrid columns={RegisterColumn1} RowData={CurrentPreviousRoom?.Roomsdata} />\r\n\r\n                        </>\r\n                    )\r\n                }\r\n                <div className='DivCenter_container'> current Room </div>\r\n                <br />\r\n                {\r\n                    CurrentPreviousRoom?.ip_register_data &&\r\n                    <ReactGrid columns={RegisterColumn} RowData={CurrentPreviousRoom?.ip_register_data} />\r\n                }\r\n                <div className='DivCenter_container'>Change Room  </div>\r\n                <div className='DivCenter_container' >\r\n                    <IoBedOutline className='HotelIcon_registration' onClick={() => { dispatchvalue({ type: 'RegisterRoomShow', value: { type: 'IP', val: true } }) }} />\r\n                </div>\r\n                <div className=\"RegisFormcon_1\" >\r\n                    {\r\n                        ['BuildingName', 'BlockName', 'FloorName', 'WardName', 'RoomName', 'RoomNo', 'BedNo'].map((field, indx) => (\r\n                            <div className=\"RegisForm_1\" key={indx}>\r\n                                <label htmlFor={`${field}_${indx}`}>\r\n                                    {formatLabel(field)}\r\n                                    <span>:</span>\r\n                                </label>\r\n                                <input\r\n                                    type='text'\r\n                                    value={RoomdeditalsShow[field]}\r\n                                    disabled\r\n                                />\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n                <div className=\"Main_container_Btn\">\r\n                    <button onClick={handlesubmit}>\r\n                        Request to Transfer\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {\r\n                RegisterRoomShow.val &&\r\n                <RoomDetialsSelect />\r\n            }\r\n            <ToastAlert Message={toast.message} Type={toast.type} />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BedTransferRequest;"],"names":["BedTransferRequest","CurrentPreviousRoom","setCurrentPreviousRoom","useState","IP_DoctorWorkbenchNavigation","useSelector","state","_state$Frontoffice","Frontoffice","toast","_state$userRecord","userRecord","UserData","_state$userRecord2","UrlLink","_state$userRecord3","RegisterRoomShow","_state$Frontoffice2","SelectRoomRegister","_state$Frontoffice3","getdata","setgetdata","RoomdeditalsShow","setRoomdeditalsShow","BuildingId","BuildingName","BlockId","BlockName","FloorId","FloorName","WardId","WardName","RoomId","RoomName","RoomNo","BedNo","id","dispatchvalue","useDispatch","useEffect","Object","keys","length","axios","get","concat","RegistrationId","then","res","ress","data","catch","err","console","log","_jsxs","_Fragment","children","className","_jsx","Roomsdata","ReactGrid","columns","key","name","frozen","RowData","ip_register_data","IoBedOutline","onClick","type","value","val","map","field","indx","htmlFor","label","test","replace","str","toUpperCase","disabled","handlesubmit","reason","window","prompt","submitdata","createdby","username","Reason","post","resres","typp","tdata","message","values","prev","RoomDetialsSelect","ToastAlert","Message","Type"],"sourceRoot":""}