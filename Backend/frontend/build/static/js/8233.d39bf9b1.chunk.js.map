{"version":3,"file":"static/js/8233.d39bf9b1.chunk.js","mappings":"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","sources":["IP_Workbench/Nurse/IpDrugAdminister.jsx","../node_modules/@mui/icons-material/CheckCircle.js","../node_modules/@mui/icons-material/StopCircle.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport ReactGrid from '../../OtherComponent/ReactGrid/ReactGrid';\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { format } from \"date-fns\";\r\nimport axios from \"axios\";\r\nimport Button from \"@mui/material/Button\";\r\nimport BlockIcon from \"@mui/icons-material/Block\";\r\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\";\r\nimport StopCircleIcon from \"@mui/icons-material/StopCircle\";\r\nimport CancelIcon from \"@mui/icons-material/Cancel\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\n\r\n\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\nfunction CancelDrugDialog({ open, onClose, onConfirm, cancelsenddata, setcancelsenddata }) {\r\n\r\nconsole.log(open,'ppiup');\r\n\r\n  const handleConfirm = () => {\r\n    // Call the onConfirm callback with the cancellation reason\r\n    onConfirm(cancelsenddata);\r\n    // Close the dialog\r\n    onClose();\r\n\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setcancelsenddata(null)\r\n    onClose();\r\n  }\r\n\r\n  return (\r\n    <Dialog open={open} onClose={onClose}>\r\n      <DialogTitle>Drug Stop Reason</DialogTitle>\r\n      <DialogContent>\r\n        <TextField\r\n          label=\"Drug Stop Reason\"\r\n          multiline\r\n          rows={4}\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          value={cancelsenddata?.Reason}\r\n          onChange={(e) => setcancelsenddata((prev)=>({\r\n            ...prev,\r\n            Reason:e.target.value\r\n          }))}\r\n        />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose} color=\"primary\">\r\n          Close\r\n        </Button>\r\n        <Button onClick={handleConfirm} color=\"primary\">\r\n          Save\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\n\r\n\r\nconst theme = createTheme({\r\n  components: {\r\n    MuiDataGrid: {\r\n      styleOverrides: {\r\n        columnHeader: {\r\n          backgroundColor: \"var(--ProjectColor)\",\r\n          textAlign: \"Center\",\r\n        },\r\n        root: {\r\n          \"& .MuiDataGrid-root .MuiDataGrid-columnHeader, .MuiDataGrid-columnHeaderTitleContainer\":\r\n            {\r\n              textAlign: \"center\",\r\n              display: \"flex !important\",\r\n              justifyContent: \"center !important\",\r\n            },\r\n          \"& .MuiDataGrid-window\": {\r\n            overflow: \"hidden !important\",\r\n          },\r\n        },\r\n        cell: {\r\n          borderTop: \"0px !important\",\r\n          borderBottom: \"1px solid  var(--ProjectColor) !important\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n});\r\nconst IpDrugAdminister = () => {\r\n  const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n  console.log(\"userRecord\", userRecord);\r\n  const UrlLink = useSelector((state) => state.userRecord?.UrlLink);\r\n  const blockInvalidChar = (e) =>[\"e\", \"E\", \"+\", \"-\"].includes(e.key) && e.preventDefault();\r\n  const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n\r\n\r\n\r\n  const [Remarks, setRemarks] = useState(\"\");\r\n\r\n  const [getdataa, setgetdataa] = useState(false);\r\n  const [postdata, setpostdata] = useState([]);\r\n  const [postdataSOS, setpostdataSOS] = useState(null);\r\n  const [TabletShow, setTabletShow] = useState(null);\r\n  const [TabletShowSOS, setTabletShowSOS] = useState(null);\r\nconst [cancelsenddata,setcancelsenddata]=useState(null)\r\nconst [OpenDialog,setOpenDialog]=useState(false)\r\n  const [page, setPage] = useState(0);\r\n  const pageSize = 10;\r\n  const showdown = TabletShow?.medicinedata.length || 0;\r\n  const totalPages = Math.ceil(TabletShow?.medicinedata.length / 10);\r\n  const [page1, setPage1] = useState(0);\r\n  console.log('OpenDialog',OpenDialog, typeof(OpenDialog))\r\n\r\n  const showdown1 = TabletShowSOS?.length || 0;\r\n  const totalPages1 = Math.ceil(TabletShowSOS?.length / 10);\r\n  const handlePageChange = (params) => {\r\n    setPage(params.page);\r\n  };\r\n  const handlePageChange1 = (params) => {\r\n    setPage1(params.page);\r\n  };\r\n  const formatRailwayTime = (timeString) => {\r\n    // Split the time string into hours and minutes\r\n    const [hours, minutes] = timeString.split(\":\");\r\n\r\n    // Convert hours and minutes to numbers\r\n    const hoursNum = parseInt(hours, 10);\r\n    const minutesNum = parseInt(minutes, 10);\r\n\r\n    // Convert to railway time (24-hour format)\r\n    let formattedHours = hoursNum;\r\n    let formattedMinutes = minutesNum;\r\n\r\n    // Adjust hours and minutes if needed\r\n    if (formattedHours < 10) {\r\n      formattedHours = `0${formattedHours}`; // Add leading zero for single-digit hours\r\n    }\r\n\r\n    if (formattedMinutes < 10) {\r\n      formattedMinutes = `0${formattedMinutes}`; // Add leading zero for single-digit minutes\r\n    }\r\n\r\n    // Return formatted time string\r\n    return `${formattedHours}:${formattedMinutes}`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (IP_DoctorWorkbenchNavigation?.RegistrationId && UrlLink) {\r\n      const dateecurrent = format(new Date(), \"yyyy-MM-dd\");\r\n      axios\r\n        .get(\r\n          `${UrlLink}DrugAdminstrations/get_Drug_Administration_datas?Booking_Id=${IP_DoctorWorkbenchNavigation?.RegistrationId}&Date=${dateecurrent}`\r\n        )\r\n        .then((response) => {\r\n          const data = response.data.Regular;\r\n\r\n          console.log(\"data\", data);\r\n          // Function to convert time to AM/PM format\r\n          // Function to convert time to AM/PM format\r\n          const convertToAMPM = (time) => {\r\n            const numTime = parseInt(time);\r\n            return numTime >= 1 && numTime <= 11\r\n              ? numTime + \" AM\"\r\n              : numTime === 12\r\n              ? \"12 PM\"\r\n              : numTime === 0?\r\n              '12 AM': numTime - 12 + \" PM\";\r\n          };\r\n\r\n          // Extract unique times from FrequencyTime arrays and convert them to AM/PM format\r\n          const freqdata = [\r\n            ...new Set(\r\n              data?.flatMap((p) =>\r\n                p.FrequencyIssued?.flatMap((r) => r.FrequencyIssued)\r\n              )\r\n            ),\r\n          ]\r\n            .map((time) => convertToAMPM(time))\r\n            .sort((a, b) => {\r\n              // Extract AM/PM and numerical value from time string\r\n              const [aNum, aPeriod] = a.split(\" \");\r\n              const [bNum, bPeriod] = b.split(\" \");\r\n\r\n              // Compare periods (AM comes before PM)\r\n              if (aPeriod !== bPeriod) {\r\n                return aPeriod.localeCompare(bPeriod);\r\n              }\r\n\r\n              // If periods are the same, sort numerically\r\n              return parseInt(aNum) - parseInt(bNum);\r\n            });\r\n\r\n          console.log(\"freqdata\", freqdata);\r\n          setTabletShowSOS(\r\n            response.data.SOS?.map((p, indx) => ({ ...p, id: indx + 1 }))\r\n          );\r\n          console.log(response.data.SOS, \"freqqq\");\r\n          setTabletShow({\r\n            frequencyTime: freqdata,\r\n            medicinedata: data.map((p, indx) => ({ ...p, id: indx + 1 })),\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }, [\r\n    IP_DoctorWorkbenchNavigation,\r\n    IP_DoctorWorkbenchNavigation?.Booking_Id,\r\n    UrlLink,\r\n    getdataa,\r\n  ]);\r\n\r\n  console.log(\"TabletShowSOS\", TabletShowSOS);\r\n\r\n  const handleInputChange = (e, sss, ddd) => {\r\n    const tarval = e.target.checked;\r\n    const ttt =\r\n      ddd.split(\" \")[1] === \"PM\" ? +ddd.split(\" \")[0] + 12 : +ddd.split(\" \")[0];\r\n    const newrow = {\r\n      ...sss,\r\n      FrequencyIssued: ttt,\r\n    };\r\n\r\n    if (tarval) {\r\n      setpostdata((prev) => [...prev, newrow]);\r\n    } else {\r\n      const existdata = postdata.filter((p) => {\r\n        // Check if any key-value pair in p matches the corresponding key-value pair in newrow\r\n        return Object.entries(newrow).some(([key, value]) => p[key] !== value);\r\n      });\r\n\r\n      setpostdata(existdata);\r\n    }\r\n    setpostdataSOS(null);\r\n    console.log(\"newrow\", newrow);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (postdata.length > 0 || postdataSOS) {\r\n      const formattedTime = format(new Date(), \"HH:mm:ss\");\r\n      const formattednewdate = format(new Date(), \"yyyy-MM-dd\");\r\n      let postrewss;\r\n      if (postdata.length > 0) {\r\n        postrewss = postdata.map((p) => ({\r\n          ...p,\r\n          FrequencyIssued: p.FrequencyIssued,\r\n          Remarks: Remarks,\r\n          Completed_Date: formattednewdate,\r\n          Completed_Time: formattedTime,\r\n          Quantity: 1,\r\n          Capturedby: userRecord?.username,\r\n          Location: userRecord?.location,\r\n          Booking_Id: IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n        }));\r\n      } else {\r\n        postrewss = [postdataSOS];\r\n      }\r\n\r\n      console.log(\"postrewss\", postrewss);\r\n\r\n      axios\r\n        .post(\r\n          `${UrlLink}DrugAdminstrations/insert_Drug_Administration_nurse_frequencywise_datas`,\r\n          postrewss\r\n        )\r\n        .then((response) => {\r\n          console.log(response);\r\n          setTabletShow(null);\r\n          setgetdataa(!getdataa);\r\n          setRemarks(\"\");\r\n          setpostdataSOS(null);\r\n          setpostdata([]);\r\n          const checkboxes = document.querySelectorAll(\".myCheckbox_Frequency\");\r\n\r\n          checkboxes.forEach((checkbox) => {\r\n            checkbox.checked = false;\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleissusesos = (prams) => {\r\n    console.log(prams);\r\n    const now = new Date();\r\n    const formattedTime = format(now, \"HH:mm:ss\");\r\n    const newdate = format(new Date(), \"yyyy-MM-dd\");\r\n    setpostdataSOS({\r\n      ...prams,\r\n      Completed_Time: formattedTime,\r\n      Completed_Date: newdate,\r\n      Quantity: 1,\r\n      Remarks: \"\",\r\n      Capturedby: userRecord?.username,\r\n      Location: userRecord?.location,\r\n      Booking_Id: IP_DoctorWorkbenchNavigation?.Booking_Id,\r\n    });\r\n    // Select all checkbox inputs with the class name 'myCheckbox_Frequency'\r\n    const checkboxes = document.querySelectorAll(\".myCheckbox_Frequency\");\r\n\r\n    // Iterate over each checkbox and uncheck it\r\n    checkboxes.forEach((checkbox) => {\r\n      checkbox.checked = false;\r\n    });\r\n\r\n    setpostdata([]);\r\n  };\r\n  const formatLabel = (label) => {\r\n    // Check if the label contains both uppercase and lowercase letters, and doesn't contain numbers\r\n    if (/[a-z]/.test(label) && /[A-Z]/.test(label) && !/\\d/.test(label)) {\r\n      return label\r\n        .replace(/([a-z])([A-Z])/g, \"$1 $2\") // Add space between lowercase and uppercase letters\r\n        .replace(/^./, (str) => str.toUpperCase()); // Capitalize first letter\r\n    } else {\r\n      return label;\r\n    }\r\n  };\r\n\r\n  function getTextWidth(text) {\r\n    // Create a dummy element to measure text width\r\n    const dummyElement = document.createElement(\"span\");\r\n    dummyElement.textContent = text;\r\n    dummyElement.style.visibility = \"hidden\";\r\n    dummyElement.style.whiteSpace = \"nowrap\";\r\n    document.body.appendChild(dummyElement);\r\n\r\n    // Get the width of the text\r\n    const width = dummyElement.offsetWidth;\r\n\r\n    // Remove the dummy element\r\n    document.body.removeChild(dummyElement);\r\n\r\n    return width;\r\n  }\r\n  const handleCancelAppointment = () => {\r\n    const requiredfields=[...Object.keys(cancelsenddata)]\r\n    const existing = requiredfields.filter((field)=> !cancelsenddata[field])\r\n\r\n    if(existing.length>0){\r\n      alert(`Please fill the Required Fields for ${existing.join(',')}`)\r\n    }else{\r\n    const confirmation = window.confirm('Are you sure you want to Stop the Drug ?.');\r\n    console.log(confirmation);\r\n\r\n    if (confirmation) {\r\n      axios.post(`${UrlLink}ipregistration/cancel_drug_administration`,cancelsenddata)\r\n      .then((response)=>{\r\n        console.log(response.data);\r\n        setgetdataa(!getdataa);\r\n      })\r\n      .catch((error)=>{\r\n        console.log(error);\r\n      })\r\n      setOpenDialog(false)\r\n      setcancelsenddata(null)\r\n    } else {\r\n      setOpenDialog(false)\r\n      setcancelsenddata(null)\r\n    }\r\n  }\r\n  };\r\n  const handlestopDrug = (params) => {\r\n   \r\n    const senddata={\r\n      Booking_Id:IP_DoctorWorkbenchNavigation?.Booking_Id,\r\n      Prescibtion_Id:params?.Prescibtion_Id,\r\n      Reason:'',\r\n      Stopped_date: format(new Date() , 'yyyy-MM-dd'),\r\n      Stopped_time:format(new Date(), \"HH:mm:ss\"),\r\n      CapturedBy:userRecord?.username\r\n    }\r\n\r\n    setcancelsenddata(senddata)\r\n    setOpenDialog(true);\r\n    console.log('---------',senddata)\r\n  };\r\n  const dynamicColumns = [\r\n    {\r\n      field: \"id\",\r\n      headerName: \"S_No\",\r\n      width: 40,\r\n    },\r\n    ...[\"Date\", \"Department\", \"DoctorName\", \"MedicineName\", \"Instruction\"].map(\r\n      (labelname, index) => {\r\n        const formattedLabel = formatLabel(labelname);\r\n        const labelWidth = getTextWidth(formattedLabel);\r\n\r\n        return {\r\n          field: labelname,\r\n          headerName: formattedLabel,\r\n          width: [\"Instruction\", \"Date\"].find((f) => f === labelname)\r\n            ? labelWidth + 100\r\n            : labelWidth + 30,\r\n          valueGetter: (params) => {\r\n            const value = params.row[labelname];\r\n            return value ? value : \"-\";\r\n          },\r\n        };\r\n      }\r\n    ),\r\n    {\r\n      field: \"Action\",\r\n      headerName: \"Action\",\r\n      width: 100,\r\n      renderCell: (params) => (\r\n        <>\r\n          <Button\r\n            className=\"cell_btn\"\r\n            onClick={() => handleissusesos(params.row)}\r\n          >\r\n            <EditIcon />\r\n          </Button>\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n\r\n//   const dynamicColumns1 = () => {\r\n//     const dataaa = [\r\n//       \"PrescribedDate\",\r\n//       \"CurrentDate\",\r\n//       \"Department\",\r\n//       \"DoctorName\",\r\n//       \"MedicineName\",\r\n//       \"FrequencyType\",\r\n//       \"Instruction\",\r\n//       ...(Array.isArray(TabletShow?.frequencyTime) ? TabletShow.frequencyTime : []),\r\n//     ];\r\n  \r\n//     return [\r\n//       {\r\n//         key: \"id\",\r\n//         name: \"S_No\",\r\n//       },\r\n//       ...dataaa.map((labelname, index) => {\r\n//         const formattedLabel = formatLabel(labelname);\r\n  \r\n//         return {\r\n//           key: labelname,\r\n//           name: formattedLabel,\r\n//           renderCell: (params) => {\r\n//             const staticFields = [\r\n//               \"PrescribedDate\",\r\n//               \"CurrentDate\",\r\n//               \"Department\",\r\n//               \"DoctorName\",\r\n//               \"MedicineName\",\r\n//               \"FrequencyType\",\r\n//               \"Instruction\",\r\n//             ];\r\n  \r\n//             const checkval = !staticFields.includes(labelname.split(\" \")[0]);\r\n  \r\n//             if (checkval) {\r\n//               const newwtime = labelname.split(\" \");\r\n//               let ttt = 0;\r\n  \r\n//               if (newwtime[1] === \"PM\") {\r\n//                 ttt = +newwtime[0] + 12;\r\n//               } else if (+newwtime[0] === 12 && newwtime[1] === \"AM\") {\r\n//                 ttt = 0;\r\n//               } else {\r\n//                 ttt = +newwtime[0];\r\n//               }\r\n  \r\n//               const med = params.row;\r\n  \r\n//               if (Array.isArray(med.FrequencyIssued)) {\r\n//                 // Find the issued frequency matching the current time (ttt)\r\n//                 const frequencyEntry = med.FrequencyIssued.find(\r\n//                   (f) => +f.FrequencyIssued === ttt\r\n//                 );\r\n  \r\n//                 if (frequencyEntry) {\r\n//                   const { Status } = frequencyEntry;\r\n  \r\n//                   switch (Status) {\r\n//                     case \"Pending\":\r\n//                       return (\r\n//                         <input\r\n//                           className=\"myCheckbox_Frequency\"\r\n//                           type=\"checkbox\"\r\n//                           onChange={(e) => handleInputChange(e, med, labelname)}\r\n//                         />\r\n//                       );\r\n//                     case \"Issued\":\r\n//                       return (\r\n//                         <span className=\"check_box_clrr\">\r\n//                           <CheckCircleIcon className=\"check_box_clrr_1\" />\r\n//                         </span>\r\n//                       );\r\n//                     case \"Before\":\r\n//                       return (\r\n//                         <span className=\"check_box_clrr\">\r\n//                           <CheckCircleIcon className=\"check_box_clrr_2\" />\r\n//                         </span>\r\n//                       );\r\n//                     case \"Delay\":\r\n//                       return (\r\n//                         <span className=\"check_box_clrr\">\r\n//                           <CheckCircleIcon className=\"check_box_clrr_3\" />\r\n//                         </span>\r\n//                       );\r\n//                     case \"NotIssued\":\r\n//                       return (\r\n//                         <span className=\"check_box_clrr\">\r\n//                           <StopCircleIcon className=\"check_box_clrr_4\" />\r\n//                         </span>\r\n//                       );\r\n//                     default:\r\n//                       return (\r\n//                         <span className=\"check_box_clrr\">\r\n//                           <BlockIcon className=\"check_box_clrr_5\" />\r\n//                         </span>\r\n//                       );\r\n//                   }\r\n//                 } else {\r\n//                   return \"-\"; // If no matching time slot found in FrequencyIssued\r\n//                 }\r\n//               } else {\r\n//                 return \"-\"; // If FrequencyIssued is not an array or doesn't exist\r\n//               }\r\n//             } else {\r\n//               return params.value; // For static fields, return the value directly\r\n//             }\r\n//           },\r\n//         };\r\n//       }),\r\n//       {\r\n//         key: \"Action\",\r\n//         name: \"Action\",\r\n//         renderCell: (params) => (\r\n//           <Button className=\"cell_btn\" onClick={() => handlestopDrug(params.row)}>\r\n//             <CancelIcon className=\"check_box_clrr_cancell\" />\r\n//           </Button>\r\n//         ),\r\n//       },\r\n//     ];\r\n//   };\r\n  \r\nconst dynamicColumns1 = () => {\r\n    const staticFields = [\r\n      { key: \"S_No\", name: \"S_No\" },\r\n      { key: \"PrescribedDate\", name: \"Prescribed Date\" },\r\n      { key: \"CurrentDate\", name: \"Current Date\" },\r\n      { key: \"Department\", name: \"Department\" },\r\n      { key: \"DoctorName\", name: \"Doctor Name\" },\r\n      { key: \"MedicineName\", name: \"Medicine Name\" },\r\n      { key: \"FrequencyType\", name: \"Frequency Type\" },\r\n      { key: \"Instruction\", name: \"Instruction\" },\r\n    ];\r\n  \r\n    const dynamicFields = (Array.isArray(TabletShow?.frequencyTime) ? TabletShow.frequencyTime : []).map((labelname) => {\r\n      const formattedLabel = formatLabel(labelname);\r\n  \r\n      return {\r\n        key: labelname,\r\n        name: formattedLabel,\r\n        renderCell: (params) => {\r\n          const [time, period] = labelname.split(\" \");\r\n          let ttt = 0;\r\n  \r\n          // Time conversion logic for AM/PM\r\n          if (period === \"PM\" && time !== \"12\") {\r\n            ttt = +time + 12;\r\n          } else if (period === \"AM\" && time === \"12\") {\r\n            ttt = 0;\r\n          } else {\r\n            ttt = +time;\r\n          }\r\n  \r\n          const med = params.row;\r\n  \r\n          if (Array.isArray(med.FrequencyIssued)) {\r\n            const frequencyEntry = med.FrequencyIssued.find(\r\n              (f) => +f.FrequencyIssued === ttt\r\n            );\r\n  \r\n            if (frequencyEntry) {\r\n              const { Status } = frequencyEntry;\r\n              console.log('Status', Status);\r\n  \r\n              // Define a map for status to color\r\n              const statusColorMap = {\r\n                \"Pending\": 'blue',   // Example color for Pending\r\n                \"Issued\": 'green',\r\n                \"Before\": 'orange',\r\n                \"Delay\": 'pink',\r\n                \"NotIssued\": 'red'\r\n              };\r\n  \r\n              return (\r\n                <span>\r\n                  {statusColorMap[Status] ? (\r\n                    <span style={{ color: `${statusColorMap[Status]} !important` }}>\r\n                      {Status === \"Pending\" ? (\r\n                        <input\r\n                          className=\"myCheckbox_Frequency\"\r\n                          type=\"checkbox\"\r\n                          onChange={(e) => handleInputChange(e, med, labelname)}\r\n                        />\r\n                      ) : (\r\n                        <span>\r\n                          {Status === \"Issued\" && <CheckCircleIcon />}\r\n                          {Status === \"Before\" && <CheckCircleIcon />}\r\n                          {Status === \"Delay\" && <CheckCircleIcon />}\r\n                          {Status === \"NotIssued\" && <StopCircleIcon />}\r\n                        </span>\r\n                      )}\r\n                    </span>\r\n                  ) : (\r\n                    <span className=\"check_box_clrr\">\r\n                      <BlockIcon style={{ color: 'grey' }} />\r\n                    </span>\r\n                  )}\r\n                </span>\r\n              );\r\n            } else {\r\n              return \"-\"; // No matching time slot found\r\n            }\r\n          } else {\r\n            return \"-\"; // FrequencyIssued is not an array or doesn't exist\r\n          }\r\n        },\r\n      };\r\n    });\r\n  \r\n    const actionField = {\r\n      key: \"Action\",\r\n      name: \"Action\",\r\n      renderCell: (params) => (\r\n        <Button className=\"cell_btn\" onClick={() => handlestopDrug(params.row)}>\r\n          <CancelIcon className=\"check_box_clrr_cancell\" />\r\n        </Button>\r\n      ),\r\n    };\r\n  \r\n    return [...staticFields, ...dynamicFields, actionField];\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      <ToastContainer />\r\n      {TabletShow && TabletShow?.medicinedata.length !== 0 && (\r\n        <>\r\n          <div className=\"Add_items_Purchase_Master\">\r\n            <span>Regular Medicines</span>\r\n          </div>\r\n          {/* <div class=\"qwertyuio\">\r\n            <div className=\"IP_grid\">\r\n              <ThemeProvider theme={theme}>\r\n                <div className=\"IP_grid_1\">\r\n                  <DataGrid\r\n                    rows={TabletShow?.medicinedata.slice(\r\n                      page * pageSize,\r\n                      (page + 1) * pageSize\r\n                    )} // Display only the current page's data\r\n                    columns={dynamicColumns1()} // Use dynamic columns here\r\n                    pageSize={10}\r\n                    initialState={{\r\n                      pagination: {\r\n                        paginationModel: {\r\n                          pageSize: 10,\r\n                        },\r\n                      },\r\n                    }}\r\n                    pageSizeOptions={[10]}\r\n                    onPageChange={handlePageChange}\r\n                    hideFooterPagination\r\n                    hideFooterSelectedRowCount\r\n                    className=\"Ip_data_grid\"\r\n                  />\r\n                  {showdown > 0 && TabletShow?.medicinedata.length > 10 && (\r\n                    <div className=\"IP_grid_foot\">\r\n                      <button\r\n                        onClick={() =>\r\n                          setPage((prevPage) => Math.max(prevPage - 1, 0))\r\n                        }\r\n                        disabled={page === 0}\r\n                      >\r\n                        Previous\r\n                      </button>\r\n                      Page {page + 1} of {totalPages}\r\n                      <button\r\n                        onClick={() =>\r\n                          setPage((prevPage) =>\r\n                            Math.min(prevPage + 1, totalPages - 1)\r\n                          )\r\n                        }\r\n                        disabled={page === totalPages - 1}\r\n                      >\r\n                        Next\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </ThemeProvider>\r\n              {showdown !== 0 && TabletShow.medicinedata.length !== 0 ? null : (\r\n                <div className=\"IP_norecords\">\r\n                  <span>No Records Found</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            \r\n          </div> */}\r\n\r\n<ReactGrid columns={dynamicColumns1()} RowData={TabletShow?.medicinedata} />\r\n\r\n<div className=\"RegisForm_1\">\r\n              <label>\r\n                Remarks <span>:</span>\r\n              </label>\r\n\r\n              <textarea\r\n                value={Remarks}\r\n                placeholder=\"Maximum 150 words\"\r\n                onChange={(e) => setRemarks(e.target.value)}\r\n              />\r\n            </div>\r\n            <div\r\n              style={{ display: \"grid\", placeItems: \"center\", width: \"100%\" }}\r\n            >\r\n              <button className=\"btn-add\" onClick={handleSubmit}>\r\n                Save\r\n              </button>\r\n            </div>\r\n        </>\r\n      )}\r\n      {TabletShowSOS && TabletShowSOS.length > 0 && (\r\n        <>\r\n          <div className=\"Add_items_Purchase_Master\">\r\n            <span>SOS Medicines</span>\r\n          </div>\r\n          {/* <div class=\"qwertyuio\">\r\n            <div className=\"IP_grid\">\r\n              <ThemeProvider theme={theme}>\r\n                <div className=\"IP_grid_1\">\r\n                  <DataGrid\r\n                    rows={TabletShowSOS.slice(\r\n                      page1 * pageSize,\r\n                      (page1 + 1) * pageSize\r\n                    )} // Display only the current page's data\r\n                    columns={dynamicColumns} // Use dynamic columns here\r\n                    pageSize={10}\r\n                    initialState={{\r\n                      pagination: {\r\n                        paginationModel: {\r\n                          pageSize: 10,\r\n                        },\r\n                      },\r\n                    }}\r\n                    pageSizeOptions={[10]}\r\n                    onPageChange={handlePageChange1}\r\n                    hideFooterPagination\r\n                    hideFooterSelectedRowCount\r\n                    className=\"Ip_data_grid\"\r\n                  />\r\n                  {showdown1 > 0 && TabletShowSOS?.length > 10 && (\r\n                    <div className=\"IP_grid_foot\">\r\n                      <button\r\n                        onClick={() =>\r\n                          setPage1((prevPage) => Math.max(prevPage - 1, 0))\r\n                        }\r\n                        disabled={page1 === 0}\r\n                      >\r\n                        Previous\r\n                      </button>\r\n                      Page {page1 + 1} of {totalPages1}\r\n                      <button\r\n                        onClick={() =>\r\n                          setPage1((prevPage) =>\r\n                            Math.min(prevPage + 1, totalPages1 - 1)\r\n                          )\r\n                        }\r\n                        disabled={page1 === totalPages1 - 1}\r\n                      >\r\n                        Next\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </ThemeProvider>\r\n              \r\n      \r\n              {showdown1 !== 0 && TabletShowSOS.length !== 0 ? null : (\r\n                <div className=\"IP_norecords\">\r\n                  <span>No Records Found</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n            {postdataSOS && (\r\n              <>\r\n                <div className=\"Total_input_container\" style={{ width: \"70%\" }}>\r\n                  <div className=\"inp_container_all_intakeoutput\">\r\n                    <label>\r\n                      Time <span>:</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"time\"\r\n                      value={postdataSOS?.Completed_Time}\r\n                      onChange={(e) =>\r\n                        setpostdataSOS((prev) => ({\r\n                          ...prev,\r\n                          Completed_Time: formatRailwayTime(e.target.value),\r\n                        }))\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"inp_container_all_intakeoutput\">\r\n                    <label>\r\n                      Date <span>:</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"date\"\r\n                      value={postdataSOS?.Completed_Date}\r\n                      onChange={(e) =>\r\n                        setpostdataSOS((prev) => ({\r\n                          ...prev,\r\n                          Completed_Date: e.target.value,\r\n                        }))\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"inp_container_all_intakeoutput\">\r\n                    <label>\r\n                      Quantity <span>:</span>\r\n                    </label>\r\n                    <input\r\n                      type=\"number\"\r\n                      onKeyDown={blockInvalidChar}\r\n                      value={postdataSOS?.Quantity}\r\n                      readOnly\r\n                      onChange={(e) =>\r\n                        setpostdataSOS((prev) => ({\r\n                          ...prev,\r\n                          Quantity: e.target.value,\r\n                        }))\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div className=\"inp_container_all_intakeoutput\">\r\n                    <label>\r\n                      Remarks <span>:</span>\r\n                    </label>\r\n\r\n                    <textarea\r\n                      value={postdataSOS?.Remarks}\r\n                      placeholder=\"Maximum 150 words\"\r\n                      onChange={(e) =>\r\n                        setpostdataSOS((prev) => ({\r\n                          ...prev,\r\n                          Remarks: e.target.value,\r\n                        }))\r\n                      }\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    display: \"grid\",\r\n                    placeItems: \"center\",\r\n                    width: \"100%\",\r\n                  }}\r\n                >\r\n                  <button className=\"btn-add\" onClick={handleSubmit}>\r\n                    Save\r\n                  </button>\r\n                </div>\r\n              </>\r\n            )}\r\n          </div> */}\r\n        </>\r\n      )}\r\n      <CancelDrugDialog\r\n        open={OpenDialog}\r\n        onClose={() => setOpenDialog(false)}\r\n        onConfirm={handleCancelAppointment}\r\n        setcancelsenddata={setcancelsenddata}\r\n        cancelsenddata={cancelsenddata}\r\n      />\r\n      \r\n    </>\r\n\r\n  );\r\n};\r\n\r\nexport default IpDrugAdminister;\r\n\r\n\r\n\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m-2 15-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8z\"\n}), 'CheckCircle');","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2m4 14H8V8h8z\"\n}), 'StopCircle');"],"names":["CancelDrugDialog","_ref","open","onClose","onConfirm","cancelsenddata","setcancelsenddata","console","log","_jsxs","Dialog","children","_jsx","DialogTitle","DialogContent","TextField","label","multiline","rows","variant","fullWidth","value","Reason","onChange","e","prev","target","DialogActions","Button","onClick","handleClose","color","handleConfirm","createTheme","components","MuiDataGrid","styleOverrides","columnHeader","backgroundColor","textAlign","root","display","justifyContent","overflow","cell","borderTop","borderBottom","IpDrugAdminister","userRecord","useSelector","state","_state$userRecord","UserData","UrlLink","_state$userRecord2","IP_DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","Remarks","setRemarks","useState","getdataa","setgetdataa","postdata","setpostdata","postdataSOS","setpostdataSOS","TabletShow","setTabletShow","TabletShowSOS","setTabletShowSOS","OpenDialog","setOpenDialog","page","setPage","page1","setPage1","medicinedata","length","Math","ceil","useEffect","RegistrationId","dateecurrent","format","Date","axios","get","concat","then","response","_response$data$SOS","data","Regular","freqdata","Set","flatMap","p","_p$FrequencyIssued","FrequencyIssued","r","map","time","numTime","parseInt","convertToAMPM","sort","a","b","aNum","aPeriod","split","bNum","bPeriod","localeCompare","SOS","indx","id","frequencyTime","catch","error","Booking_Id","formatLabel","test","replace","str","toUpperCase","labelname","index","formattedLabel","labelWidth","text","dummyElement","document","createElement","textContent","style","visibility","whiteSpace","body","appendChild","width","offsetWidth","removeChild","getTextWidth","field","headerName","find","f","valueGetter","params","row","_Fragment","ToastContainer","className","ReactGrid","columns","key","name","Array","isArray","renderCell","period","ttt","med","frequencyEntry","Status","statusColorMap","type","handleInputChange","sss","ddd","tarval","checked","newrow","existdata","filter","Object","entries","some","_ref2","CheckCircleIcon","StopCircleIcon","BlockIcon","senddata","Prescibtion_Id","Stopped_date","Stopped_time","CapturedBy","username","handlestopDrug","CancelIcon","RowData","placeholder","placeItems","handleSubmit","formattedTime","formattednewdate","postrewss","Completed_Date","Completed_Time","Quantity","Capturedby","Location","location","post","querySelectorAll","forEach","checkbox","handleCancelAppointment","existing","keys","alert","join","confirmation","window","confirm","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d"],"sourceRoot":""}