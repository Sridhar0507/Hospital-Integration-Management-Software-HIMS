{"version":3,"file":"static/js/18.76d530b5.chunk.js","mappings":"uOAWA,MAqyBA,EAryBiCA,KAE/B,MAAMC,GAAUC,EAAAA,EAAAA,KAAaC,IAAK,IAAAC,EAAA,OAAqB,QAArBA,EAAKD,EAAME,kBAAU,IAAAD,OAAA,EAAhBA,EAAkBH,OAAO,IAC1DI,GAAaH,EAAAA,EAAAA,KAAaC,IAAK,IAAAG,EAAA,OAAqB,QAArBA,EAAKH,EAAME,kBAAU,IAAAC,OAAA,EAAhBA,EAAkBC,QAAQ,IAC9DC,GAAQN,EAAAA,EAAAA,KAAaC,IAAK,IAAAM,EAAA,OAAqB,QAArBA,EAAKN,EAAME,kBAAU,IAAAI,OAAA,EAAhBA,EAAkBD,KAAK,IAEtDE,GAA+BR,EAAAA,EAAAA,KAAYC,IAAK,IAAAQ,EAAA,OAAqB,QAArBA,EAAIR,EAAMS,mBAAW,IAAAD,OAAA,EAAjBA,EAAmBD,4BAA4B,IAEzGG,QAAQC,IAAIJ,EAA6B,gCAEzC,MAAMK,GAAWC,EAAAA,EAAAA,OAEVC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,WAC1BC,EAAYC,IAAiBF,EAAAA,EAAAA,UAAS,CAC3CG,WAAY,GACZC,WAAY,GACZC,KAAM,GACNC,aAAc,GACdC,iBAAkB,KAClBC,SAAU,GACVC,aAAc,QACdC,SAAU,MAGLC,EAAYC,IAAiBZ,EAAAA,EAAAA,UAAS,CAC3Ca,WAAY,GACZC,aAAc,GACdC,iBAAiB,KACjBC,SAAU,MAELC,EAASC,IAAkBlB,EAAAA,EAAAA,UAAS,CACzCmB,cAAe,GACfC,eAAgB,GAChBC,QAAS,GACTC,YAAa,KAETC,EAAmBC,GAAK,CAAC,IAAK,IAAK,IAAK,KAAKC,SAASD,EAAEE,MAAQF,EAAEG,kBAIjEC,EAAWC,IAAgB7B,EAAAA,EAAAA,WAAS,IACpC8B,EAAYC,IAAiB/B,EAAAA,EAAAA,WAAS,IACtCgC,EAAmBC,IAAwBjC,EAAAA,EAAAA,UAAS,KACpDkC,EAAmBC,IAAwBnC,EAAAA,EAAAA,UAAS,KACpDoC,EAAoBC,IAAyBrC,EAAAA,EAAAA,UAAS,KAEtDsC,EAAmBC,IAAwBvC,EAAAA,EAAAA,UAAS,IACpDwC,EAAmBC,IAAwBzC,EAAAA,EAAAA,UAAS,GAGrD0C,EAAgB,CACpB,CAAEhB,IAAK,KAAMiB,KAAM,OAAQC,QAAQ,GACnC,CAAElB,IAAK,UAAWiB,KAAM,WAAWC,QAAQ,GAC3C,CAAElB,IAAK,kBAAmBiB,KAAM,YAAaC,QAAQ,GACrD,CAAElB,IAAK,oBAAqBiB,KAAM,cAAeC,QAAQ,GACzD,CAAElB,IAAK,aAAciB,KAAM,eAC3B,CAAEjB,IAAK,aAAciB,KAAM,eAC3B,CAAEjB,IAAK,OAAQiB,KAAM,QACrB,CAAEjB,IAAK,eAAgBiB,KAAM,eAC7B,CAAEjB,IAAK,mBAAoBiB,KAAM,oBACjC,CAAEjB,IAAK,WAAYiB,KAAM,YACzB,CAAEjB,IAAK,UAAWiB,KAAM,WACxB,CAAEjB,IAAK,OAAQiB,KAAM,OAAOC,QAAQ,GACpC,CAAElB,IAAK,OAAQiB,KAAM,OAAOC,QAAQ,GACpC,CACElB,IAAK,OACLiB,KAAM,OACNC,QAAQ,EACRC,WAAaC,IACXC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAASA,IAAMC,EAAWJ,EAAOK,KAAKC,UAChDL,EAAAA,EAAAA,KAACM,EAAAA,EAAc,QAOjBC,EAAgB,CACpB,CAAE5B,IAAK,KAAMiB,KAAM,OAAOC,QAAQ,GAClC,CAAElB,IAAK,UAAWiB,KAAM,WAAWC,QAAQ,GAC3C,CAAElB,IAAK,kBAAmBiB,KAAM,YAAaC,QAAQ,GACrD,CAAElB,IAAK,oBAAqBiB,KAAM,cAAeC,QAAQ,GACzD,CAAElB,IAAK,aAAciB,KAAM,eAC3B,CAAEjB,IAAK,eAAgBiB,KAAM,eAC7B,CAAEjB,IAAK,mBAAoBiB,KAAM,oBACjC,CAAEjB,IAAK,WAAYiB,KAAM,WACzB,CAAEjB,IAAK,OAAQiB,KAAM,OAAOC,QAAQ,GACpC,CAAElB,IAAK,OAAQiB,KAAM,OAAQC,QAAQ,GACrC,CACElB,IAAK,OACLiB,KAAM,OACNC,QAAQ,EACRC,WAAaC,IACXC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAASA,IAAMC,EAAWJ,EAAOK,KAAKC,UAChDL,EAAAA,EAAAA,KAACM,EAAAA,EAAc,QASjBE,EAAiB,CACrB,CAAE7B,IAAK,KAAMiB,KAAM,OAAQC,QAAQ,GACnC,CAAElB,IAAK,UAAWiB,KAAM,WAAWC,QAAQ,GAC3C,CAAElB,IAAK,kBAAmBiB,KAAM,YAAaC,QAAQ,GACrD,CAAElB,IAAK,oBAAqBiB,KAAM,cAAeC,QAAQ,GACzD,CAAElB,IAAK,gBAAiBiB,KAAM,qBAC9B,CAAEjB,IAAK,iBAAkBiB,KAAM,sBAC/B,CAAEjB,IAAK,UAAWiB,KAAM,WACxB,CAAEjB,IAAK,cAAeiB,KAAM,gBAC5B,CAAEjB,IAAK,OAAQiB,KAAM,OAAQC,QAAQ,GACrC,CAAElB,IAAK,OAAQiB,KAAM,OAAQC,QAAQ,GACrC,CACElB,IAAK,OACLiB,KAAM,OACNC,QAAQ,EACRC,WAAaC,IACXC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAASA,IAAMC,EAAWJ,EAAOK,KAAKC,UAChDL,EAAAA,EAAAA,KAACM,EAAAA,EAAc,SAQvBG,EAAAA,EAAAA,YAAU,KACRC,EAAAA,EACGC,IAAI,GAADC,OAAI7E,EAAO,mDAAmD,CAChEgE,OAAQ,CAAEc,eAA4C,OAA5BrE,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8BqE,kBAEzDC,MAAMC,IACL,MAAM,eAAEC,EAAc,eAAEC,EAAc,gBAAEC,GAAoBH,EAAII,KAEhExE,QAAQC,IAAI,kBAAmBoE,GAC/BrE,QAAQC,IAAI,kBAAmBqE,GAC/BtE,QAAQC,IAAI,mBAAoBsE,GAGhChC,EAAqB8B,GAAkB,IACvC5B,EAAqB6B,GAAkB,IACvC3B,EAAsB4B,GAAmB,IACzCE,EAA2BJ,GAAkB,IAC7CK,EAA2BJ,GAAkB,GAAG,IAEjDK,OAAOC,IACN5E,QAAQ6E,MAAMD,EAAI,GAClB,GACH,CAAC1C,EAAW9C,EAAqC,OAA5BS,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8BqE,iBAgCtD,MAAMY,EAAeA,KACnB,MAAMC,EAAQ,IAAIC,KACZC,EAAOF,EAAMG,cACbC,EAAQC,OAAOL,EAAMM,WAAa,GAAGC,SAAS,EAAG,KACjDC,EAAMH,OAAOL,EAAMS,WAAWF,SAAS,EAAG,KAChD,MAAM,GAANrB,OAAUsB,EAAG,KAAAtB,OAAIkB,EAAK,KAAAlB,OAAIgB,EAAKQ,WAAWC,OAAO,GAAE,EAI/CjB,EAA8BD,IAClC,MAAMmB,EAAYb,IACZc,EAAQpB,EACXqB,QAAOC,GAAQA,EAAKd,OAASW,IAC7BI,QAAO,CAACC,EAAKF,IAASE,GAAOC,WAAWH,EAAKlF,eAAiB,IAAI,GACrEiC,EAAqB+C,GACrBpE,GAAe0E,IACb,MAAMC,EAAiBP,EAAQM,EAAKxE,eACpC,MAAO,IACFwE,EACHzE,cAAemE,EACfjE,QAASwE,EACTvE,YAAauE,EAAiB,EAAI,WAAa,WAChD,GACD,EAGEzB,EAA8BF,IAClC,MAAMmB,EAAYb,IACZc,EAAQpB,EACXqB,QAAOC,GAAQA,EAAKd,OAASW,IAC7BI,QAAO,CAACC,EAAKF,IAASE,GAAOC,WAAWH,EAAK1E,eAAiB,IAAI,GACrE2B,EAAqB6C,GACrBpE,GAAe0E,IACb,MAAMC,EAAiBD,EAAKzE,cAAgBmE,EAC5C,MAAO,IACFM,EACHxE,eAAgBkE,EAChBjE,QAASwE,EACTvE,YAAauE,EAAiB,EAAI,WAAa,WAChD,GACD,EAqCE3C,EAAcgB,IAClBhE,EAAc,CACZ4F,mBAAoB5B,EAAK4B,oBAAsB,GAC/CC,4BAA6B7B,EAAK6B,6BAA+B,GACjEC,eAAgB9B,EAAK8B,gBAAkB,GACvCC,cAAe/B,EAAK+B,eAAiB,GACrCC,sBAAuBhC,EAAKgC,uBAAyB,GACrDC,YAAajC,EAAKiC,aAAe,GACjCC,aAAclC,EAAKkC,cAAgB,GACnCjG,WAAY+D,EAAK/D,YAAc,GAC/BC,WAAY8D,EAAK9D,YAAc,GAC/BC,KAAM6D,EAAK7D,MAAQ,GACnBC,aAAc4D,EAAK5D,cAAgB,GACnCC,iBAAkB2D,EAAK3D,kBAAoB,KAC3CC,SAAU0D,EAAK1D,UAAY,GAC3BC,aAAcyD,EAAKzD,cAAgB,QACnCC,SAAUwD,EAAKmC,SAAW,KAG5BzF,EAAc,CACZC,WAAYqD,EAAKrD,YAAc,GAC/BC,aAAcoD,EAAKpD,cAAgB,GACnCC,iBAAkBmD,EAAKnD,kBAAoB,KAC3CC,SAAUkD,EAAKlD,UAAY,KAG7BE,EAAe,CACbC,cAAe+C,EAAK/C,eAAiB,GACrCC,eAAgB8C,EAAK9C,gBAAkB,GACvCC,QAAS6C,EAAK7C,SAAW,GACzBC,YAAa4C,EAAK5C,aAAe,KAGnCS,GAAc,EAAK,EAGfuE,EAAcA,KAClBpG,EAAc,CACZ4F,mBAAoB,GACpBC,4BAA6B,GAC7BC,eAAgB,GAChBC,cAAe,GACfC,sBAAuB,GACvBC,YAAa,GACbC,aAAc,GACdjG,WAAY,GACZC,WAAY,GACZC,KAAM,GACNC,aAAc,GACdC,iBAAkB,KAClBC,SAAU,GACVC,aAAc,QACdC,SAAU,KAGZE,EAAc,CACZC,WAAY,GACZC,aAAc,GACdC,iBAAkB,KAClBC,SAAU,KAGZE,EAAe,CACbC,cAAe,GACfC,eAAgB,GAChBC,QAAS,GACTC,YAAa,KAGfS,GAAc,EAAM,EAIhBwE,EAAqB/E,IACzB,MAAM,KAAEmB,EAAI,MAAE6D,GAAUhF,EAAEiF,OAC1B/G,QAAQC,IAAIgD,EAAM6D,GAEL,WAAT1G,EACFI,GAAe0F,IAAI,IACdA,EACH,CAACjD,GAAO6D,MAEQ,WAAT1G,EACTc,GAAegF,IAAI,IACdA,EACH,CAACjD,GAAO6D,MAGVtF,GAAgB0E,IAAI,IACfA,EACH,CAACjD,GAAO6D,KAEZ,EAmEF,OACAzD,EAAAA,EAAAA,KAAA2D,EAAAA,SAAA,CAAAtD,UACEuD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBxD,SAAA,EAC7BL,EAAAA,EAAAA,KAAA,OAAK8D,MAAO,CAAEC,MAAO,OAAQC,QAAS,OAAQC,WAAY,UAAW5D,UACnEuD,EAAAA,EAAAA,MAACM,EAAAA,EAAiB,CAChBT,MAAO1G,EACPoH,WAAS,EACTC,SArEcC,IACpBrH,EAAQqH,EAAMX,OAAOD,MAAM,EAqErB,aAAW,WAAUpD,SAAA,EAErBL,EAAAA,EAAAA,KAACsE,EAAAA,EAAY,CACXb,MAAM,SACNK,MAAO,CACLS,OAAQ,OACRR,MAAO,QACPS,gBACW,WAATzH,EACI,+BACA,WAER8G,UAAU,yBAAwBxD,SACnC,YAGDL,EAAAA,EAAAA,KAACsE,EAAAA,EAAY,CACXb,MAAM,SACNK,MAAO,CACLU,gBACW,WAATzH,EACI,+BACA,UACNgH,MAAO,QACPQ,OAAQ,QAEVV,UAAU,yBAAwBxD,SACnC,YAGDL,EAAAA,EAAAA,KAACsE,EAAAA,EAAY,CACXb,MAAM,UACNK,MAAO,CACLU,gBACW,YAATzH,EACI,+BACA,UACNgH,MAAO,QACPQ,OAAQ,QAEVV,UAAU,yBAAwBxD,SACnC,iBAOK,WAATtD,GACC6G,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcxD,SAAA,EAC3BuD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaxD,SAAA,EAC1BuD,EAAAA,EAAAA,MAAA,SAAAvD,SAAA,CAAO,gBACOL,EAAAA,EAAAA,KAAA,QAAAK,SAAM,UAEpBuD,EAAAA,EAAAA,MAAA,UACEhE,KAAK,aACL6D,MAAOvG,EAAWE,WAClBgH,SAAUZ,EACViB,SAAU1F,EAAWsB,SAAA,EAGrBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,GAAEpD,SAAC,YACjBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,QAAOpD,SAAC,WACtBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,YAAWpD,SAAC,gBAC1BL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,QAAOpD,SAAC,iBAG1BuD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaxD,SAAA,EAC1BuD,EAAAA,EAAAA,MAAA,SAAAvD,SAAA,CAAO,gBACOL,EAAAA,EAAAA,KAAA,QAAAK,SAAM,UAEpBuD,EAAAA,EAAAA,MAAA,UACEhE,KAAK,aACL6D,MAAOvG,EAAWG,WAClB+G,SAAUZ,EACViB,SAAU1F,EAAWsB,SAAA,EAGrBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,GAAEpD,SAAC,YACjBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,OAAMpD,SAAC,UACrBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,KAAIpD,SAAC,QACnBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,YAAWpD,SAAC,oBAGH,OAA1BnD,EAAWG,aACRuG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaxD,SAAA,EAC1BuD,EAAAA,EAAAA,MAAA,SAAAvD,SAAA,CAAO,SACAL,EAAAA,EAAAA,KAAA,QAAAK,SAAM,UAEbuD,EAAAA,EAAAA,MAAA,UACEhE,KAAK,OACL6D,MAAOvG,EAAWI,KAClB8G,SAAUZ,EACViB,SAAU1F,EAAWsB,SAAA,EAGrBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,GAAEpD,SAAC,YACjBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,mBAAkBpD,SAAC,sBACjCL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,aAAYpD,SAAC,gBAC3BL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,eAAcpD,SAAC,kBAC7BL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,gCAA+BpD,SAAC,mCAG9CL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,cAAapD,SAAC,iBAC5BL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,sBAAqBpD,SAAC,yBACpCL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,gBAAepD,SAAC,mBAC9BL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,+BAA8BpD,SAAC,kCAG7CL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,kBAAiBpD,SAAC,qBAChCL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,4BAA2BpD,SAAC,qCAMlDuD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaxD,SAAA,EAC1BuD,EAAAA,EAAAA,MAAA,SAAAvD,SAAA,CAAO,aACIL,EAAAA,EAAAA,KAAA,QAAAK,SAAM,UAEjBL,EAAAA,EAAAA,KAAA,SACEJ,KAAK,WACL7C,KAAK,SACL2H,UAAWlG,EACXsF,MAAO,CAAEC,MAAO,QAChBN,MAAOvG,EAAWO,SAClB2G,SAAUZ,EACViB,SAAU1F,KAGZ6E,EAAAA,EAAAA,MAAA,UACEhE,KAAK,eACLkE,MAAO,CAAEC,MAAO,SAChBN,MAAOvG,EAAWQ,aAClB0G,SAAUZ,EACViB,SAAU1F,EAAWsB,SAAA,EAGrBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,QAAOpD,SAAC,WACtBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,UAASpD,SAAC,mBAG5BuD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaxD,SAAA,EAC1BuD,EAAAA,EAAAA,MAAA,SAAAvD,SAAA,CAAO,gBACOL,EAAAA,EAAAA,KAAA,QAAAK,SAAM,UAEpBL,EAAAA,EAAAA,KAAA,SACEJ,KAAK,eACL7C,KAAK,SACL2H,UAAWlG,EACXsF,MAAO,CAAEC,MAAO,QAChBN,MAAOvG,EAAWK,aAClB6G,SAAUZ,EACViB,SAAU1F,KAGZ6E,EAAAA,EAAAA,MAAA,UACEhE,KAAK,mBACLkE,MAAO,CAAEC,MAAO,SAChBN,MAAOvG,EAAWM,iBAClB4G,SAAUZ,EACViB,SAAU1F,EAAWsB,SAAA,EAGrBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,QAAOpD,SAAC,WACtBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,KAAIpD,SAAC,cAGvBuD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaxD,SAAA,EAC1BuD,EAAAA,EAAAA,MAAA,SAAAvD,SAAA,CAAO,YACGL,EAAAA,EAAAA,KAAA,QAAAK,SAAM,UAEhBL,EAAAA,EAAAA,KAAA,YACEJ,KAAK,WACL6D,MAAOvG,EAAWS,SAClByG,SAAUZ,EACViB,SAAU1F,UAKL,WAAThC,GACF6G,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcxD,SAAA,EAC3BuD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaxD,SAAA,EAC1BuD,EAAAA,EAAAA,MAAA,SAAAvD,SAAA,CAAO,gBACOL,EAAAA,EAAAA,KAAA,QAAAK,SAAM,UAEpBuD,EAAAA,EAAAA,MAAA,UACEhE,KAAK,aACL6D,MAAO7F,EAAWE,WAClBsG,SAAUZ,EACViB,SAAU1F,EAAWsB,SAAA,EAGrBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,GAAEpD,SAAC,YACjBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,QAAOpD,SAAC,WACtBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,QAAOpD,SAAC,WACtBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,SAAQpD,SAAC,YACvBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,QAAOpD,SAAC,4BACtBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,QAAOpD,SAAC,aACtBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,SAAQpD,SAAC,gBACvBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,SAAQpD,SAAC,qBACvBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,SAAQpD,SAAC,cACvBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,SAAQpD,SAAC,YACvBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,SAAQpD,SAAC,oBAG3BuD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaxD,SAAA,EAC1BuD,EAAAA,EAAAA,MAAA,SAAAvD,SAAA,CAAO,gBACOL,EAAAA,EAAAA,KAAA,QAAAK,SAAM,UAEpBL,EAAAA,EAAAA,KAAA,SACEJ,KAAK,eACL7C,KAAK,SACL2H,UAAWlG,EACXsF,MAAO,CAAEC,MAAO,QAChBN,MAAO7F,EAAWG,aAClBqG,SAAUZ,EACViB,SAAU1F,KAGZ6E,EAAAA,EAAAA,MAAA,UACEhE,KAAK,mBACLkE,MAAO,CAAEC,MAAO,SAChBN,MAAO7F,EAAWI,iBAClBoG,SAAUZ,EACViB,SAAU1F,EAAWsB,SAAA,EAGrBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,QAAOpD,SAAC,WACtBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,KAAIpD,SAAC,cAGvBuD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaxD,SAAA,EAC1BuD,EAAAA,EAAAA,MAAA,SAAAvD,SAAA,CAAO,YACGL,EAAAA,EAAAA,KAAA,QAAAK,SAAM,UAEhBL,EAAAA,EAAAA,KAAA,YACEJ,KAAK,WACL6D,MAAO7F,EAAWK,SAClBmG,SAAUZ,EACViB,SAAU1F,WAMhB6E,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcxD,SAAA,EAC3BuD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaxD,SAAA,EAC1BuD,EAAAA,EAAAA,MAAA,SAAAvD,SAAA,CAAO,oCAC2BL,EAAAA,EAAAA,KAAA,QAAAK,SAAM,UAExCL,EAAAA,EAAAA,KAAA,SACEJ,KAAK,gBACL7C,KAAK,SACL2H,UAAWlG,EACXsF,MAAO,CAAEC,MAAO,SAChBN,MAAOvF,EAAQE,cACfgG,SAAUZ,EACViB,SAAU1F,QAId6E,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaxD,SAAA,EAC1BuD,EAAAA,EAAAA,MAAA,SAAAvD,SAAA,CAAO,qCAC4BL,EAAAA,EAAAA,KAAA,QAAAK,SAAM,UAEzCL,EAAAA,EAAAA,KAAA,SACEJ,KAAK,iBACL7C,KAAK,SACL2H,UAAWlG,EACXsF,MAAO,CAAEC,MAAO,SAChBN,MAAOvF,EAAQG,eACf+F,SAAUZ,EACViB,SAAU1F,QAId6E,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaxD,SAAA,EAC1BuD,EAAAA,EAAAA,MAAA,SAAAvD,SAAA,CAAO,YACGL,EAAAA,EAAAA,KAAA,QAAAK,SAAM,UAEhBL,EAAAA,EAAAA,KAAA,SACEJ,KAAK,UACL7C,KAAK,SACL2H,UAAWlG,EACXsF,MAAO,CAAEC,MAAO,SAChBN,MAAOvF,EAAQI,QACf8F,SAAUZ,EACViB,SAAU1F,QAId6E,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaxD,SAAA,EAC1BuD,EAAAA,EAAAA,MAAA,SAAAvD,SAAA,CAAO,iBACQL,EAAAA,EAAAA,KAAA,QAAAK,SAAM,UAErBuD,EAAAA,EAAAA,MAAA,UACEhE,KAAK,cACL6D,MAAOvF,EAAQK,YACf6F,SAAUZ,EACViB,SAAU1F,EAAWsB,SAAA,EAGrBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,GAAEpD,SAAC,YACjBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,WAAUpD,SAAC,cACzBL,EAAAA,EAAAA,KAAA,UAAQyD,MAAM,WAAUpD,SAAC,uBAOjCuD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBxD,SAAA,CAEhCtB,IACCiB,EAAAA,EAAAA,KAAA,UAAQE,QAASqD,EAAYlD,SAAC,WAE9BtB,IACAiB,EAAAA,EAAAA,KAAA,UAAQE,QAhYKyE,KACnB,IAAIC,EAAe,CAAC,EAGP,WAAT7H,EACF6H,EAAe1H,EACG,WAATH,EACT6H,EAAehH,EACG,YAATb,IACT6H,EAAe1G,GAGjB,MAAM2G,EAAW,IACZD,EACHE,WAAY/H,EACZ8D,eAA4C,OAA5BrE,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8BqE,eAC9CkE,UAAqB,OAAV5I,QAAU,IAAVA,OAAU,EAAVA,EAAY6I,UAGzBrI,QAAQC,IAAIiI,EAAU,aAEtBnE,EAAAA,EACGuE,KAAK,GAADrE,OAAI7E,EAAO,mDAAmD8I,GAClE/D,MAAMC,IACL,MAAOhE,EAAMmI,GAAW,CAACC,OAAOC,KAAKrE,EAAII,MAAM,GAAIgE,OAAOE,OAAOtE,EAAII,MAAM,IAC3EtE,EAAS,CAAEE,KAAM,QAAS0G,MAAO,CAAEyB,UAASnI,UAE/B,WAATA,EACFmC,GAAqBoG,IACnB,MAAMC,EAAc,IAAID,EAAUV,GAElC,OADAxD,EAA2BmE,GACpBA,CAAW,IAEF,WAATxI,EACTqC,GAAqBkG,IACnB,MAAMC,EAAc,IAAID,EAAUV,GAElC,OADAvD,EAA2BkE,GACpBA,CAAW,IAEF,YAATxI,GACToB,GAAe0E,IAAI,IACdA,EACHzE,cAAewG,EAAaxG,cAC5BC,eAAgBuG,EAAavG,eAC7BC,QAASsG,EAAatG,QACtBC,YAAaqG,EAAarG,gBAI9BO,GAAa+D,IAASA,IACtBU,GAAa,IAEdjC,OAAOC,GAAQ5E,QAAQC,IAAI2E,IAAK,EA4UClB,SAAC,cAOzB,WAATtD,GAAqBkC,EAAkBuG,OAAS,IAC/C5B,EAAAA,EAAAA,MAAAD,EAAAA,SAAA,CAAAtD,SAAA,EACEL,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAACC,QAAS/F,EAAegG,QAAS1G,KAC5C2E,EAAAA,EAAAA,MAAA,OAAKE,MAAO,CAAE8B,QAAS,OAAQC,WAAY,QAASxF,SAAA,CAAC,sBAC/Bd,EAAkB,YAIlC,WAATxC,GAAqBoC,EAAkBqG,OAAS,IAC/C5B,EAAAA,EAAAA,MAAAD,EAAAA,SAAA,CAAAtD,SAAA,EACEL,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAACC,QAASnF,EAAeoF,QAASxG,KAC5CyE,EAAAA,EAAAA,MAAA,OAAKE,MAAO,CAAE8B,QAAS,OAAQC,WAAY,QAASxF,SAAA,CAAC,sBAC/BZ,EAAkB,YA6BlC,YAAT1C,GAAsBsC,EAAmBmG,OAAS,IACjDxF,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAACC,QAASlF,EAAgBmF,QAAStG,KAI/CW,EAAAA,EAAAA,KAAC8F,EAAAA,EAAU,CAACC,QAASzJ,EAAM4I,QAASc,KAAM1J,EAAMS,WAEjD,C","sources":["IP_Workbench/Nurse/IP_NurseInputOutputChart.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport ToastAlert from \"../../OtherComponent/ToastContainer/ToastAlert\";\r\nimport { IconButton } from '@mui/material';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport ReactGrid from '../../OtherComponent/ReactGrid/ReactGrid';\r\n\r\nimport ToggleButton from \"@mui/material/ToggleButton\";\r\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\r\n\r\nconst IP_NurseInputOutputChart = () => {\r\n\r\n  const UrlLink = useSelector((state) => state.userRecord?.UrlLink);\r\n  const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n  const toast = useSelector((state) => state.userRecord?.toast);\r\n  // const UsercreatePatientdata = useSelector(state => state.userRecord?.UsercreatePatientdata);\r\n  const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n\r\n  console.log(IP_DoctorWorkbenchNavigation,'IP_DoctorWorkbenchNavigation');\r\n  \r\n  const dispatch = useDispatch();\r\n\r\n  const [type, setType] = useState(\"Intake\");\r\n  const [IntakeData, setIntakeData] = useState({\r\n    IntakeType: \"\",\r\n    IntakeMode: \"\",\r\n    Site: \"\",\r\n    Measurement1: \"\",\r\n    MeasurementType1: \"ml\",\r\n    Duration: \"\",\r\n    DurationType: \"hours\",\r\n    Remarks1: \"\",\r\n  });\r\n\r\n  const [OutputData, setOutputData] = useState({\r\n    OutputType: \"\",\r\n    Measurement2: \"\",\r\n    MeasurementType2:'ml',\r\n    Remarks2: \"\",\r\n  });\r\n  const [Balance, setBalanceData] = useState({\r\n    totalInputDay: \"\",\r\n    totalOutputDay: \"\",\r\n    balance: \"\",\r\n    balanceType: \"\",\r\n  })\r\n  const blockInvalidChar = e => ['e', 'E', '+', '-'].includes(e.key) && e.preventDefault();\r\n\r\n\r\n\r\n  const [IsGetData, setIsGetData] = useState(false)\r\n  const [IsViewMode, setIsViewMode] = useState(false)\r\n  const [intakeDetailsData, setIntakeDetailsData] = useState([]);\r\n  const [outputDetailsData, setOutputDetailsData] = useState([]);\r\n  const [balanceDetailsData, setBalanceDetailsData] = useState([]);\r\n\r\n  const [totalMeasurement1, setTotalMeasurement1] = useState(0);\r\n  const [totalMeasurement2, setTotalMeasurement2] = useState(0);\r\n\r\n \r\n  const IntakeColumns = [\r\n    { key: 'id', name: 'S.No' ,frozen: true},\r\n    { key: 'VisitId', name: 'Visit ID',frozen: true },\r\n    { key: 'PrimaryDoctorId', name: 'Doctor Id', frozen: true },\r\n    { key: 'PrimaryDoctorName', name: 'Doctor Name', frozen: true },\r\n    { key: 'IntakeType', name: 'Intake Type' },\r\n    { key: 'IntakeMode', name: 'Intake Mode' },\r\n    { key: 'Site', name: 'Site' },\r\n    { key: 'Measurement1', name: 'Measurement' },\r\n    { key: 'MeasurementType1', name: 'Measurement Type' },\r\n    { key: 'Duration', name: 'Duration' },\r\n    { key: 'Remarks', name: 'Remarks' },\r\n    { key: 'Date', name: 'Date',frozen: true},\r\n    { key: 'Time', name: 'Time',frozen: true },\r\n    {\r\n      key: 'view',\r\n      name: 'View',\r\n      frozen: true,\r\n      renderCell: (params) => (\r\n        <IconButton onClick={() => handleView(params.row)}>\r\n          <VisibilityIcon />\r\n        </IconButton>\r\n      ),\r\n    },\r\n    // { key: 'TotalMeasurement1', name: 'Total Measurement',frozen: true }\r\n  ];\r\n\r\n  const OutputColumns = [\r\n    { key: 'id', name: 'S.No',frozen: true },\r\n    { key: 'VisitId', name: 'Visit ID',frozen: true },\r\n    { key: 'PrimaryDoctorId', name: 'Doctor Id', frozen: true },\r\n    { key: 'PrimaryDoctorName', name: 'Doctor Name', frozen: true },\r\n    { key: 'OutputType', name: 'Output Type' },\r\n    { key: 'Measurement2', name: 'Measurement' },\r\n    { key: 'MeasurementType2', name: 'Measurement Type' },\r\n    { key: 'Remarks2', name: 'Remarks' },\r\n    { key: 'Date', name: 'Date',frozen: true,},\r\n    { key: 'Time', name: 'Time' ,frozen: true,},\r\n    {\r\n      key: 'view',\r\n      name: 'View',\r\n      frozen: true,\r\n      renderCell: (params) => (\r\n        <IconButton onClick={() => handleView(params.row)}>\r\n          <VisibilityIcon />\r\n        </IconButton>\r\n      ),\r\n    },\r\n    // { key: 'TotalMeasurement2', name: 'Total Measurement',frozen: true }\r\n\r\n  ];\r\n\r\n\r\n  const BalanceColumns = [\r\n    { key: 'id', name: 'S.No' ,frozen: true},\r\n    { key: 'VisitId', name: 'Visit ID',frozen: true },\r\n    { key: 'PrimaryDoctorId', name: 'Doctor Id', frozen: true },\r\n    { key: 'PrimaryDoctorName', name: 'Doctor Name', frozen: true },\r\n    { key: 'totalInputDay', name: 'Total Input (Day)' },\r\n    { key: 'totalOutputDay', name: 'Total Output (Day)' },\r\n    { key: 'balance', name: 'Balance' },\r\n    { key: 'balanceType', name: 'Balance Type' },\r\n    { key: 'Date', name: 'Date' ,frozen: true},\r\n    { key: 'Time', name: 'Time' ,frozen: true},\r\n    {\r\n      key: 'view',\r\n      name: 'View',\r\n      frozen: true,\r\n      renderCell: (params) => (\r\n        <IconButton onClick={() => handleView(params.row)}>\r\n          <VisibilityIcon />\r\n        </IconButton>\r\n      ),\r\n    },\r\n  ];\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`${UrlLink}Ip_Workbench/IP_InputOutputBalance_Details_Link`, {\r\n        params: { RegistrationId: IP_DoctorWorkbenchNavigation?.RegistrationId },\r\n      })\r\n      .then((res) => {\r\n        const { intake_details, output_details, balance_details } = res.data;\r\n\r\n        console.log('Intake Details:', intake_details);\r\n        console.log('Output Details:', output_details);\r\n        console.log('Balance Details:', balance_details);\r\n\r\n        // Set the data for each grid separately\r\n        setIntakeDetailsData(intake_details || []);\r\n        setOutputDetailsData(output_details || []);\r\n        setBalanceDetailsData(balance_details || []);\r\n        calculateTotalMeasurement1(intake_details || []);\r\n        calculateTotalMeasurement2(output_details || []);\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n  }, [IsGetData, UrlLink, IP_DoctorWorkbenchNavigation?.RegistrationId]);\r\n\r\n  // const calculateTotalMeasurement1 = (data) => {\r\n  //   const total = data.reduce((sum, item) => sum + (parseFloat(item.Measurement1) || 0), 0);\r\n  //   setTotalMeasurement1(total);\r\n  //   setBalanceData(prev => ({\r\n  //     ...prev,\r\n  //     totalInputDay: total\r\n  //   }));\r\n  // };\r\n\r\n\r\n  // const calculateTotalMeasurement2 = (data) => {\r\n  //   const total = data.reduce((sum, item) => sum + (parseFloat(item.Measurement2) || 0), 0);\r\n  //   setTotalMeasurement2(total);\r\n  //   setBalanceData(prev => ({\r\n  //     ...prev,\r\n  //     totalOutputDay: total\r\n  //   }));\r\n  // };\r\n\r\n\r\n\r\n\r\n  // const getTodayDate = () => {\r\n  //   const today = new Date();\r\n  //   const year = today.getFullYear();\r\n  //   const month = String(today.getMonth() + 1).padStart(2, '0');\r\n  //   const day = String(today.getDate()).padStart(2, '0');\r\n  //   return `${year}-${month}-${day}`;\r\n  // };\r\n\r\n  const getTodayDate = () => {\r\n    const today = new Date();\r\n    const year = today.getFullYear();\r\n    const month = String(today.getMonth() + 1).padStart(2, '0');\r\n    const day = String(today.getDate()).padStart(2, '0');\r\n    return `${day}-${month}-${year.toString().slice(-2)}`;\r\n  };\r\n\r\n\r\n  const calculateTotalMeasurement1 = (data) => {\r\n    const todayDate = getTodayDate();\r\n    const total = data\r\n      .filter(item => item.Date === todayDate)\r\n      .reduce((sum, item) => sum + (parseFloat(item.Measurement1) || 0), 0);\r\n    setTotalMeasurement1(total);\r\n    setBalanceData(prev => {\r\n      const updatedBalance = total - prev.totalOutputDay;\r\n      return {\r\n        ...prev,\r\n        totalInputDay: total,\r\n        balance: updatedBalance,\r\n        balanceType: updatedBalance < 0 ? \"Negative\" : \"Positive\"\r\n      };\r\n    });\r\n  };\r\n\r\n  const calculateTotalMeasurement2 = (data) => {\r\n    const todayDate = getTodayDate();\r\n    const total = data\r\n      .filter(item => item.Date === todayDate)\r\n      .reduce((sum, item) => sum + (parseFloat(item.Measurement2) || 0), 0);\r\n    setTotalMeasurement2(total);\r\n    setBalanceData(prev => {\r\n      const updatedBalance = prev.totalInputDay - total;\r\n      return {\r\n        ...prev,\r\n        totalOutputDay: total,\r\n        balance: updatedBalance,\r\n        balanceType: updatedBalance < 0 ? \"Negative\" : \"Positive\"\r\n      };\r\n    });\r\n  };\r\n\r\n  // const calculateTotalMeasurement1 = (data) => {\r\n  //   const total = data.reduce((sum, item) => sum + (parseFloat(item.Measurement1) || 0), 0);\r\n  //   setTotalMeasurement1(total);\r\n  //   setBalanceData(prev => {\r\n  //     const updatedBalance = total - prev.totalOutputDay;\r\n  //     return {\r\n  //       ...prev,\r\n  //       totalInputDay: total,\r\n  //       balance: updatedBalance,\r\n  //       balanceType: updatedBalance < 0 ? \"Negative\" : \"Positive\"\r\n  //     };\r\n  //   });\r\n  // };\r\n\r\n  // const calculateTotalMeasurement2 = (data) => {\r\n  //   const total = data.reduce((sum, item) => sum + (parseFloat(item.Measurement2) || 0), 0);\r\n  //   setTotalMeasurement2(total);\r\n  //   setBalanceData(prev => {\r\n  //     const updatedBalance = prev.totalInputDay - total;\r\n  //     return {\r\n  //       ...prev,\r\n  //       totalOutputDay: total,\r\n  //       balance: updatedBalance,\r\n  //       balanceType: updatedBalance < 0 ? \"Negative\" : \"Positive\"\r\n  //     };\r\n  //   });\r\n  // };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleView = (data) => {\r\n    setIntakeData({\r\n      ReasonForAdmission: data.ReasonForAdmission || '',\r\n      PatientConditionOnAdmission: data.PatientConditionOnAdmission || '',\r\n      DoctorIncharge: data.DoctorIncharge || '',\r\n      NurseIncharge: data.NurseIncharge || '',\r\n      ReceptionInchargeName: data.ReceptionInchargeName || '',\r\n      PatientFile: data.PatientFile || '',\r\n      AadharCardNo: data.AadharCardNo || '',\r\n      IntakeType: data.IntakeType || \"\",\r\n      IntakeMode: data.IntakeMode || \"\",\r\n      Site: data.Site || \"\",\r\n      Measurement1: data.Measurement1 || \"\",\r\n      MeasurementType1: data.MeasurementType1 || \"ml\",\r\n      Duration: data.Duration || \"\",\r\n      DurationType: data.DurationType || \"hours\",\r\n      Remarks1: data.Remarks || \"\",\r\n    });\r\n  \r\n    setOutputData({\r\n      OutputType: data.OutputType || \"\",\r\n      Measurement2: data.Measurement2 || \"\",\r\n      MeasurementType2: data.MeasurementType2 || 'ml',\r\n      Remarks2: data.Remarks2 || \"\",\r\n    });\r\n  \r\n    setBalanceData({\r\n      totalInputDay: data.totalInputDay || \"\",\r\n      totalOutputDay: data.totalOutputDay || \"\",\r\n      balance: data.balance || \"\",\r\n      balanceType: data.balanceType || \"\",\r\n    });\r\n  \r\n    setIsViewMode(true);\r\n  };\r\n  \r\n  const handleClear = () => {\r\n    setIntakeData({\r\n      ReasonForAdmission: \"\",\r\n      PatientConditionOnAdmission: \"\",\r\n      DoctorIncharge: \"\",\r\n      NurseIncharge: \"\",\r\n      ReceptionInchargeName: \"\",\r\n      PatientFile: \"\",\r\n      AadharCardNo: \"\",\r\n      IntakeType: \"\",\r\n      IntakeMode: \"\",\r\n      Site: \"\",\r\n      Measurement1: \"\",\r\n      MeasurementType1: \"ml\",\r\n      Duration: \"\",\r\n      DurationType: \"hours\",\r\n      Remarks1: \"\",\r\n    });\r\n  \r\n    setOutputData({\r\n      OutputType: \"\",\r\n      Measurement2: \"\",\r\n      MeasurementType2: 'ml',\r\n      Remarks2: \"\",\r\n    });\r\n  \r\n    setBalanceData({\r\n      totalInputDay: \"\",\r\n      totalOutputDay: \"\",\r\n      balance: \"\",\r\n      balanceType: \"\",\r\n    });\r\n  \r\n    setIsViewMode(false);\r\n  };\r\n  \r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    console.log(name, value);\r\n\r\n    if (type === \"Intake\") {\r\n      setIntakeData((prev) => ({\r\n        ...prev,\r\n        [name]: value,\r\n      }));\r\n    } else if (type === \"Output\") {\r\n      setOutputData((prev) => ({\r\n        ...prev,\r\n        [name]: value,\r\n      }));\r\n    } else {\r\n      setBalanceData((prev) => ({\r\n        ...prev,\r\n        [name]: value,\r\n      }));\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const handleChange = (event) => {\r\n    setType(event.target.value);\r\n  };\r\n\r\n\r\n  const handleSubmit = () => {\r\n    let dataToSubmit = {};\r\n  \r\n    // Determine which data to submit based on the type\r\n    if (type === 'Intake') {\r\n      dataToSubmit = IntakeData;\r\n    } else if (type === 'Output') {\r\n      dataToSubmit = OutputData;\r\n    } else if (type === 'Balance') {\r\n      dataToSubmit = Balance;\r\n    }\r\n  \r\n    const sendData = {\r\n      ...dataToSubmit,  // Spread the correct data object based on type\r\n      Inserttype: type,\r\n      RegistrationId: IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n      Createdby: userRecord?.username,\r\n    };\r\n  \r\n    console.log(sendData, 'sendData ');\r\n  \r\n    axios\r\n      .post(`${UrlLink}Ip_Workbench/IP_InputOutputBalance_Details_Link`, sendData)\r\n      .then((res) => {\r\n        const [type, message] = [Object.keys(res.data)[0], Object.values(res.data)[0]];\r\n        dispatch({ type: 'toast', value: { message, type } });\r\n\r\n        if (type === 'Intake') {\r\n          setIntakeDetailsData(prevData => {\r\n            const updatedData = [...prevData, dataToSubmit];\r\n            calculateTotalMeasurement1(updatedData);\r\n            return updatedData;\r\n          });\r\n        } else if (type === 'Output') {\r\n          setOutputDetailsData(prevData => {\r\n            const updatedData = [...prevData, dataToSubmit];\r\n            calculateTotalMeasurement2(updatedData);\r\n            return updatedData;\r\n          });\r\n        } else if (type === 'Balance') {\r\n          setBalanceData(prev => ({\r\n            ...prev,\r\n            totalInputDay: dataToSubmit.totalInputDay,\r\n            totalOutputDay: dataToSubmit.totalOutputDay,\r\n            balance: dataToSubmit.balance,\r\n            balanceType: dataToSubmit.balanceType,\r\n          }));\r\n        }\r\n\r\n        setIsGetData(prev => !prev);\r\n        handleClear();\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n  \r\n\r\n\r\n  return (\r\n  <>\r\n    <div className=\"RegisFormcon_1\">\r\n      <div style={{ width: \"100%\", display: \"grid\", placeItems: \"center\" }}>\r\n        <ToggleButtonGroup\r\n          value={type}\r\n          exclusive\r\n          onChange={handleChange}\r\n          aria-label=\"Platform\"\r\n        >\r\n          <ToggleButton\r\n            value=\"Intake\"\r\n            style={{\r\n              height: \"30px\",\r\n              width: \"100px\",\r\n              backgroundColor:\r\n                type === \"Intake\"\r\n                  ? \"var(--selectbackgroundcolor)\"\r\n                  : \"inherit\",\r\n            }}\r\n            className=\"togglebutton_container\"\r\n          >\r\n            Intake\r\n          </ToggleButton>\r\n          <ToggleButton\r\n            value=\"Output\"\r\n            style={{\r\n              backgroundColor:\r\n                type === \"Output\"\r\n                  ? \"var(--selectbackgroundcolor)\"\r\n                  : \"inherit\",\r\n              width: \"100px\",\r\n              height: \"30px\",\r\n            }}\r\n            className=\"togglebutton_container\"\r\n          >\r\n            Output\r\n          </ToggleButton>\r\n          <ToggleButton\r\n            value=\"Balance\"\r\n            style={{\r\n              backgroundColor:\r\n                type === \"Balance\"\r\n                  ? \"var(--selectbackgroundcolor)\"\r\n                  : \"inherit\",\r\n              width: \"100px\",\r\n              height: \"30px\",\r\n            }}\r\n            className=\"togglebutton_container\"\r\n          >\r\n            Balance\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n      </div>\r\n\r\n      {/* Form Content */}\r\n      {type === \"Intake\" ? (\r\n        <div className=\"RegisFormcon\">\r\n          <div className=\"RegisForm_1\">\r\n            <label>\r\n              Intake Type <span>:</span>\r\n            </label>\r\n            <select\r\n              name=\"IntakeType\"\r\n              value={IntakeData.IntakeType}\r\n              onChange={handleInputChange}\r\n              readOnly={IsViewMode}\r\n\r\n            >\r\n              <option value=\"\">Select</option>\r\n              <option value=\"Solid\">Solid</option>\r\n              <option value=\"SemiSolid\">Semi Solid</option>\r\n              <option value=\"Fulid\">Fluid</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"RegisForm_1\">\r\n            <label>\r\n              Intake Mode <span>:</span>\r\n            </label>\r\n            <select\r\n              name=\"IntakeMode\"\r\n              value={IntakeData.IntakeMode}\r\n              onChange={handleInputChange}\r\n              readOnly={IsViewMode}\r\n\r\n            >\r\n              <option value=\"\">Select</option>\r\n              <option value=\"Oral\">Oral</option>\r\n              <option value=\"IV\">IV</option>\r\n              <option value=\"RylesTube\">RylesTube</option>\r\n            </select>\r\n          </div>\r\n          {IntakeData.IntakeMode === \"IV\" && (\r\n              <div className=\"RegisForm_1\">\r\n                <label>\r\n                  Site <span>:</span>\r\n                </label>\r\n                <select\r\n                  name=\"Site\"\r\n                  value={IntakeData.Site}\r\n                  onChange={handleInputChange}\r\n                  readOnly={IsViewMode}\r\n\r\n                >\r\n                  <option value=\"\">Select</option>\r\n                  <option value=\"External Jugular\">External Jugular</option>\r\n                  <option value=\"Subclavian\">Subclavian</option>\r\n                  <option value=\"Femoral vein\">Femoral vein</option>\r\n                  <option value=\"Dorsal Venous Network of Hand\">\r\n                    Dorsal Venous Network of Hand\r\n                  </option>\r\n                  <option value=\"Radial vein\">Radial vein</option>\r\n                  <option value=\"Median Cubital vein\">Median Cubital vein</option>\r\n                  <option value=\"Cephalic vein\">Cephalic vein</option>\r\n                  <option value=\"Dorsal Venous Network of Leg\">\r\n                    Dorsal Venous Network of Leg\r\n                  </option>\r\n                  <option value=\"Saphaneous vein\">Saphaneous vein</option>\r\n                  <option value=\"Superficial Temporal vein\">\r\n                    Superficial Temporal vein\r\n                  </option>\r\n                </select>\r\n              </div>\r\n            )}\r\n          <div className=\"RegisForm_1\">\r\n            <label>\r\n              Duration <span>:</span>\r\n            </label>\r\n            <input\r\n              name=\"Duration\"\r\n              type=\"number\"\r\n              onKeyDown={blockInvalidChar}\r\n              style={{ width: \"50px\" }}\r\n              value={IntakeData.Duration}\r\n              onChange={handleInputChange}\r\n              readOnly={IsViewMode}\r\n\r\n            />\r\n            <select\r\n              name=\"DurationType\"\r\n              style={{ width: \"110px\" }}\r\n              value={IntakeData.DurationType}\r\n              onChange={handleInputChange}\r\n              readOnly={IsViewMode}\r\n\r\n            >\r\n              <option value=\"hours\">hours</option>\r\n              <option value=\"minutes\">minutes</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"RegisForm_1\">\r\n            <label>\r\n              Measurement <span>:</span>\r\n            </label>\r\n            <input\r\n              name=\"Measurement1\"\r\n              type=\"number\"\r\n              onKeyDown={blockInvalidChar}\r\n              style={{ width: \"50px\" }}\r\n              value={IntakeData.Measurement1}\r\n              onChange={handleInputChange}\r\n              readOnly={IsViewMode}\r\n\r\n            />\r\n            <select\r\n              name=\"MeasurementType1\"\r\n              style={{ width: \"110px\" }}\r\n              value={IntakeData.MeasurementType1}\r\n              onChange={handleInputChange}\r\n              readOnly={IsViewMode}\r\n\r\n            >\r\n              <option value=\"grams\">grams</option>\r\n              <option value=\"ml\">ml</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"RegisForm_1\">\r\n            <label>\r\n              Remarks <span>:</span>\r\n            </label>\r\n            <textarea\r\n              name=\"Remarks1\"\r\n              value={IntakeData.Remarks1}\r\n              onChange={handleInputChange}\r\n              readOnly={IsViewMode}\r\n\r\n            />\r\n          </div>\r\n        </div>\r\n      ) : type === \"Output\" ? (\r\n        <div className=\"RegisFormcon\">\r\n          <div className=\"RegisForm_1\">\r\n            <label>\r\n              Output Type <span>:</span>\r\n            </label>\r\n            <select\r\n              name=\"OutputType\"\r\n              value={OutputData.OutputType}\r\n              onChange={handleInputChange}\r\n              readOnly={IsViewMode}\r\n\r\n            >\r\n              <option value=\"\">Select</option>\r\n              <option value=\"Vomit\">Vomit</option>\r\n              <option value=\"Urine\">Urine</option>\r\n              <option value=\"Stules\">Stools</option>\r\n              <option value=\"Vomit\">Surgical Site Drainage</option>\r\n              <option value=\"Urine\">Gastric</option>\r\n              <option value=\"Stules\">Lab sample</option>\r\n              <option value=\"Stules\">Insensible loss</option>\r\n              <option value=\"Stules\">Sweating</option>\r\n              <option value=\"Stules\">Oozing</option>\r\n              <option value=\"Stules\">Bleeding</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"RegisForm_1\">\r\n            <label>\r\n              Measurement <span>:</span>\r\n            </label>\r\n            <input\r\n              name=\"Measurement2\"\r\n              type=\"number\"\r\n              onKeyDown={blockInvalidChar}\r\n              style={{ width: \"50px\" }}\r\n              value={OutputData.Measurement2}\r\n              onChange={handleInputChange}\r\n              readOnly={IsViewMode}\r\n\r\n            />\r\n            <select\r\n              name=\"MeasurementType2\"\r\n              style={{ width: \"110px\" }}\r\n              value={OutputData.MeasurementType2}\r\n              onChange={handleInputChange}\r\n              readOnly={IsViewMode}\r\n\r\n            >\r\n              <option value=\"grams\">grams</option>\r\n              <option value=\"ml\">ml</option>\r\n            </select>\r\n          </div>\r\n          <div className=\"RegisForm_1\">\r\n            <label>\r\n              Remarks <span>:</span>\r\n            </label>\r\n            <textarea\r\n              name=\"Remarks2\"\r\n              value={OutputData.Remarks2}\r\n              onChange={handleInputChange}\r\n              readOnly={IsViewMode}\r\n\r\n            />\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"RegisFormcon\">\r\n          <div className=\"RegisForm_1\">\r\n            <label>\r\n              Total Input of the day (ml/gms) <span>:</span>\r\n            </label>\r\n            <input\r\n              name=\"totalInputDay\"\r\n              type=\"number\"\r\n              onKeyDown={blockInvalidChar}\r\n              style={{ width: \"140px\" }}\r\n              value={Balance.totalInputDay}\r\n              onChange={handleInputChange}\r\n              readOnly={IsViewMode}\r\n\r\n            />\r\n          </div>\r\n          <div className=\"RegisForm_1\">\r\n            <label>\r\n              Total Output of the day (ml/gms) <span>:</span>\r\n            </label>\r\n            <input\r\n              name=\"totalOutputDay\"\r\n              type=\"number\"\r\n              onKeyDown={blockInvalidChar}\r\n              style={{ width: \"140px\" }}\r\n              value={Balance.totalOutputDay}\r\n              onChange={handleInputChange}\r\n              readOnly={IsViewMode}\r\n\r\n            />\r\n          </div>\r\n          <div className=\"RegisForm_1\">\r\n            <label>\r\n              Balance <span>:</span>\r\n            </label>\r\n            <input\r\n              name=\"balance\"\r\n              type=\"number\"\r\n              onKeyDown={blockInvalidChar}\r\n              style={{ width: \"140px\" }}\r\n              value={Balance.balance}\r\n              onChange={handleInputChange}\r\n              readOnly={IsViewMode}\r\n\r\n            />\r\n          </div>\r\n          <div className=\"RegisForm_1\">\r\n            <label>\r\n              Balance Type <span>:</span>\r\n            </label>\r\n            <select\r\n              name=\"balanceType\"\r\n              value={Balance.balanceType}\r\n              onChange={handleInputChange}\r\n              readOnly={IsViewMode}\r\n\r\n            >\r\n              <option value=\"\">Select</option>\r\n              <option value=\"Positive\">Positive</option>\r\n              <option value=\"Negative\">Negative</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Submit Button */}\r\n      <div className=\"Main_container_Btn\">\r\n\r\n        {IsViewMode && (\r\n          <button onClick={handleClear}>Clear</button>\r\n        )}\r\n        {!IsViewMode && (\r\n          <button onClick={handleSubmit}>Submit</button>\r\n        )}\r\n      </div>\r\n\r\n      {/* Grid Data */}\r\n\r\n\r\n      {type === \"Intake\" && intakeDetailsData.length > 0 && (\r\n        <>\r\n          <ReactGrid columns={IntakeColumns} RowData={intakeDetailsData} />\r\n          <div style={{ padding: '10px', fontWeight: 'bold' }}>\r\n            Total Measurement: {totalMeasurement1} ml \r\n          </div>\r\n        </>\r\n      )}\r\n      {type === \"Output\" && outputDetailsData.length > 0 && (\r\n        <>\r\n          <ReactGrid columns={OutputColumns} RowData={outputDetailsData} />\r\n          <div style={{ padding: '10px', fontWeight: 'bold' }}>\r\n            Total Measurement: {totalMeasurement2} ml \r\n          </div>\r\n        </>\r\n      )}\r\n\r\n\r\n      {/* {type === \"Intake\" && intakeDetailsData.length > 0 && (\r\n        <ReactGrid\r\n          columns={IntakeColumns}\r\n          RowData={intakeDetailsData}\r\n          footerData={{ TotalMeasurement1: `${totalMeasurement1} ml` }}\r\n        />\r\n      )}\r\n\r\n      {type === \"Output\" && outputDetailsData.length > 0 && (\r\n        <ReactGrid\r\n          columns={OutputColumns}\r\n          RowData={outputDetailsData}\r\n          footerData={{ TotalMeasurement2: `${totalMeasurement2} ml` }}\r\n        />\r\n      )} */}\r\n\r\n\r\n      \r\n\r\n\r\n      {/* {type === \"Output\" && outputDetailsData.length > 0 && (\r\n        <ReactGrid columns={OutputColumns} RowData={outputDetailsData} />\r\n      )} */}\r\n      {type === \"Balance\" && balanceDetailsData.length > 0 && (\r\n        <ReactGrid columns={BalanceColumns} RowData={balanceDetailsData} />\r\n      )}\r\n\r\n      {/* Toast Alert */}\r\n      <ToastAlert Message={toast.message} Type={toast.type} />\r\n    </div>\r\n  </>\r\n\r\n  )\r\n}\r\n\r\nexport default IP_NurseInputOutputChart;"],"names":["IP_NurseInputOutputChart","UrlLink","useSelector","state","_state$userRecord","userRecord","_state$userRecord2","UserData","toast","_state$userRecord3","IP_DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","console","log","dispatch","useDispatch","type","setType","useState","IntakeData","setIntakeData","IntakeType","IntakeMode","Site","Measurement1","MeasurementType1","Duration","DurationType","Remarks1","OutputData","setOutputData","OutputType","Measurement2","MeasurementType2","Remarks2","Balance","setBalanceData","totalInputDay","totalOutputDay","balance","balanceType","blockInvalidChar","e","includes","key","preventDefault","IsGetData","setIsGetData","IsViewMode","setIsViewMode","intakeDetailsData","setIntakeDetailsData","outputDetailsData","setOutputDetailsData","balanceDetailsData","setBalanceDetailsData","totalMeasurement1","setTotalMeasurement1","totalMeasurement2","setTotalMeasurement2","IntakeColumns","name","frozen","renderCell","params","_jsx","IconButton","onClick","handleView","row","children","VisibilityIcon","OutputColumns","BalanceColumns","useEffect","axios","get","concat","RegistrationId","then","res","intake_details","output_details","balance_details","data","calculateTotalMeasurement1","calculateTotalMeasurement2","catch","err","error","getTodayDate","today","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","toString","slice","todayDate","total","filter","item","reduce","sum","parseFloat","prev","updatedBalance","ReasonForAdmission","PatientConditionOnAdmission","DoctorIncharge","NurseIncharge","ReceptionInchargeName","PatientFile","AadharCardNo","Remarks","handleClear","handleInputChange","value","target","_Fragment","_jsxs","className","style","width","display","placeItems","ToggleButtonGroup","exclusive","onChange","event","ToggleButton","height","backgroundColor","readOnly","onKeyDown","handleSubmit","dataToSubmit","sendData","Inserttype","Createdby","username","post","message","Object","keys","values","prevData","updatedData","length","ReactGrid","columns","RowData","padding","fontWeight","ToastAlert","Message","Type"],"sourceRoot":""}