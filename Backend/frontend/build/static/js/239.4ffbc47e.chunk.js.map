{"version":3,"file":"static/js/239.4ffbc47e.chunk.js","mappings":"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","sources":["DoctorWorkBench/ReferaDoctor.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\nimport ToastAlert from '../OtherComponent/ToastContainer/ToastAlert';\r\nimport ReactGrid from \"../OtherComponent/ReactGrid/ReactGrid\"\r\n\r\n\r\nconst ReferaDoctor = () => {\r\n  const DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.DoctorWorkbenchNavigation);\r\n  console.log(\"DoctorWorkbenchNavigation\", DoctorWorkbenchNavigation)\r\n  const toast = useSelector((state) => state.userRecord?.toast);\r\n  const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n  console.log(\"userRecord\", userRecord)\r\n  const UrlLink = useSelector((state) => state.userRecord?.UrlLink);\r\n\r\n  const dispatchvalue = useDispatch();\r\n\r\n  const DoctorID = DoctorWorkbenchNavigation.DoctorName;\r\n  console.log(\"1234\",DoctorID)\r\n\r\n\r\n  const [formData, setFormData] = useState({\r\n    ReferId: \"\",\r\n    doctorType: 'InHouse',\r\n    doctorName: '',\r\n    remarks: ''\r\n  });\r\n\r\n  const [doctorNames, setDoctorNames] = useState([]);\r\n  const [ReferGet, setReferGet] = useState(false);\r\n  const [ConsultGet,setConsultGet] = useState([]);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value\r\n    }));\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    axios.get(`${UrlLink}Masters/inhouse_doctor_details`, {\r\n      params: { Doctortype: formData.doctorType, DoctorID: DoctorID }\r\n    })\r\n      .then((response) => {\r\n        console.log(\"Response data:\", response.data);\r\n        setDoctorNames(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, [formData.doctorType, DoctorID, UrlLink]);\r\n\r\n\r\n  const handleSubmitReferDoctor = () => {\r\n    if (formData.doctorName !== \"\") {\r\n      const data = {\r\n        ...formData,\r\n        created_by: userRecord?.username || \"\",\r\n        PatientId: DoctorWorkbenchNavigation?.PatientId || \"\",\r\n        VisitId: DoctorWorkbenchNavigation?.VisitId || \"\",\r\n        DoctorID: DoctorWorkbenchNavigation?.DoctorName || \"\",\r\n\r\n      };\r\n\r\n      axios.post(`${UrlLink}OP/ReferDoctor_Details_link`, data)\r\n        .then((res) => {\r\n          const resData = res.data;\r\n          console.log(resData)\r\n          const type = Object.keys(resData)[0];\r\n          const message = Object.values(resData)[0];\r\n          const tdata = {\r\n            message: message,\r\n            type: type,\r\n          };\r\n          dispatchvalue({ type: \"toast\", value: tdata });\r\n          setReferGet((prev) => !prev);\r\n          setFormData({\r\n            ReferId: \"\",\r\n            doctorType: \"\",\r\n            doctorName: \"\",\r\n            remarks: \"\",\r\n          });\r\n\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    } else {\r\n      const tdata = {\r\n        message: \"Please select doctorname .\",\r\n        type: \"warn\",\r\n      };\r\n      dispatchvalue({ type: \"toast\", value: tdata });\r\n    }\r\n  };\r\n \r\n  useEffect(() => {\r\n    if (DoctorWorkbenchNavigation?.PatientId && DoctorWorkbenchNavigation?.VisitId) {\r\n        axios.get(`${UrlLink}OP/ReferDoctor_Details_link`, {\r\n            params: {\r\n                PatientId: DoctorWorkbenchNavigation.PatientId,\r\n                VisitId: DoctorWorkbenchNavigation.VisitId\r\n            }\r\n        })\r\n        .then((res) => {\r\n            const ress = res.data;\r\n            setConsultGet(ress);\r\n            console.log(\"getrefer\", ress);\r\n        })\r\n        .catch((err) => {\r\n            console.error(err);\r\n        });\r\n    }\r\n}, [ReferGet, UrlLink, DoctorWorkbenchNavigation]);\r\n\r\nconst ConsultDoctorColumns = [\r\n  {\r\n    key:\"id\",\r\n    name:\"S.No\",\r\n    frozen:true,\r\n  },\r\n  {\r\n    key:\"PrimaryDoctorName\",\r\n    name:\"Primary Doctor\",\r\n  },\r\n  {\r\n    key:\"ReferDoctorName\",\r\n    name:\"Refering Doctor\"\r\n  }\r\n]\r\n\r\n  return (\r\n    <>\r\n    \r\n    <div className='new-patient-registration-form'>\r\n<br />\r\n      <div className='RegisFormcon_1'>\r\n        <div className='RegisForm_1'>\r\n          <label htmlFor='doctorType'>Doctor Type<span>:</span></label>\r\n          <select\r\n            id='doctorType'\r\n            name='doctorType'\r\n            value={formData.doctorType}\r\n            onChange={handleInputChange}\r\n          >\r\n            <option value='InHouse'>InHouse</option>\r\n            <option value='Visiting'>Visiting</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"RegisForm_1\">\r\n          <label>\r\n            Doctor Name <span>:</span>\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            list=\"doctorNameOptions\"\r\n            id=\"doctorName\"\r\n            name=\"doctorName\"\r\n            value={formData.doctorName}\r\n            onChange={handleInputChange}\r\n            autoComplete=\"off\"\r\n          />\r\n          <datalist id=\"doctorNameOptions\">\r\n            {doctorNames.map((doctor, index) => (\r\n              <option key={index} value={doctor.DoctorID}>\r\n                {`${doctor.DoctorID} - ${doctor.ShortName} (${doctor.SpecialityName})`}\r\n              </option>\r\n            ))}\r\n          </datalist>\r\n        </div>\r\n\r\n        <div className='RegisForm_1'>\r\n          <label>\r\n            Remarks <span>:</span>\r\n          </label>\r\n          <textarea\r\n            id=\"remarks\"\r\n            name=\"remarks\"\r\n            value={formData.remarks}\r\n            onChange={handleInputChange}\r\n          ></textarea>\r\n        </div>\r\n      </div>\r\n\r\n      <br />\r\n      \r\n      <div className=\"Main_container_Btn\">\r\n        <button\r\n          onClick={handleSubmitReferDoctor}\r\n        >\r\n          {formData.ReferId ? \"Update\" : \"Save\"}\r\n        </button>\r\n\r\n        <ToastAlert Message={toast.message} Type={toast.type} />\r\n      </div>\r\n      {ConsultGet.length > 0 && (\r\n          <ReactGrid columns={ConsultDoctorColumns} RowData={ConsultGet} />\r\n        )}\r\n        </div>\r\n   \r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReferaDoctor;\r\n"],"names":["ReferaDoctor","DoctorWorkbenchNavigation","useSelector","state","_state$Frontoffice","Frontoffice","console","log","toast","_state$userRecord","userRecord","_state$userRecord2","UserData","UrlLink","_state$userRecord3","dispatchvalue","useDispatch","DoctorID","DoctorName","formData","setFormData","useState","ReferId","doctorType","doctorName","remarks","doctorNames","setDoctorNames","ReferGet","setReferGet","ConsultGet","setConsultGet","handleInputChange","event","name","value","target","prevData","useEffect","axios","get","concat","params","Doctortype","then","response","data","catch","err","PatientId","VisitId","res","ress","error","_jsx","_Fragment","children","_jsxs","className","htmlFor","id","onChange","type","list","autoComplete","map","doctor","index","ShortName","SpecialityName","onClick","handleSubmitReferDoctor","created_by","username","post","resData","Object","keys","message","values","prev","ToastAlert","Message","Type","length","ReactGrid","columns","key","frozen","RowData"],"sourceRoot":""}