{"version":3,"file":"static/js/8152.809080d6.chunk.js","mappings":"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","sources":["IP_Workbench/Nurse/ServiceRequest/IP_ReferAndInchargeDoctor.jsx"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport ToastAlert from \"../../../OtherComponent/ToastContainer/ToastAlert\";\r\nimport { IconButton } from '@mui/material';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\nimport ReactGrid from '../../../OtherComponent/ReactGrid/ReactGrid';\r\n\r\nimport ToggleButton from \"@mui/material/ToggleButton\";\r\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\r\n\r\n\r\nconst IP_ReferAndInchargeDoctor = () => {\r\n  const UrlLink = useSelector((state) => state.userRecord?.UrlLink);\r\n  const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n  const toast = useSelector((state) => state.userRecord?.toast);\r\n  const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [type, setType] = useState(\"Incharge\");\r\n\r\n  const [Incharge, setIncharge] = useState({\r\n    Speciality: \"\",\r\n    DoctorName: \"\",\r\n    Reason: \"\",\r\n  });\r\n\r\n\r\n\r\n  const [IsGetData, setIsGetData] = useState(false);\r\n//   const [IsViewMode, setIsViewMode] = useState(false);\r\n  const [InchargeDetailsData, setInchargeDetailsData] = useState([]);\r\n  const [ReferDetailsData, setReferDetailsData] = useState([]);\r\n  \r\n  const [DoctorData, setDoctorData] = useState([]);\r\n  const [SpecializationData, setSpecializationData] = useState([]);\r\n\r\n\r\n  \r\n  useEffect(() => {\r\n    if (Incharge.Speciality) {\r\n        \r\n    \r\n    axios.get(`${UrlLink}Masters/get_Doctor_by_Speciality_Detials?Speciality=${Incharge.Speciality}`)\r\n        .then((res) => {\r\n            const ress = res.data\r\n            console.log(ress)\r\n            setDoctorData(ress)\r\n\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        })\r\n    }\r\n}, [UrlLink,Incharge.Speciality])\r\n\r\n  useEffect(() => {\r\n    axios.get(`${UrlLink}Masters/Doctors_Speciality_Detials_link`)\r\n        .then((res) => {\r\n            const ress = res.data\r\n            console.log(ress)\r\n            setSpecializationData(ress)\r\n\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        })\r\n}, [UrlLink])\r\n\r\n\r\n  const InchargeAndReferColumns = [\r\n    { key: 'id', name: 'S.No', frozen: true },\r\n    { key: 'VisitId', name: 'Visit ID', frozen: true },\r\n    { key: 'PrimaryDoctorName', name: 'Doctor Name', frozen: true },\r\n    { key: 'Type', name: 'Type' },\r\n    { key: 'Speciality', name: 'Speciality' },\r\n    { key: 'DoctorName', name: 'DoctorName' },\r\n    { key: 'Reason', name: 'Reason' },\r\n    { key: 'CurrDate', name: 'Date', frozen: true },\r\n    { key: 'CurrTime', name: 'Time', frozen: true },\r\n    \r\n  ];\r\n\r\n//   const ReferColumns = [\r\n//     { key: 'id', name: 'S.No', frozen: true },\r\n//     { key: 'VisitId', name: 'Visit ID', frozen: true },\r\n//     { key: 'PrimaryDoctorName', name: 'Doctor Name', frozen: true },\r\n//     { key: 'Speciality', name: 'Speciality' },\r\n//     { key: 'DoctorName', name: 'DoctorName' },\r\n//     { key: 'Reason', name: 'Reason' },\r\n//     { key: 'Date', name: 'Date', frozen: true },\r\n//     { key: 'Time', name: 'Time', frozen: true },\r\n    \r\n//   ];\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`${UrlLink}Ip_Workbench/IP_InchargeAndRefer_Details_Link`, {\r\n        params: { RegistrationId: IP_DoctorWorkbenchNavigation?.RegistrationId,Type:type },\r\n      })\r\n      .then((res) => {\r\n        console.log('Incharge_details:', res.data);\r\n\r\n        // Set the data for each grid separately\r\n        setInchargeDetailsData(res.data || []);\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n  }, [IsGetData,type, UrlLink, IP_DoctorWorkbenchNavigation?.RegistrationId]);\r\n\r\n\r\n  const handleClear = () => {\r\n    setIncharge({\r\n      Speciality: \"\",\r\n      DoctorName: \"\",\r\n      Reason: \"\",\r\n    });\r\n\r\n\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    console.log(name, value);\r\n  \r\n      setIncharge((prev) => ({\r\n        ...prev,\r\n        [name]: value,\r\n      }));\r\n    \r\n  };\r\n  \r\n\r\n \r\n  const handleChange = (event) => {\r\n    setType(event.target.value);\r\n    setIncharge({\r\n        Speciality: \"\",\r\n        DoctorName: \"\",\r\n        Reason: \"\",\r\n    })\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    let dataToSubmit = {};\r\n\r\n    // Determine which data to submit based on the type\r\n    if (type === 'Incharge') {\r\n      dataToSubmit = Incharge;\r\n    }else if (type === 'Refer'){\r\n      dataToSubmit = Incharge;\r\n\r\n    }\r\n\r\n    const sendData = {\r\n      ...dataToSubmit, // Spread the correct data object based on type\r\n      Inserttype: type,\r\n      RegistrationId: IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n      Createdby: userRecord?.username,\r\n    };\r\n\r\n    console.log(sendData, 'sendData');\r\n\r\n    axios\r\n      .post(`${UrlLink}Ip_Workbench/IP_InchargeAndRefer_Details_Link`, sendData)  // Ensure this is the correct endpoint\r\n      .then((res) => {\r\n        const [type, message] = [Object.keys(res.data)[0], Object.values(res.data)[0]];\r\n        dispatch({ type: 'toast', value: { message, type } });\r\n\r\n      \r\n        setInchargeDetailsData(prevData => [...prevData, dataToSubmit]);\r\n       \r\n\r\n        setIsGetData(prev => !prev);\r\n        handleClear();\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"RegisFormcon_1\">\r\n        <div style={{ width: \"100%\", display: \"grid\", placeItems: \"center\" }}>\r\n          <ToggleButtonGroup\r\n            value={type}\r\n            exclusive\r\n            onChange={handleChange}\r\n            aria-label=\"Platform\"\r\n          >\r\n            <ToggleButton\r\n              value=\"Incharge\"\r\n              style={{\r\n                height: \"30px\",\r\n                width: \"200px\",\r\n                backgroundColor: type === \"Incharge\" ? \"var(--selectbackgroundcolor)\" : \"inherit\",\r\n              }}\r\n              className=\"togglebutton_container\"\r\n            >\r\n              Incharge Doctor\r\n            </ToggleButton>\r\n            <ToggleButton\r\n              value=\"Refer\"\r\n              style={{\r\n                backgroundColor: type === \"Refer\" ? \"var(--selectbackgroundcolor)\" : \"inherit\",\r\n                width: \"200px\",\r\n                height: \"30px\",\r\n              }}\r\n              className=\"togglebutton_container\"\r\n            >\r\n              Refer a Doctor\r\n            </ToggleButton>\r\n          </ToggleButtonGroup>\r\n        </div>\r\n\r\n        {/* Form Content */}\r\n        \r\n          <div className=\"RegisFormcon\">\r\n            <div className=\"RegisForm_1\">\r\n              <label>\r\n                Speciality <span>:</span>\r\n              </label>\r\n              <select\r\n                name=\"Speciality\"\r\n                value={Incharge.Speciality}\r\n                onChange={handleInputChange}\r\n              >\r\n                <option value=\"\">Select</option>\r\n                {SpecializationData.map((spl, index) => (\r\n                    <option key={index} value={spl.id}>\r\n                    {spl.SpecialityName}\r\n                    </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"RegisForm_1\">\r\n              <label>\r\n                Doctor Name <span>:</span>\r\n              </label>\r\n              <select\r\n                name=\"DoctorName\"\r\n                value={Incharge.DoctorName}\r\n                onChange={handleInputChange}\r\n              >\r\n                <option value=\"\">Select</option>\r\n                {DoctorData.map((doctor, index) => (\r\n                    <option key={index} value={doctor.id}>\r\n                    {doctor.Name}\r\n                    </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"RegisForm_1\">\r\n              <label>\r\n                Reason <span>:</span>\r\n              </label>\r\n              <textarea\r\n                name=\"Reason\"\r\n                value={Incharge.Reason}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n          </div>\r\n        \r\n\r\n        {/* Submit Button */}\r\n        <div className=\"Main_container_Btn\">\r\n          {/* {IsViewMode && <button onClick={handleClear}>Clear</button>} */}\r\n          {<button onClick={handleSubmit}>Submit</button>}\r\n        </div>\r\n\r\n        {/* Grid Data */}\r\n        {type === \"Incharge\" &&  InchargeDetailsData.length > 0 && (\r\n          <ReactGrid columns={InchargeAndReferColumns} RowData={InchargeDetailsData} />\r\n        )}\r\n\r\n        { type === \"Refer\"  && InchargeDetailsData.length > 0 && (\r\n          <ReactGrid columns={InchargeAndReferColumns} RowData={InchargeDetailsData} />\r\n        )}\r\n       \r\n        {/* Toast Alert */}\r\n        <ToastAlert Message={toast.message} Type={toast.type} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IP_ReferAndInchargeDoctor;\r\n"],"names":["IP_ReferAndInchargeDoctor","UrlLink","useSelector","state","_state$userRecord","userRecord","_state$userRecord2","UserData","toast","_state$userRecord3","IP_DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","dispatch","useDispatch","type","setType","useState","Incharge","setIncharge","Speciality","DoctorName","Reason","IsGetData","setIsGetData","InchargeDetailsData","setInchargeDetailsData","ReferDetailsData","setReferDetailsData","DoctorData","setDoctorData","SpecializationData","setSpecializationData","useEffect","axios","get","concat","then","res","ress","data","console","log","catch","err","InchargeAndReferColumns","key","name","frozen","params","RegistrationId","Type","error","handleInputChange","e","value","target","prev","_jsx","_Fragment","children","_jsxs","className","style","width","display","placeItems","ToggleButtonGroup","exclusive","onChange","event","ToggleButton","height","backgroundColor","map","spl","index","id","SpecialityName","doctor","Name","onClick","handleSubmit","dataToSubmit","sendData","Inserttype","Createdby","username","post","message","Object","keys","values","prevData","length","ReactGrid","columns","RowData","ToastAlert","Message"],"sourceRoot":""}