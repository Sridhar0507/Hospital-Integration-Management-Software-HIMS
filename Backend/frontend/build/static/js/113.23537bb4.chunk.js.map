{"version":3,"file":"static/js/113.23537bb4.chunk.js","mappings":"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","sources":["IP_Workbench/Nurse/IP_NurseMlc.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ReactGrid from '../../OtherComponent/ReactGrid/ReactGrid';\r\nimport axios from 'axios';\r\nimport ToastAlert from '../../OtherComponent/ToastContainer/ToastAlert';\r\nimport { IconButton } from '@mui/material';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\n\r\n\r\n\r\n\r\nconst IP_NurseMlc = () => {\r\n    const dispatch = useDispatch();\r\n    const UrlLink = useSelector(state => state.userRecord?.UrlLink);\r\n    const toast = useSelector(state => state.userRecord?.toast);\r\n    const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n    console.log(IP_DoctorWorkbenchNavigation,'IP_DoctorWorkbenchNavigation');\r\n\r\n    const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n\r\n    \r\n    const formatLabel = (label) => {\r\n\r\n        if (/[a-z]/.test(label) && /[A-Z]/.test(label) && !/\\d/.test(label)) {\r\n            return label\r\n                .replace(/([a-z])([A-Z])/g, \"$1 $2\")\r\n                .replace(/^./, (str) => str.toUpperCase());\r\n        } else {\r\n            return label;\r\n        }\r\n    };\r\n\r\n    const [Mlc,setMlc] = useState({\r\n        MlcNo: \"\",\r\n        MlcInfoDate: \"\",\r\n        MlcInfoTime: \"\",\r\n        InformedBy: \"\",\r\n        MlcSendTime: \"\",\r\n        Reason: \"\",\r\n        Type: \"\",\r\n        PoliceStationName: \"\",\r\n        ConsultantName: \"\",\r\n        RmoName: \"\",\r\n        MlcCopyReceiveTime: \"\",\r\n        ReceivedBySister: \"\",\r\n        ReceptionStaffName: \"\",\r\n        InchargeName: \"\",\r\n        Remarks: \"\",\r\n      \r\n    })\r\n\r\n    \r\n    const [gridData, setGridData] = useState([])\r\n    const [IsGetData, setIsGetData] = useState(false)\r\n\r\n    const [IsViewMode, setIsViewMode] = useState(false)\r\n  \r\n\r\n    const MlcColumns = [\r\n        {\r\n            key: 'id',\r\n            name: 'S.No',\r\n            frozen: true\r\n        },\r\n        { key: 'VisitId', name: 'VisitId',frozen: true },\r\n        { key: 'PrimaryDoctorName', name: 'Doctor Name',frozen: true },\r\n      \r\n        {\r\n            key: 'Date',\r\n            name: 'Date',\r\n            frozen: true\r\n        },\r\n        {\r\n            key: 'Time',\r\n            name: 'Time',\r\n            frozen: true\r\n        },\r\n       \r\n       \r\n       \r\n        {\r\n            key: 'view',\r\n            frozen: true,\r\n            name: 'View',\r\n            renderCell: (params) => (\r\n              <IconButton onClick={() => handleView(params.row)}>\r\n                <VisibilityIcon />\r\n              </IconButton>\r\n            ),\r\n          },\r\n        \r\n    ]\r\n\r\n\r\n    const handleView = (data) => {\r\n        setMlc({\r\n            MlcNo: data.MlcNo || '',\r\n            MlcInfoDate: data.MlcInfoDate || '',\r\n            MlcInfoTime: data.MlcInfoTime || '',\r\n            InformedBy: data.InformedBy || '',\r\n            MlcSendTime: data.MlcSendTime || '',\r\n            Reason: data.Reason || '',\r\n            Type: data.Type || '',\r\n            PoliceStationName: data.PoliceStationName || '',\r\n            ConsultantName: data.ConsultantName || '',\r\n            RmoName: data.RmoName || '',\r\n            MlcCopyReceiveTime: data.MlcCopyReceiveTime || '',\r\n            ReceivedBySister: data.ReceivedBySister || '',\r\n            ReceptionStaffName: data.ReceptionStaffName || '',\r\n            InchargeName: data.InchargeName || '',\r\n            Remarks: data.Remarks || '',\r\n        });\r\n        setIsViewMode(true);\r\n    };\r\n\r\n    \r\n    const handleClear = () => {\r\n        setMlc({\r\n            MlcNo: \"\",\r\n            MlcInfoDate: \"\",\r\n            MlcInfoTime: \"\",\r\n            InformedBy: \"\",\r\n            MlcSendTime: \"\",\r\n            Reason: \"\",\r\n            Type: \"\",\r\n            PoliceStationName: \"\",\r\n            ConsultantName: \"\",\r\n            RmoName: \"\",\r\n            MlcCopyReceiveTime: \"\",\r\n            ReceivedBySister: \"\",\r\n            ReceptionStaffName: \"\",\r\n            InchargeName: \"\",\r\n            Remarks: \"\",\r\n        });\r\n        setIsViewMode(false);\r\n    };\r\n\r\n    \r\n    useEffect(() => {\r\n        axios.get(`${UrlLink}Ip_Workbench/IP_Mlc_Details_Link`,{params:{RegistrationId:IP_DoctorWorkbenchNavigation?.RegistrationId,Type: 'Nurse'}})\r\n            .then((res) => {\r\n                const ress = res.data\r\n                console.log(ress)\r\n                setGridData(ress)\r\n    \r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            })\r\n      }, [UrlLink,IP_DoctorWorkbenchNavigation,IsGetData])\r\n    \r\n    \r\n\r\n    const handleMlcChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setMlc(prev => ({\r\n          ...prev,\r\n          [name]: value\r\n        }));\r\n      };\r\n\r\n\r\n\r\n      const handleSubmit = () => {\r\n        \r\n        console.log(IP_DoctorWorkbenchNavigation?.RegistrationId);\r\n        \r\n        const senddata={\r\n            ...Mlc,\r\n            RegistrationId:IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n            Createdby:userRecord?.username,\r\n            // Type:'Nurse'\r\n            \r\n        }\r\n\r\n        console.log(senddata,'senddata');\r\n        \r\n        axios.post(`${UrlLink}Ip_Workbench/IP_Mlc_Details_Link`, senddata)\r\n        .then((res) => {\r\n            const [type, message] = [Object.keys(res.data)[0], Object.values(res.data)[0]];\r\n            dispatch({ type: 'toast', value: { message, type } });\r\n            setIsGetData(prev => !prev);\r\n            handleClear();\r\n            })\r\n        .catch((err) => console.log(err));\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n  <div className=\"Main_container_app\">\r\n    <div className=\"form-section5\">\r\n      <div className=\"common_center_tag\">\r\n        <h3>MLC Details</h3>\r\n      </div>\r\n      <br />\r\n\r\n      <div className=\"RegisFormcon_1\">\r\n        {[\r\n          { label: \"MLC No\", id: \"MlcNo\", type: \"text\" },\r\n          { label: \"MLC Info Date\", id: \"MlcInfoDate\", type: \"date\" },\r\n          { label: \"MLC Info Time\", id: \"MlcInfoTime\", type: \"time\" },\r\n          { label: \"Informed By\", id: \"InformedBy\", type: \"text\" },\r\n          { label: \"MLC Send Time\", id: \"MlcSendTime\", type: \"time\" },\r\n          { label: \"Reason\", id: \"Reason\", type: \"text\" },\r\n          { label: \"Police Station Name\", id: \"PoliceStationName\", type: \"text\" },\r\n          { label: \"Consultant Name\", id: \"ConsultantName\", type: \"text\" },\r\n          { label: \"RMO Name\", id: \"RmoName\", type: \"text\" },\r\n          { label: \"MLC Copy Receive Time\", id: \"MlcCopyReceiveTime\", type: \"time\" },\r\n          { label: \"Received By Sister\", id: \"ReceivedBySister\", type: \"text\" },\r\n          { label: \"Reception Staff Name\", id: \"ReceptionStaffName\", type: \"text\" },\r\n          { label: \"Incharge Name\", id: \"InchargeName\", type: \"text\" },\r\n          { label: \"Remarks\", id: \"Remarks\", type: \"textarea\" },\r\n        ].map((input) => (\r\n          <div className=\"RegisForm_1\" key={input.id}>\r\n            <label htmlFor={input.id}>\r\n              {input.label} <span>:</span>\r\n            </label>\r\n            {input.type === \"textarea\" ? (\r\n              <textarea\r\n                id={input.id}\r\n                name={input.id}\r\n                onChange={handleMlcChange}\r\n                value={Mlc[input.id]}\r\n                required\r\n                readOnly={IsViewMode}\r\n\r\n              />\r\n            ) : (\r\n              <input\r\n                type={input.type}\r\n                id={input.id}\r\n                name={input.id}\r\n                onChange={handleMlcChange}\r\n                value={Mlc[input.id]}\r\n                required\r\n                readOnly={IsViewMode}\r\n\r\n              />\r\n            )}\r\n          </div>\r\n        ))}\r\n\r\n        <div className=\"RegisForm_1\">\r\n          <label htmlFor=\"Type\">Type <span>:</span></label>\r\n          <select\r\n            id=\"Type\"\r\n            name=\"Type\"\r\n            onChange={handleMlcChange}\r\n            value={Mlc.Type}\r\n            required\r\n            readOnly={IsViewMode}\r\n\r\n          >\r\n            <option value=\"online\" readOnly={IsViewMode}>Online</option>\r\n            <option value=\"driver\" readOnly={IsViewMode}>Driver</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"Main_container_Btn\">\r\n            \r\n        {IsViewMode && (\r\n            <button onClick={handleClear}>Clear</button>\r\n        )}\r\n        {!IsViewMode && (\r\n            <button onClick={handleSubmit}>Submit</button>\r\n        )}\r\n    </div>\r\n\r\n    {gridData.length >= 0 &&\r\n        <ReactGrid columns={MlcColumns} RowData={gridData} />\r\n    }\r\n\r\n    <ToastAlert Message={toast.message} Type={toast.type} />\r\n\r\n  </div>\r\n</>\r\n\r\n  )\r\n}\r\n\r\nexport default IP_NurseMlc;"],"names":["IP_NurseMlc","dispatch","useDispatch","UrlLink","useSelector","state","_state$userRecord","userRecord","toast","_state$userRecord2","IP_DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","console","log","_state$userRecord3","UserData","Mlc","setMlc","useState","MlcNo","MlcInfoDate","MlcInfoTime","InformedBy","MlcSendTime","Reason","Type","PoliceStationName","ConsultantName","RmoName","MlcCopyReceiveTime","ReceivedBySister","ReceptionStaffName","InchargeName","Remarks","gridData","setGridData","IsGetData","setIsGetData","IsViewMode","setIsViewMode","MlcColumns","key","name","frozen","renderCell","params","_jsx","IconButton","onClick","handleView","row","children","VisibilityIcon","data","handleClear","useEffect","axios","get","concat","RegistrationId","then","res","ress","catch","err","handleMlcChange","e","value","target","prev","_Fragment","_jsxs","className","label","id","type","map","input","htmlFor","onChange","required","readOnly","handleSubmit","senddata","Createdby","username","post","message","Object","keys","values","length","ReactGrid","columns","RowData","ToastAlert","Message"],"sourceRoot":""}