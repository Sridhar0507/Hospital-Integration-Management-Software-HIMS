{"version":3,"file":"static/js/6083.ca3ee1fb.chunk.js","mappings":"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","sources":["IP_Workbench/Doctor/Labintegration.jsx"],"sourcesContent":["\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport ReactGrid from \"../../OtherComponent/ReactGrid/ReactGrid\";\r\nimport ToastAlert from \"../../OtherComponent/ToastContainer/ToastAlert\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { FaTrash } from 'react-icons/fa';\r\nimport ToggleButton from \"@mui/material/ToggleButton\";\r\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\r\nimport ModelContainer from \"../../OtherComponent/ModelContainer/ModelContainer\";\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Button from \"@mui/material/Button\";\r\nimport VisibilityIcon from \"@mui/icons-material/Visibility\";\r\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\r\nimport Modal from 'react-modal';\r\nimport HighlightOffIcon from \"@mui/icons-material/HighlightOff\";\r\n\r\n\r\nconst LabTest = () => {\r\n\r\n    const yourStyles = {\r\n        position: 'absolute',\r\n        inset: '100px',\r\n        border: '1px solid rgb(204, 204, 204)',\r\n        background: 'rgb(97 90 90 / 75%)',\r\n        overflow: 'auto',\r\n        borderRadius: '4px',\r\n        outline: 'none',\r\n        padding: '0px'\r\n    };\r\n    const UrlLink = useSelector((state) => state.userRecord?.UrlLink);\r\n    const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n    const toast = useSelector((state) => state.userRecord?.toast);\r\n    const dispatchvalue = useDispatch();\r\n    const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n    console.log(\"IP_DoctorWorkbenchNavigation\", IP_DoctorWorkbenchNavigation);\r\n    const [type, setType] = useState(\"Addtest\");\r\n    const [modalIsOpen, setModalIsOpen] = useState(false);\r\n    const [modalContent, setModalContent] = useState('');\r\n\r\n    console.log(UrlLink)\r\n    const handlePageChange = (event, newType) => {\r\n        if (newType !== null && newType !== type) {\r\n            setType(newType);\r\n        }\r\n    };\r\n    const [testpreview, setTestpreview] = useState([])\r\n\r\n\r\n    // Fetch test data from the API\r\n    useEffect(() => {\r\n        axios.get('https://live.vesoftometic.co.in/usercontrol/test_and_group_forpackage', {\r\n            headers: {\r\n                'tokenid': '7a5822b9-aaec-4f2c-a672-3e62d537683f',\r\n                'password': 'U*5EEA/jxPM/@|,$0B>\"',\r\n            },\r\n        })\r\n            .then((res) => {\r\n                setGroupAndTestNames(res.data); // Store the test data\r\n\r\n                // Extract unique test methods\r\n                const methods = [...new Set(res.data.map(test => test.testmethod))];\r\n                setTestMethods(methods);\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            });\r\n    }, []);\r\n\r\n\r\n    const [groupAndTestNames, setGroupAndTestNames] = useState([]);\r\n    const [testMethods, setTestMethods] = useState([]); // To store unique test methods\r\n    const [testType, setTestType] = useState(''); // To store selected test type (Individual/Group)\r\n    const [filteredTestNames, setFilteredTestNames] = useState([]);\r\n    const [selectedTest, setSelectedTest] = useState(''); // To store selected test name\r\n    const [selectedTestCode, setSelectedTestCode] = useState(''); // To store selected test code\r\n    const [addedTests, setAddedTests] = useState([]); // To store tests added to the table\r\n\r\n\r\n\r\n\r\n    // Fetch test data from the API\r\n    useEffect(() => {\r\n        axios.get(`${UrlLink}Ip_Workbench/get_external_patient_requests`,)\r\n            .then((res) => {\r\n                setTestpreview(res.data); // Store the test data\r\n\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            });\r\n    }, []);\r\n\r\n    // Remove duplicates and filter based on testmethod\r\n    const filterAndRemoveDuplicates = (testmethod) => {\r\n        const filtered = groupAndTestNames\r\n            .filter(test => test.testmethod === testmethod)\r\n            .map(test => ({\r\n                name: test.name,\r\n                code: test.Test_Code, // Use Test_Code instead of code\r\n            }));\r\n\r\n        // Remove duplicate test names\r\n        const uniqueTestNames = Array.from(new Map(filtered.map(item => [item.name, item])).values());\r\n\r\n        return uniqueTestNames;\r\n    };\r\n    console.log(testpreview)\r\n\r\n    useEffect(() => {\r\n        if (testType) {\r\n            const filteredTests = filterAndRemoveDuplicates(testType);\r\n            setFilteredTestNames(filteredTests); // Set filtered test names\r\n        } else {\r\n            setFilteredTestNames([]); // Reset when no testType is selected\r\n        }\r\n    }, [testType, groupAndTestNames]);\r\n\r\n    const handleAddTest = () => {\r\n        if (selectedTest && selectedTestCode) {\r\n            setAddedTests(prevTests => [\r\n                ...prevTests,\r\n                { name: selectedTest, code: selectedTestCode, type: testType }\r\n            ]);\r\n            setSelectedTest(''); // Clear selected test\r\n            setSelectedTestCode(''); // Clear selected test code\r\n        }\r\n    };\r\n    console.log(addedTests)\r\n\r\n    const handleDeleteTest = (rowIndex) => {\r\n        console.log('Deleting row at index:', rowIndex);\r\n        setAddedTests(prevTests => {\r\n            // Log previous state for debugging\r\n            console.log('Previous state:', prevTests);\r\n            const newTests = prevTests.filter((row, index) => row.code !== rowIndex.code);\r\n            console.log('New state:', newTests);\r\n            return newTests;\r\n        });\r\n    };\r\n\r\n\r\n    // Handle test selection\r\n    const handleTestSelection = (e) => {\r\n        const selectedTestName = e.target.value;\r\n        setSelectedTest(selectedTestName);\r\n\r\n        // Get the corresponding test code for the selected test name\r\n        const selectedTestObj = filteredTestNames.find(test => test.name === selectedTestName);\r\n        if (selectedTestObj) {\r\n            setSelectedTestCode(selectedTestObj.code);\r\n        } else {\r\n            setSelectedTestCode(''); // Clear test code if not found\r\n        }\r\n    };\r\n\r\n\r\n    // Columns for the React Data Grid\r\n    const LabColumns = [\r\n        {\r\n            key: 'id',\r\n            name: 'S.No',\r\n            frozen: true,\r\n        },\r\n\r\n        {\r\n            key: 'name',\r\n            name: 'Test Name',\r\n\r\n        },\r\n        {\r\n            key: 'code',\r\n            name: 'Test Code',\r\n\r\n        },\r\n        {\r\n            key: 'actions',\r\n            name: 'Actions',\r\n            renderCell: (rowIndex) => (\r\n                <>\r\n                    <Button className=\"cell_btn\"\r\n                        onClick={() => handleDeleteTest(rowIndex.row)}>\r\n                        <DeleteIcon className=\"check_box_clrr_cancell\" />\r\n                    </Button>\r\n                </>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    // Prepare row data for ReactGrid\r\n    const rowData = addedTests.map((test, index) => ({\r\n        id: index + 1,\r\n        name: test.name,\r\n        code: test.code,\r\n    }));\r\n\r\n    const handleVisibilityClick = (params) => {\r\n        console.log(params.row)\r\n        const reqid = params.row.requestid\r\n        console.log(reqid)\r\n\r\n        axios.get(`https://live.vesoftometic.co.in/Billing/get_external_report?Request_Id=${reqid}`, {\r\n            headers: {\r\n                'tokenid': '7a5822b9-aaec-4f2c-a672-3e62d537683f',\r\n                'password': 'U*5EEA/jxPM/@|,$0B>\"',\r\n            },\r\n        })\r\n            .then((res) => {\r\n                console.log(\"Full Response:\", res.data);\r\n                if (res.data && res.data[0].Report) {\r\n                    console.log(res.data[0].Report);\r\n                    setModalContent(res.data[0].Report);\r\n                    setModalIsOpen(true);\r\n                } else {\r\n                    alert(\"Report data is Pending\");\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.error(err);\r\n            });\r\n\r\n\r\n\r\n    };\r\n\r\n    const closeModal = () => {\r\n        setModalIsOpen(false);\r\n        setModalContent('');\r\n    };\r\n\r\n    const viewreportIndColumns = [\r\n\r\n        {\r\n            key: \"id\",\r\n            name: \"S.No\",\r\n            frozen: true,\r\n\r\n        },\r\n        {\r\n            key: \"requestid\",\r\n            name: \"Request ID\",\r\n            frozen: true,\r\n        },\r\n        {\r\n            key: \"PatientId\",\r\n            name: \"Patient ID\",\r\n        },\r\n\r\n        {\r\n            key: \"PatientName\",\r\n            name: \"Patient Name\"\r\n\r\n        },\r\n        {\r\n            key: \"Phone_Number\",\r\n            name: \"Phone Number\"\r\n\r\n        },\r\n\r\n        {\r\n            key: \"Document3\",\r\n            name: \"Document Three\",\r\n            renderCell: (params) => (\r\n                <Button className=\"cell_btn\" onClick={() => handleVisibilityClick(params)}>\r\n                    <VisibilityIcon />\r\n                </Button>\r\n            ),\r\n        },\r\n\r\n\r\n    ];\r\n    const viewdata = Array.isArray(testpreview.data) ? testpreview.data.map((test, index) => ({\r\n        id: index + 1,\r\n        requestid: test.requestid,\r\n        PatientId: test.PatientId,\r\n        PatientName: test.PatientName,\r\n        Phone_Number: test.Phone_Number,\r\n    })) : [];\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const handleSubmitSelectedTest = () => {\r\n        // Constructing the data object\r\n        const data = {\r\n            PatientId: IP_DoctorWorkbenchNavigation.PatientId,\r\n            PatientName: IP_DoctorWorkbenchNavigation.PatientName, // Assuming you have these fields\r\n            Age: IP_DoctorWorkbenchNavigation.Age,\r\n            DOB: IP_DoctorWorkbenchNavigation.DOB,\r\n            Gender: IP_DoctorWorkbenchNavigation.Gender,\r\n            Phone_Number: IP_DoctorWorkbenchNavigation.PhoneNo,\r\n            date_of_request: new Date().toISOString().split('T')[0], // Use the current date or as needed\r\n            Refering_Hospital: 'RMC',\r\n            status: 'Pending',\r\n            LabRequests: addedTests.map(test => ({\r\n                Test_Name: test.name,\r\n                Test_Code: test.code,\r\n            })),\r\n        };\r\n\r\n        // Sending the data using Axios\r\n        axios.post(`https://live.vesoftometic.co.in/Billing/External_hospital_investication_request`, data, {\r\n\r\n            headers: {\r\n                'tokenid': '7a5822b9-aaec-4f2c-a672-3e62d537683f',\r\n                'password': 'U*5EEA/jxPM/@|,$0B>\"',\r\n            },\r\n        })\r\n            .then((res) => {\r\n                const resData = res.data;\r\n                console.log(\"Response Data:\", resData);\r\n                setAddedTests([]);\r\n\r\n                // Check postdata only after it's set\r\n                if (resData.status === 'success') {\r\n                    const newdata = {\r\n                        PatientId: IP_DoctorWorkbenchNavigation.PatientId,\r\n                        PatientName: IP_DoctorWorkbenchNavigation.PatientName,\r\n                        Age: IP_DoctorWorkbenchNavigation.Age,\r\n                        DOB: IP_DoctorWorkbenchNavigation.DOB,\r\n                        Gender: IP_DoctorWorkbenchNavigation.Gender,\r\n                        Phone_Number: IP_DoctorWorkbenchNavigation.PhoneNo,\r\n                        date_of_request: new Date().toISOString().split('T')[0],\r\n                        requestid: resData.Request_Id, // Use the Request_Id from the response\r\n                    };\r\n\r\n                    return axios.post(`${UrlLink}Ip_Workbench/create_external_patient_request`, newdata);\r\n                }\r\n                throw new Error('Request failed');\r\n            })\r\n            .then((res) => {\r\n\r\n                console.log(res, \"saved\");\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"Error:\", err);\r\n            });\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"new-patient-registration-form\">\r\n            <br />\r\n            <div className=\"for\" style={{ width: '100%' }}>\r\n                <div style={{ width: \"100%\", display: \"grid\", placeItems: \"center\" }}>\r\n                    <ToggleButtonGroup\r\n                        value={type}\r\n                        exclusive\r\n                        onChange={handlePageChange}\r\n                        aria-label=\"Platform\"\r\n                    >\r\n                        <ToggleButton\r\n                            value=\"Addtest\"\r\n                            style={{\r\n                                height: \"30px\",\r\n                                width: \"180px\",\r\n                                backgroundColor:\r\n                                    type === \"Addtest\"\r\n                                        ? \"var(--selectbackgroundcolor)\"\r\n                                        : \"inherit\",\r\n                            }}\r\n                            className=\"togglebutton_container\"\r\n                        >\r\n                            Add Test\r\n                        </ToggleButton>\r\n                        <ToggleButton\r\n                            value=\"ViewReport\"\r\n                            style={{\r\n                                backgroundColor:\r\n                                    type === \"ViewReport\"\r\n                                        ? \"var(--selectbackgroundcolor)\"\r\n                                        : \"inherit\",\r\n                                width: \"180px\",\r\n                                height: \"30px\",\r\n                            }}\r\n                            className=\"togglebutton_container\"\r\n                        >\r\n                            View Report\r\n                        </ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </div>\r\n\r\n                <br></br>\r\n                <br></br>\r\n                {type === \"Addtest\" && (\r\n                    <>\r\n\r\n                        <div className=\"RegisFormcon_1\">\r\n                            <div className=\"RegisForm_1\">\r\n                                <label style={{ fontSize: '20px' }}>\r\n                                    Test Type <span>:</span>\r\n                                </label>\r\n                                <select\r\n                                    onChange={(e) => setTestType(e.target.value)}\r\n                                    value={testType}\r\n                                    name=\"testType\">\r\n                                    <option value=\"\">Select Test Method</option>\r\n                                    {testMethods.map((method, index) => (\r\n                                        <option key={index} value={method}>\r\n                                            {method}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"RegisForm_1\">\r\n                                <label style={{ fontSize: '20px' }}>\r\n                                    Test Name <span>:</span>\r\n                                </label>\r\n                                <input\r\n                                    list=\"testnames\"\r\n                                    name=\"testname\"\r\n                                    autoComplete=\"off\"\r\n                                    value={selectedTest}\r\n                                    onChange={handleTestSelection}  // Correct usage here\r\n                                />\r\n                                <datalist id=\"testnames\">\r\n                                    {filteredTestNames.map((test, index) => (\r\n                                        <option key={index} value={test.name}>\r\n                                            {test.name}\r\n                                        </option>\r\n                                    ))}\r\n                                </datalist>\r\n\r\n                            </div>\r\n                            <div className=\"Main_container_Btn\">\r\n                                <button onClick={handleAddTest}>\r\n                                    ADD\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                        <br></br>\r\n                        {addedTests.length > 0 && (\r\n                            <div className=\"Main_container_app\">\r\n                                <ReactGrid columns={LabColumns} RowData={rowData} />\r\n                            </div>\r\n                        )}\r\n\r\n\r\n                        <div className=\"Main_container_Btn\">\r\n                            <button onClick={handleSubmitSelectedTest}>\r\n                                save\r\n                            </button>\r\n                        </div>\r\n\r\n\r\n                    </>\r\n                )}\r\n                <br></br>\r\n\r\n                {type === \"ViewReport\" && (\r\n                    <>\r\n\r\n                        <div className=\"Main_container_app\">\r\n                            <ReactGrid columns={viewreportIndColumns} RowData={viewdata} />\r\n                        </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    </>\r\n                )}\r\n\r\n\r\n\r\n\r\n            </div>\r\n            <Modal isOpen={modalIsOpen} onRequestClose={closeModal} style={{ content: { ...yourStyles } }}>\r\n                <div className=\"pdf_img_show\">\r\n                    {modalContent.toLowerCase().startsWith(\"data:application/pdf;base64,\") ? (\r\n                        <>\r\n                            <iframe\r\n                                title=\"PDF Viewer\"\r\n                                src={modalContent}\r\n                                style={{\r\n                                    width: \"100%\",\r\n                                    height: \"435px\",\r\n                                    border: \"1px solid rgba(0, 0, 0, 0.5)\", // Black border with reduced opacity\r\n                                }}\r\n                            />\r\n\r\n                        </>\r\n                    ) : (\r\n                        <img\r\n                            src={modalContent}\r\n                            alt=\"Concern Form\"\r\n                            style={{\r\n                                width: \"80%\",\r\n                                height: \"75%\",\r\n                                marginTop: \"20px\",\r\n                            }}\r\n                        />\r\n                    )}\r\n                    <div className=\"jhuhhjh\">\r\n                        <Button\r\n                            style={{ color: \"white\" }}\r\n                            className=\"clse_pdf_img\"\r\n                            onClick={closeModal}\r\n                        >\r\n                            <HighlightOffIcon\r\n                                style={{\r\n                                    fontSize: \"40px\",\r\n                                    backgroundColor: \"#54d854bf\",\r\n                                    borderRadius: \"40px\",\r\n                                }}\r\n                            />\r\n                        </Button>\r\n                    </div>\r\n\r\n                </div>\r\n            </Modal>\r\n\r\n\r\n            <ModelContainer />\r\n\r\n            <ToastAlert Message={toast.message} Type={toast.type} />\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LabTest;\r\n\r\n"],"names":["LabTest","UrlLink","useSelector","state","_state$userRecord","userRecord","toast","_state$userRecord2","UserData","_state$userRecord3","IP_DoctorWorkbenchNavigation","useDispatch","_state$Frontoffice","Frontoffice","console","log","type","setType","useState","modalIsOpen","setModalIsOpen","modalContent","setModalContent","testpreview","setTestpreview","useEffect","axios","get","headers","then","res","setGroupAndTestNames","data","methods","Set","map","test","testmethod","setTestMethods","catch","err","error","groupAndTestNames","testMethods","testType","setTestType","filteredTestNames","setFilteredTestNames","selectedTest","setSelectedTest","selectedTestCode","setSelectedTestCode","addedTests","setAddedTests","concat","filteredTests","filtered","filter","name","code","Test_Code","Array","from","Map","item","values","filterAndRemoveDuplicates","LabColumns","key","frozen","renderCell","rowIndex","_jsx","_Fragment","children","Button","className","onClick","prevTests","newTests","row","index","handleDeleteTest","DeleteIcon","rowData","id","closeModal","viewreportIndColumns","params","reqid","requestid","Report","alert","handleVisibilityClick","VisibilityIcon","viewdata","isArray","PatientId","PatientName","Phone_Number","_jsxs","style","width","display","placeItems","ToggleButtonGroup","value","exclusive","onChange","handlePageChange","event","newType","ToggleButton","height","backgroundColor","fontSize","e","target","method","list","autoComplete","selectedTestName","selectedTestObj","find","handleAddTest","length","ReactGrid","columns","RowData","handleSubmitSelectedTest","Age","DOB","Gender","PhoneNo","date_of_request","Date","toISOString","split","Refering_Hospital","status","LabRequests","Test_Name","post","resData","newdata","Request_Id","Error","Modal","isOpen","onRequestClose","content","position","inset","border","background","overflow","borderRadius","outline","padding","toLowerCase","startsWith","title","src","alt","marginTop","color","HighlightOffIcon","ModelContainer","ToastAlert","Message","message","Type"],"sourceRoot":""}