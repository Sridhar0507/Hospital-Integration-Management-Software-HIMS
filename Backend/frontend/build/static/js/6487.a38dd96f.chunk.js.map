{"version":3,"file":"static/js/6487.a38dd96f.chunk.js","mappings":"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","sources":["IP_Workbench/Nurse/IPM/IP_DrainageTubes.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ReactGrid from '../../../OtherComponent/ReactGrid/ReactGrid';\r\nimport axios from 'axios';\r\nimport ToastAlert from '../../../OtherComponent/ToastContainer/ToastAlert';\r\nimport { IconButton } from '@mui/material';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\n\r\n\r\n\r\nconst IP_DrainageTubes = () => {\r\n    const dispatch = useDispatch();\r\n    const UrlLink = useSelector(state => state.userRecord?.UrlLink);\r\n    const toast = useSelector(state => state.userRecord?.toast);\r\n    const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n    console.log(IP_DoctorWorkbenchNavigation,'IP_DoctorWorkbenchNavigation');\r\n\r\n    const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n\r\n    \r\n    const formatLabel = (label) => {\r\n\r\n        if (/[a-z]/.test(label) && /[A-Z]/.test(label) && !/\\d/.test(label)) {\r\n            return label\r\n                .replace(/([a-z])([A-Z])/g, \"$1 $2\")\r\n                .replace(/^./, (str) => str.toUpperCase());\r\n        } else {\r\n            return label;\r\n        }\r\n    };\r\n\r\n   \r\n\r\n    const [DrainageTubes, setDrainageTubes] = useState({\r\n        Status: \"\",\r\n        Site: \"\",\r\n        LocationLR: \"\",\r\n        Quality: \"\",\r\n        DrainageTubeSize: \"\",\r\n        Remarks: \"\",\r\n\r\n    });\r\n\r\n\r\n    const [gridData, setGridData] = useState([])\r\n    const [IsGetData, setIsGetData] = useState(false)\r\n\r\n    const [IsViewMode, setIsViewMode] = useState(false)\r\n  \r\n    \r\n      \r\n    const DrainageTubesColumns = [\r\n        {\r\n            key: 'id',\r\n            name: 'S.No',\r\n            frozen: true\r\n        },\r\n        { key: 'PrimaryDoctorName', name: 'Doctor Name',frozen: true },\r\n      \r\n        {\r\n            key: 'CurrDate',\r\n            name: 'Date',\r\n            frozen: true\r\n        },\r\n        {\r\n            key: 'CurrTime',\r\n            name: 'Time',\r\n            frozen: true\r\n        },\r\n       \r\n       \r\n       \r\n        {\r\n            key: 'view',\r\n            frozen: true,\r\n            name: 'View',\r\n            renderCell: (params) => (\r\n              <IconButton onClick={() => handleView(params.row)}>\r\n                <VisibilityIcon />\r\n              </IconButton>\r\n            ),\r\n          },\r\n        { key: 'Status', name: 'Status' },\r\n        { key: 'Site', name: 'Site' },\r\n        { key: 'LocationLR', name: 'Location' },\r\n        { key: 'Quality', name: 'Quality' },\r\n        { key: 'DrainageTubeSize', name: 'DrainageTubeSize' },\r\n        { key: 'Remarks', name: 'Remarks' },\r\n\r\n        \r\n    ]\r\n\r\n     // Handle setting the form data when viewing\r\n     const handleView = (data) => {\r\n        setDrainageTubes({\r\n            Status: data.Status || '',\r\n            Site: data.Site || '',\r\n            LocationLR: data.LocationLR || '',\r\n            Quality: data.Quality || '',\r\n            DrainageTubeSize: data.DrainageTubeSize || '',\r\n            Remarks: data.Remarks || '',\r\n\r\n            \r\n        });\r\n        setIsViewMode(true);\r\n    };\r\n    \r\n  \r\n  // Handle clearing the form and resetting the view mode\r\n  const handleClear = () => {\r\n    setDrainageTubes({\r\n        Status: '',\r\n        Site: '',\r\n        LocationLR: '',\r\n        Quality: '',\r\n        DrainageTubeSize: '',\r\n        Remarks: '',\r\n       \r\n    });\r\n    setIsViewMode(false);\r\n};\r\n\r\n  \r\n\r\n    useEffect(() => {\r\n        axios.get(`${UrlLink}Ip_Workbench/IP_DrainageTubes_Details_Link`,{params:{RegistrationId:IP_DoctorWorkbenchNavigation?.RegistrationId,Type: 'Nurse'}})\r\n            .then((res) => {\r\n                const ress = res.data\r\n                console.log(ress)\r\n                setGridData(ress)\r\n    \r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            })\r\n      }, [UrlLink,IP_DoctorWorkbenchNavigation,IsGetData])\r\n    \r\n    \r\n\r\n\r\n    //   const HandleOnChange = (e) => {\r\n    //     const { name, value } = e.target;\r\n    //     const formattedValue = value.trim();\r\n    //     setDrainageTubes((prevFormData) => ({\r\n    //         ...prevFormData,\r\n    //         [name]: formattedValue,\r\n    //     }));\r\n    // };\r\n\r\n\r\n\r\n    const HandleOnChange = (e) => {\r\n        const { name, value } = e.target;\r\n\r\n        setDrainageTubes((prevFormData) => {\r\n            return {\r\n                ...prevFormData,\r\n                [name]: value,\r\n            };\r\n        });\r\n    };\r\n\r\n    // Handling Measurement change\r\n    const handleMeasurementChange = (e) => {\r\n        const {  value } = e.target;\r\n        setDrainageTubes((prevFormData) => ({\r\n            ...prevFormData,\r\n            Measurement: prevFormData.Measurement.replace(/^\\d+/g, '') + value, // Ensure unit is replaced without affecting the value\r\n        }));\r\n    };\r\n\r\n    // Handling unit change\r\n    const handleUnitChange = (e) => {\r\n        const { value } = e.target;\r\n        setDrainageTubes((prevFormData) => {\r\n            const numericValue = prevFormData.Measurement.replace(/\\D+/g, ''); // Extract numeric value\r\n            return {\r\n                ...prevFormData,\r\n                Measurement: numericValue + value, // Concatenate value and unit\r\n            };\r\n        });\r\n    };\r\n\r\n\r\n\r\n    const handleSubmit = () => {\r\n        \r\n        console.log(IP_DoctorWorkbenchNavigation?.RegistrationId);\r\n        \r\n        const senddata={\r\n            ...DrainageTubes,\r\n            RegistrationId:IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n            Createdby:userRecord?.username,\r\n            Type:'Nurse'\r\n            \r\n        }\r\n\r\n        console.log(senddata,'senddata');\r\n        \r\n        axios.post(`${UrlLink}Ip_Workbench/IP_DrainageTubes_Details_Link`, senddata)\r\n        .then((res) => {\r\n            const [type, message] = [Object.keys(res.data)[0], Object.values(res.data)[0]];\r\n            dispatch({ type: 'toast', value: { message, type } });\r\n            setIsGetData(prev => !prev);\r\n            handleClear();\r\n            })\r\n        .catch((err) => console.log(err));\r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n                <div className=\"RegisFormcon_1\" >\r\n\r\n                    \r\n                    {\r\n                        Object.keys(DrainageTubes).map((p, index) =>\r\n                        (\r\n                            <div className='RegisForm_1' key={p}>\r\n                                <label htmlFor={`${p}_${index}`}>\r\n                                    {p === \"LocationLR\" ? (\r\n                                        \"Location\"\r\n                                    ) : (\r\n                                        formatLabel(p)\r\n                                      )} \r\n                                    \r\n                                    <span>:</span>\r\n                                </label>\r\n                                {p === 'Site' ? (\r\n                                <select\r\n                                    id={`${p}_${index}`}\r\n                                    name={p}\r\n                                    value={DrainageTubes[p]}\r\n                                    onChange={HandleOnChange}\r\n                                    >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"Chest\">Chest</option>\r\n                                    <option value=\"Abdominal\">Abdominal</option>\r\n                                    <option value=\"Orthopedic\">Orthopedic</option>\r\n                                    <option value=\"Others\">Others</option>\r\n                                </select>\r\n                            ) :p === 'Status' ? (\r\n                                <select\r\n                                    id={`${p}_${index}`}\r\n                                    name={p}\r\n                                    value={DrainageTubes[p]}\r\n                                    onChange={HandleOnChange}\r\n                                    >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"Inserted\">Inserted</option>\r\n                                    <option value=\"StatusCheck\">StatusCheck</option>\r\n                                    <option value=\"Removed\">Removed</option>\r\n                                </select>\r\n                            ) : p === 'LocationLR' ? (\r\n                                <select\r\n                                    id={`${p}_${index}`}\r\n                                    name={p}\r\n                                    value={DrainageTubes[p]}\r\n                                    onChange={HandleOnChange}\r\n                                    >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"Left\">Left</option>\r\n                                    <option value=\"Right\">Right</option>\r\n                                </select>\r\n                            ) : p === 'Measurement' ? (\r\n                                <>\r\n                                    <input\r\n                                    id={`${p}_${index}`}\r\n                                    name=\"MeasurementValue\"\r\n                                    style={{ width: \"50px\" }}\r\n                                    value={DrainageTubes.Measurement.replace(/[^\\d]/g, '')} // Extract numeric part\r\n                                    onChange={(e) => handleMeasurementChange(e)}\r\n                                    />\r\n                                    <select\r\n                                        id={`${p}_${index}_unit`}\r\n                                        name=\"MeasurementUnit\"\r\n                                        value={DrainageTubes.Measurement.replace(/\\d+/g, '')} // Extract unit part\r\n                                        onChange={(e) => handleUnitChange(e)}\r\n                                    >\r\n                                        <option value=\"\">Select</option>\r\n                                        <option value=\"ml\">ml</option>\r\n                                        <option value=\"gms\">gms</option>\r\n                                    </select>\r\n                                </>\r\n                            ) : p === 'Quality' ? (\r\n                                <select\r\n                                    id={`${p}_${index}`}\r\n                                    name={p}\r\n                                    value={DrainageTubes[p]}\r\n                                    onChange={HandleOnChange}\r\n                                    >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"PatientExtubated\">Fresh blood</option>\r\n                                    <option value=\"Dead\">Dark blood</option>\r\n                                    <option value=\"Dead\">Pus</option>\r\n                                    <option value=\"Dead\">Blood clots</option>\r\n                                    <option value=\"Dead\">Stopped</option>\r\n                                </select>\r\n                            ) : p === 'CentralLineInfection' ? (\r\n                                <select\r\n                                    id={`${p}_${index}`}\r\n                                    name={p}\r\n                                    value={DrainageTubes[p]}\r\n                                    onChange={HandleOnChange}\r\n                                    >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"Yes\">Yes</option>\r\n                                    <option value=\"No\">No</option>\r\n                                    \r\n                                </select>\r\n                            ) : p === 'Remarks' ? (\r\n                                <textarea\r\n                                    id={`${p}_${index}`}\r\n                                    name={p}\r\n                                    value={DrainageTubes[p]}\r\n                                    onChange={HandleOnChange}\r\n                                    placeholder='Enter your remarks here'\r\n                                />\r\n                            ): p !== 'Measurement' ?(\r\n                                <input\r\n                                id={`${p}_${index}`}\r\n                                autoComplete='off'\r\n                                type={(p === 'DrainRemovalDate' || p === 'Date') ? 'date' : p === 'DrainRemovalTime' ? 'time' : 'text'}\r\n                                name={p}\r\n                                value={DrainageTubes[p]}\r\n                                onChange={HandleOnChange}\r\n                                />\r\n                            ) : null }\r\n                            </div>\r\n\r\n                        ))\r\n                    }\r\n                </div>\r\n                <div className=\"Main_container_Btn\">\r\n            \r\n                    {IsViewMode && (\r\n                        <button onClick={handleClear}>Clear</button>\r\n                    )}\r\n                    {!IsViewMode && (\r\n                        <button onClick={handleSubmit}>Submit</button>\r\n                    )}\r\n                </div>\r\n\r\n                {gridData.length >= 0 &&\r\n                    <ReactGrid columns={DrainageTubesColumns} RowData={gridData} />\r\n                }\r\n            \r\n            <ToastAlert Message={toast.message} Type={toast.type} />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default IP_DrainageTubes;"],"names":["IP_DrainageTubes","dispatch","useDispatch","UrlLink","useSelector","state","_state$userRecord","userRecord","toast","_state$userRecord2","IP_DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","console","log","_state$userRecord3","UserData","DrainageTubes","setDrainageTubes","useState","Status","Site","LocationLR","Quality","DrainageTubeSize","Remarks","gridData","setGridData","IsGetData","setIsGetData","IsViewMode","setIsViewMode","DrainageTubesColumns","key","name","frozen","renderCell","params","_jsx","IconButton","onClick","handleView","row","children","VisibilityIcon","data","handleClear","useEffect","axios","get","concat","RegistrationId","Type","then","res","ress","catch","err","HandleOnChange","e","value","target","prevFormData","_jsxs","_Fragment","className","Object","keys","map","p","index","htmlFor","label","test","replace","str","toUpperCase","id","onChange","style","width","Measurement","handleMeasurementChange","numericValue","handleUnitChange","placeholder","autoComplete","type","handleSubmit","senddata","Createdby","username","post","message","values","prev","length","ReactGrid","columns","RowData","ToastAlert","Message"],"sourceRoot":""}