{"version":3,"file":"static/js/3106.8609f41c.chunk.js","mappings":"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","sources":["IP_Workbench/Nurse/IPM/IP_BloodLines.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ReactGrid from '../../../OtherComponent/ReactGrid/ReactGrid';\r\nimport axios from 'axios';\r\nimport ToastAlert from '../../../OtherComponent/ToastContainer/ToastAlert';\r\nimport { IconButton } from '@mui/material';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\n\r\n\r\n\r\nconst IP_BloodLines = () => {\r\n    const dispatch = useDispatch();\r\n    const UrlLink = useSelector(state => state.userRecord?.UrlLink);\r\n    const toast = useSelector(state => state.userRecord?.toast);\r\n    const IP_DoctorWorkbenchNavigation = useSelector(state => state.Frontoffice?.IP_DoctorWorkbenchNavigation);\r\n    console.log(IP_DoctorWorkbenchNavigation, 'IP_DoctorWorkbenchNavigation');\r\n\r\n    const userRecord = useSelector((state) => state.userRecord?.UserData);\r\n\r\n\r\n    const formatLabel = (label) => {\r\n\r\n        if (/[a-z]/.test(label) && /[A-Z]/.test(label) && !/\\d/.test(label)) {\r\n            return label\r\n                .replace(/([a-z])([A-Z])/g, \"$1 $2\")\r\n                .replace(/^./, (str) => str.toUpperCase());\r\n        } else {\r\n            return label;\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const [BloodLines, setBloodLines] = useState({\r\n\r\n        BlType: \"\",\r\n        IVsite: \"\",\r\n        IAsite: \"\",\r\n        Condition: \"\",\r\n        Status: \"\",\r\n        CentralLineInfection: \"\",\r\n        Remarks: \"\",\r\n\r\n    });\r\n\r\n\r\n    const [gridData, setGridData] = useState([])\r\n    const [IsGetData, setIsGetData] = useState(false)\r\n\r\n    const [IsViewMode, setIsViewMode] = useState(false)\r\n\r\n\r\n\r\n    const BloodLinesColumns = [\r\n        {\r\n            key: 'id',\r\n            name: 'S.No',\r\n            frozen: true\r\n        },\r\n        { key: 'PrimaryDoctorName', name: 'Doctor Name', frozen: true },\r\n\r\n        {\r\n            key: 'CurrDate',\r\n            name: 'Date',\r\n            frozen: true\r\n        },\r\n        {\r\n            key: 'CurrTime',\r\n            name: 'Time',\r\n            frozen: true\r\n        },\r\n\r\n\r\n\r\n        {\r\n            key: 'view',\r\n            frozen: true,\r\n            name: 'View',\r\n            renderCell: (params) => (\r\n                <IconButton onClick={() => handleView(params.row)}>\r\n                    <VisibilityIcon />\r\n                </IconButton>\r\n            ),\r\n        },\r\n        { key: 'BlType', name: 'Type' },\r\n        { key: 'IVsite', name: 'IVsite' },\r\n        { key: 'IAsite', name: 'IAsite' },\r\n        { key: 'Condition', name: 'Condition' },\r\n        { key: 'Status', name: 'Status' },\r\n        { key: 'CentralLineInfection', name: 'CentralLineInfection' },\r\n        { key: 'Remarks', name: 'Remarks' },\r\n\r\n\r\n    ]\r\n\r\n    // Handle setting the form data when viewing\r\n    const handleView = (data) => {\r\n        setBloodLines({\r\n            BlType: data.BlType || '',\r\n            IVsite: data.IVsite || '',\r\n            IAsite: data.IAsite || '',\r\n            Condition: data.Condition || '',\r\n            Status: data.Status || '',\r\n            CentralLineInfection: data.CentralLineInfection || '',\r\n            Remarks: data.Remarks || '',\r\n\r\n        });\r\n        setIsViewMode(true);\r\n    };\r\n\r\n\r\n    // Handle clearing the form and resetting the view mode\r\n    const handleClear = () => {\r\n        setBloodLines({\r\n            BlType: '',\r\n            IVsite: '',\r\n            IAsite: '',\r\n            Condition: '',\r\n            Status: '',\r\n            CentralLineInfection: '',\r\n            Remarks: '',\r\n\r\n        });\r\n        setIsViewMode(false);\r\n    };\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(`${UrlLink}Ip_Workbench/IP_BloodLines_Details_Link`, { params: { RegistrationId: IP_DoctorWorkbenchNavigation?.RegistrationId, Type: 'Nurse' } })\r\n            .then((res) => {\r\n                const ress = res.data\r\n                console.log(ress)\r\n                setGridData(ress)\r\n\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            })\r\n    }, [UrlLink, IP_DoctorWorkbenchNavigation, IsGetData])\r\n\r\n\r\n\r\n\r\n    const HandleOnChange = (e) => {\r\n        const { name, value } = e.target;\r\n        const formattedValue = value.trim();\r\n        setBloodLines((prevFormData) => ({\r\n            ...prevFormData,\r\n            [name]: formattedValue,\r\n        }));\r\n    };\r\n\r\n\r\n    const handleSubmit = () => {\r\n\r\n        console.log(IP_DoctorWorkbenchNavigation?.RegistrationId);\r\n\r\n        const senddata = {\r\n            ...BloodLines,\r\n            RegistrationId: IP_DoctorWorkbenchNavigation?.RegistrationId,\r\n            Createdby: userRecord?.username,\r\n\r\n\r\n        }\r\n\r\n        console.log(senddata, 'senddata');\r\n\r\n        axios.post(`${UrlLink}Ip_Workbench/IP_BloodLines_Details_Link`, senddata)\r\n            .then((res) => {\r\n                const [type, message] = [Object.keys(res.data)[0], Object.values(res.data)[0]];\r\n                dispatch({ type: 'toast', value: { message, type } });\r\n                setIsGetData(prev => !prev);\r\n                handleClear();\r\n            })\r\n            .catch((err) => console.log(err));\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"RegisFormcon_1\">\r\n\r\n                {/* Status Field */}\r\n                \r\n\r\n                <div className='RegisForm_1'>\r\n                    <label htmlFor=\"Status_0\">Status<span>:</span></label>\r\n                    <select\r\n                        id=\"Status_0\"\r\n                        name=\"Status\"\r\n                        value={BloodLines.Status}\r\n                        onChange={HandleOnChange}\r\n                        readOnly={IsViewMode}\r\n                    >\r\n                        <option value=\"\">Select</option>\r\n                        <option value=\"Inserted\">Inserted</option>\r\n                        <option value=\"StatusCheck\">StatusCheck</option>\r\n                        <option value=\"Removed\">Removed</option>\r\n                    </select>\r\n                </div>  \r\n               \r\n                {/* BlType Field */}\r\n                <div className='RegisForm_1'>\r\n                    <label htmlFor=\"BlType_0\">Type<span>:</span></label>\r\n                    <select\r\n                        id=\"BlType_0\"\r\n                        name=\"BlType\"\r\n                        value={BloodLines.BlType}\r\n                        onChange={HandleOnChange}\r\n                        readOnly={IsViewMode}\r\n                    >\r\n                        <option value=\"\">Select</option>\r\n                        <option value=\"IV\">IV</option>\r\n                        <option value=\"IA\">IA</option>\r\n                    </select>\r\n                </div>\r\n\r\n                {/* IVsite Field (only shown if BlType is 'IV') */}\r\n                {BloodLines.BlType === 'IV' && (\r\n                    <div className='RegisForm_1'>\r\n                        <label htmlFor=\"IVsite_0\">IV Site<span>:</span></label>\r\n                        <select\r\n                            id=\"IVsite_0\"\r\n                            name=\"IVsite\"\r\n                            value={BloodLines.IVsite}\r\n                            onChange={HandleOnChange}\r\n                            readOnly={IsViewMode}\r\n                        >\r\n                            <option value=\"\">Select</option>\r\n                            <option value=\"External Jugular\">External Jugular</option>\r\n                            <option value=\"Subclavian vein\">Subclavian vein</option>\r\n                            <option value=\"Femoral vein\">Femoral vein</option>\r\n                            <option value=\"Dorsal Venous Network of Hand\">Dorsal Venous Network of Hand</option>\r\n                            <option value=\"Radial vein\">Radial vein</option>\r\n                            <option value=\"Median Cubital vein\">Median Cubital vein</option>\r\n                            <option value=\"Cephalic vein\">Cephalic vein</option>\r\n                            <option value=\"Dorsal Venous Network of Leg\">Dorsal Venous Network of Leg</option>\r\n                            <option value=\"Saphaneous vein\">Saphaneous vein</option>\r\n                            <option value=\"Superficial Temporal vein\">Superficial Temporal vein</option>\r\n                        </select>\r\n                    </div>\r\n                )}\r\n\r\n                {/* IASite Field (only shown if BlType is 'IA') */}\r\n                {BloodLines.BlType === 'IA' && (\r\n                    <div className='RegisForm_1'>\r\n                        <label htmlFor=\"IAsite_0\">IA Site<span>:</span></label>\r\n                        <select\r\n                            id=\"IAsite_0\"\r\n                            name=\"IAsite\"\r\n                            value={BloodLines.IAsite}\r\n                            onChange={HandleOnChange}\r\n                            readOnly={IsViewMode}\r\n                        >\r\n                            <option value=\"\">Select</option>\r\n                            <option value=\"Radial\">Radial</option>\r\n                            <option value=\"Ulnar\">Ulnar</option>\r\n                            <option value=\"Brachial\">Brachial</option>\r\n                            <option value=\"Axillary\">Axillary</option>\r\n                            <option value=\"Posterior tibial\">Posterior tibial</option>\r\n                            <option value=\"Femoral\">Femoral</option>\r\n                            <option value=\"Dorsalis Pedis\">Dorsalis Pedis</option>\r\n                        </select>\r\n                    </div>\r\n                )}\r\n\r\n                {/* Condition Field */}\r\n                <div className='RegisForm_1'>\r\n                    <label htmlFor=\"Condition_0\">Condition<span>:</span></label>\r\n                    <select\r\n                        id=\"Condition_0\"\r\n                        name=\"Condition\"\r\n                        value={BloodLines.Condition}\r\n                        onChange={HandleOnChange}\r\n                        readOnly={IsViewMode}\r\n                    >\r\n                        <option value=\"\">Select</option>\r\n                        <option value=\"Clean\">Clean</option>\r\n                        <option value=\"Redness\">Redness</option>\r\n                        <option value=\"Swelling\">Swelling</option>\r\n                        <option value=\"Draining\">Draining</option>\r\n                        <option value=\"Blocked\">Blocked</option>\r\n                    </select>\r\n                </div>\r\n\r\n                \r\n\r\n\r\n               \r\n\r\n                {BloodLines.Status !== 'Inserted' && (\r\n                    <div className='RegisForm_1'>\r\n                        <label htmlFor=\"CentralLineInfection_Yes\">CentralLine Infection<span>:</span></label>\r\n\r\n                        <div className=\"text_adjust_mt_Ot_rado_0\">\r\n\r\n                            <input\r\n                                type='radio'\r\n                                id=\"CentralLineInfection_Yes\"\r\n                                name=\"CentralLineInfection\"\r\n                                value='Yes'\r\n                                checked={BloodLines.CentralLineInfection === 'Yes'}\r\n                                onChange={HandleOnChange}\r\n                                readOnly={IsViewMode}\r\n                            />\r\n                            <label htmlFor=\"CentralLineInfection_Yes\">Yes</label>\r\n\r\n                            <input\r\n                                type='radio'\r\n                                id=\"CentralLineInfection_No\"\r\n                                name=\"CentralLineInfection\"\r\n                                value='No'\r\n                                checked={BloodLines.CentralLineInfection === 'No'}\r\n                                onChange={HandleOnChange}\r\n                                readOnly={IsViewMode}\r\n                            />\r\n                            <label htmlFor=\"CentralLineInfection_No\">No</label>\r\n                        </div>\r\n                    </div>\r\n                )}    \r\n                \r\n    \r\n\r\n                {/* Remarks Field */}\r\n                <div className='RegisForm_1'>\r\n                    <label htmlFor=\"Remarks_0\">Remarks<span>:</span></label>\r\n                    <textarea\r\n                        id=\"Remarks_0\"\r\n                        name=\"Remarks\"\r\n                        value={BloodLines.Remarks}\r\n                        onChange={HandleOnChange}\r\n                        readOnly={IsViewMode}\r\n                        placeholder='Enter your remarks here'\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n            <div className=\"Main_container_Btn\">\r\n\r\n                {IsViewMode && (\r\n                    <button onClick={handleClear}>Clear</button>\r\n                )}\r\n                {!IsViewMode && (\r\n                    <button onClick={handleSubmit}>Submit</button>\r\n                )}\r\n            </div>\r\n\r\n            {gridData.length >= 0 &&\r\n                <ReactGrid columns={BloodLinesColumns} RowData={gridData} />\r\n            }\r\n\r\n            <ToastAlert Message={toast.message} Type={toast.type} />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default IP_BloodLines;"],"names":["IP_BloodLines","dispatch","useDispatch","UrlLink","useSelector","state","_state$userRecord","userRecord","toast","_state$userRecord2","IP_DoctorWorkbenchNavigation","_state$Frontoffice","Frontoffice","console","log","_state$userRecord3","UserData","BloodLines","setBloodLines","useState","BlType","IVsite","IAsite","Condition","Status","CentralLineInfection","Remarks","gridData","setGridData","IsGetData","setIsGetData","IsViewMode","setIsViewMode","BloodLinesColumns","key","name","frozen","renderCell","params","_jsx","IconButton","onClick","handleView","row","children","VisibilityIcon","data","handleClear","useEffect","axios","get","concat","RegistrationId","Type","then","res","ress","catch","err","HandleOnChange","e","value","target","formattedValue","trim","prevFormData","_jsxs","_Fragment","className","htmlFor","id","onChange","readOnly","type","checked","placeholder","handleSubmit","senddata","Createdby","username","post","message","Object","keys","values","prev","length","ReactGrid","columns","RowData","ToastAlert","Message"],"sourceRoot":""}